// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexico.jflex

package com.wilsoncys.compi1.java.model.analisis;


// importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.wilsoncys.compi1.java.model.excepciones.Errores;



@SuppressWarnings("fallthrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int JAVA = 2;
  public static final int PROGRAMA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  4,  5,  6,  0,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 22, 23,  0, 
     0, 24, 25, 26, 25, 25, 25, 27, 25, 25, 28, 25, 29, 30, 25, 31, 
    32, 25, 33, 34, 25, 25, 35, 25, 25, 25, 25, 36, 37, 38, 39, 40, 
     0, 41, 42, 43, 44, 45, 46, 47, 48, 49, 25, 50, 51, 52, 53, 54, 
    55, 25, 56, 57, 58, 59, 60, 61, 62, 25, 25, 63, 64, 65,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\1\1\3\1\1\1\4\2\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\23\1\24"+
    "\1\25\1\26\15\23\1\27\1\1\1\30\2\1\1\4"+
    "\1\31\14\23\2\0\1\32\1\0\1\33\2\0\1\34"+
    "\2\0\1\35\1\36\1\0\1\2\1\0\1\37\1\40"+
    "\1\41\10\23\1\42\5\23\1\43\13\23\1\44\4\0"+
    "\5\23\1\42\6\23\4\0\2\45\1\0\1\46\15\23"+
    "\1\47\1\50\1\51\12\23\7\0\7\23\1\50\3\23"+
    "\4\0\1\2\3\23\1\52\1\53\4\23\1\54\3\23"+
    "\1\55\6\23\1\56\1\57\1\60\1\23\1\61\1\62"+
    "\1\63\1\64\3\0\1\65\1\23\1\53\4\23\1\66"+
    "\2\23\4\0\2\23\1\67\1\23\1\70\6\23\1\71"+
    "\5\23\1\72\3\0\2\23\1\73\1\74\1\75\1\23"+
    "\1\76\1\77\3\0\1\100\12\23\1\101\1\102\1\103"+
    "\3\0\1\104\1\105\1\106\3\0\1\107\2\23\1\110"+
    "\1\111\2\23\1\112\1\113\1\23\4\0\1\114\2\0"+
    "\1\23\1\115\1\23\1\116\1\23\1\117\1\120\1\121"+
    "\1\0\1\122\1\123\1\0\1\124\1\23\1\125\1\0"+
    "\1\126\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\306\0\306\0\306\0\u0318"+
    "\0\306\0\u035a\0\306\0\u039c\0\u03de\0\306\0\306\0\u0420"+
    "\0\u0462\0\u04a4\0\u04e6\0\u0528\0\306\0\306\0\306\0\u056a"+
    "\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\306\0\u08c4\0\306\0\u0906"+
    "\0\u0948\0\306\0\u0294\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\306\0\u0210\0\306\0\u0d26\0\u0d68\0\306\0\u0daa"+
    "\0\u0dec\0\306\0\306\0\u0e2e\0\u0e70\0\u0eb2\0\306\0\306"+
    "\0\306\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080"+
    "\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u04e6"+
    "\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e"+
    "\0\u14a0\0\u14e2\0\u1524\0\306\0\u1566\0\u15a8\0\u15ea\0\u162c"+
    "\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u04e6\0\u17b8\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a"+
    "\0\306\0\u0daa\0\u1a4c\0\u0eb2\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u04e6\0\u1de8\0\u04e6\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0"+
    "\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u04e6\0\u245a\0\u249c\0\u24de"+
    "\0\u2520\0\u2562\0\u25a4\0\u25e6\0\306\0\u2628\0\u266a\0\u26ac"+
    "\0\u04e6\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u04e6\0\u2838"+
    "\0\u287a\0\u28bc\0\u04e6\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06"+
    "\0\u2a48\0\u04e6\0\u04e6\0\u04e6\0\u2a8a\0\306\0\306\0\306"+
    "\0\306\0\u2acc\0\u2b0e\0\u2b50\0\u04e6\0\u2b92\0\u04e6\0\u2bd4"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u04e6\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2"+
    "\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u04e6\0\u2eec\0\u04e6\0\u2f2e"+
    "\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e"+
    "\0\u3180\0\u31c2\0\u3204\0\u04e6\0\u3246\0\u3288\0\u32ca\0\u330c"+
    "\0\u334e\0\u04e6\0\u04e6\0\u04e6\0\u3390\0\u04e6\0\306\0\u33d2"+
    "\0\u3414\0\u3456\0\u04e6\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0"+
    "\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u04e6\0\u04e6\0\u04e6"+
    "\0\u372c\0\u376e\0\u37b0\0\u04e6\0\u04e6\0\u04e6\0\u37f2\0\u3834"+
    "\0\u3876\0\u04e6\0\u38b8\0\u38fa\0\u04e6\0\u04e6\0\u393c\0\u397e"+
    "\0\u04e6\0\u04e6\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\306"+
    "\0\u3b0a\0\u3b4c\0\u3b8e\0\u04e6\0\u3bd0\0\u04e6\0\u3c12\0\306"+
    "\0\306\0\306\0\u3c54\0\306\0\306\0\u3c96\0\u04e6\0\u3cd8"+
    "\0\u04e6\0\u3d1a\0\306\0\u04e6\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\0\3\4\1\6\57\4\1\7\13\4"+
    "\2\5\1\0\1\10\1\11\1\4\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\12\33\1\34"+
    "\1\33\1\35\1\4\1\36\1\37\1\4\1\33\1\40"+
    "\1\41\1\42\1\43\1\44\2\33\1\45\3\33\1\46"+
    "\1\33\1\47\1\50\1\51\1\52\1\33\1\53\1\54"+
    "\1\33\1\55\1\56\1\57\1\4\2\5\1\0\1\10"+
    "\1\60\1\61\1\62\1\63\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\4\33\1\64\3\33\1\65\3\33"+
    "\1\35\1\4\1\36\1\37\1\4\1\33\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\33\1\74\2\33\1\75"+
    "\2\33\1\76\1\33\1\77\2\33\1\53\1\54\1\33"+
    "\1\55\1\56\1\57\103\0\2\5\106\0\1\100\162\0"+
    "\1\101\37\0\1\102\53\0\5\103\1\104\37\103\1\105"+
    "\34\103\7\0\1\106\102\0\1\107\71\0\11\110\1\0"+
    "\33\110\1\111\34\110\15\0\1\112\103\0\1\113\76\0"+
    "\1\114\4\0\1\115\100\0\1\116\1\0\1\25\105\0"+
    "\1\117\101\0\1\120\101\0\1\121\75\0\1\33\5\0"+
    "\14\33\4\0\27\33\25\0\1\33\5\0\14\33\4\0"+
    "\22\33\1\122\4\33\25\0\1\33\5\0\14\33\4\0"+
    "\16\33\1\123\1\33\1\124\6\33\25\0\1\33\5\0"+
    "\14\33\4\0\1\33\1\125\6\33\1\126\2\33\1\127"+
    "\2\33\1\130\10\33\25\0\1\33\5\0\14\33\4\0"+
    "\5\33\1\131\10\33\1\132\10\33\25\0\1\33\5\0"+
    "\14\33\4\0\13\33\1\133\12\33\1\134\25\0\1\33"+
    "\5\0\14\33\4\0\1\33\1\135\11\33\1\136\2\33"+
    "\1\137\10\33\25\0\1\33\5\0\14\33\4\0\6\33"+
    "\1\140\6\33\1\141\11\33\25\0\1\33\5\0\14\33"+
    "\4\0\5\33\1\142\15\33\1\143\3\33\25\0\1\33"+
    "\5\0\14\33\4\0\20\33\1\144\2\33\1\145\3\33"+
    "\25\0\1\33\5\0\14\33\4\0\5\33\1\146\21\33"+
    "\25\0\1\33\5\0\14\33\4\0\25\33\1\147\1\33"+
    "\25\0\1\33\5\0\14\33\4\0\10\33\1\150\7\33"+
    "\1\151\6\33\25\0\1\33\5\0\14\33\4\0\16\33"+
    "\1\152\10\33\25\0\1\33\5\0\14\33\4\0\10\33"+
    "\1\153\16\33\103\0\1\154\1\0\5\103\1\104\1\103"+
    "\1\155\24\103\1\156\3\103\1\157\4\103\1\105\34\103"+
    "\61\0\1\160\42\0\1\33\5\0\1\161\13\33\4\0"+
    "\27\33\25\0\1\33\5\0\1\162\13\33\4\0\27\33"+
    "\25\0\1\33\5\0\14\33\4\0\20\33\1\124\6\33"+
    "\25\0\1\33\5\0\14\33\4\0\1\33\1\125\6\33"+
    "\1\163\2\33\1\164\2\33\1\165\10\33\25\0\1\33"+
    "\5\0\14\33\4\0\5\33\1\131\10\33\1\166\10\33"+
    "\25\0\1\33\5\0\14\33\4\0\13\33\1\133\13\33"+
    "\25\0\1\33\5\0\14\33\4\0\13\33\1\167\2\33"+
    "\1\137\10\33\25\0\1\33\5\0\14\33\4\0\5\33"+
    "\1\170\21\33\25\0\1\33\5\0\14\33\4\0\6\33"+
    "\1\140\6\33\1\171\11\33\25\0\1\33\5\0\14\33"+
    "\4\0\1\33\1\172\25\33\25\0\1\33\5\0\14\33"+
    "\4\0\20\33\1\173\6\33\25\0\1\33\5\0\14\33"+
    "\4\0\3\33\1\174\16\33\1\122\2\33\1\147\1\33"+
    "\37\0\1\175\3\0\1\176\127\0\1\177\20\0\1\103"+
    "\3\0\1\103\33\0\1\103\17\0\1\103\4\0\1\103"+
    "\47\0\1\200\52\0\1\201\101\0\1\202\33\0\1\110"+
    "\17\0\1\110\2\0\1\110\1\0\1\110\7\0\14\114"+
    "\1\203\65\114\2\115\1\0\77\115\22\0\1\204\101\0"+
    "\1\33\5\0\14\33\4\0\20\33\1\205\6\33\25\0"+
    "\1\33\5\0\14\33\4\0\16\33\1\206\10\33\25\0"+
    "\1\33\5\0\14\33\4\0\5\33\1\207\21\33\25\0"+
    "\1\33\5\0\14\33\4\0\21\33\1\210\5\33\25\0"+
    "\1\33\5\0\14\33\4\0\1\33\1\211\25\33\25\0"+
    "\1\33\5\0\14\33\4\0\1\33\1\212\25\33\25\0"+
    "\1\33\5\0\14\33\4\0\15\33\1\213\11\33\25\0"+
    "\1\33\5\0\14\33\4\0\6\33\1\214\20\33\25\0"+
    "\1\33\5\0\14\33\4\0\23\33\1\215\3\33\25\0"+
    "\1\33\5\0\14\33\4\0\21\33\1\216\5\33\25\0"+
    "\1\33\5\0\14\33\4\0\22\33\1\217\4\33\25\0"+
    "\1\33\5\0\14\33\4\0\13\33\1\220\13\33\25\0"+
    "\1\33\5\0\14\33\4\0\16\33\1\221\10\33\25\0"+
    "\1\33\5\0\14\33\4\0\20\33\1\222\6\33\25\0"+
    "\1\33\5\0\14\33\4\0\22\33\1\223\4\33\25\0"+
    "\1\33\5\0\14\33\4\0\25\33\1\224\1\33\25\0"+
    "\1\33\5\0\14\33\4\0\13\33\1\225\13\33\25\0"+
    "\1\33\5\0\14\33\4\0\11\33\1\226\4\33\1\227"+
    "\10\33\25\0\1\33\5\0\14\33\4\0\2\33\1\230"+
    "\24\33\25\0\1\33\5\0\14\33\4\0\22\33\1\231"+
    "\4\33\25\0\1\33\5\0\14\33\4\0\11\33\1\232"+
    "\15\33\25\0\1\33\5\0\14\33\4\0\11\33\1\233"+
    "\15\33\25\0\1\33\5\0\14\33\4\0\23\33\1\234"+
    "\3\33\25\0\1\33\5\0\14\33\4\0\11\33\1\235"+
    "\15\33\25\0\1\33\5\0\14\33\4\0\11\33\1\236"+
    "\15\33\3\0\5\103\1\104\37\103\1\105\5\103\1\237"+
    "\1\240\1\103\1\241\12\103\1\242\15\103\1\104\22\103"+
    "\1\243\14\103\1\105\41\103\1\104\22\103\1\244\14\103"+
    "\1\105\34\103\65\0\1\245\36\0\1\33\5\0\13\33"+
    "\1\246\4\0\27\33\25\0\1\33\5\0\12\33\1\247"+
    "\1\33\4\0\27\33\25\0\1\33\5\0\14\33\4\0"+
    "\1\33\1\250\25\33\25\0\1\33\5\0\14\33\4\0"+
    "\20\33\1\251\6\33\25\0\1\33\5\0\14\33\4\0"+
    "\15\33\1\252\11\33\25\0\1\33\5\0\14\33\4\0"+
    "\16\33\1\253\10\33\25\0\1\33\5\0\14\33\4\0"+
    "\22\33\1\254\4\33\25\0\1\33\5\0\14\33\4\0"+
    "\22\33\1\255\4\33\25\0\1\33\5\0\14\33\4\0"+
    "\11\33\1\256\15\33\25\0\1\33\5\0\14\33\4\0"+
    "\11\33\1\257\15\33\25\0\1\33\5\0\14\33\4\0"+
    "\1\33\1\260\25\33\33\0\1\261\101\0\1\262\124\0"+
    "\1\263\67\0\1\264\40\0\14\114\1\203\4\114\1\265"+
    "\60\114\22\0\1\33\5\0\14\33\4\0\11\33\1\266"+
    "\15\33\25\0\1\33\5\0\14\33\4\0\13\33\1\267"+
    "\13\33\25\0\1\33\5\0\14\33\4\0\1\33\1\270"+
    "\25\33\25\0\1\33\5\0\14\33\4\0\5\33\1\271"+
    "\21\33\25\0\1\33\5\0\14\33\4\0\20\33\1\272"+
    "\6\33\25\0\1\33\5\0\14\33\4\0\21\33\1\273"+
    "\5\33\25\0\1\33\5\0\14\33\4\0\22\33\1\274"+
    "\4\33\25\0\1\33\5\0\14\33\4\0\1\33\1\275"+
    "\25\33\25\0\1\33\5\0\14\33\4\0\2\33\1\276"+
    "\24\33\25\0\1\33\5\0\14\33\4\0\5\33\1\277"+
    "\21\33\25\0\1\33\5\0\14\33\4\0\5\33\1\300"+
    "\21\33\25\0\1\33\5\0\14\33\4\0\21\33\1\234"+
    "\5\33\25\0\1\33\5\0\14\33\4\0\1\33\1\301"+
    "\25\33\25\0\1\33\5\0\14\33\4\0\11\33\1\302"+
    "\15\33\25\0\1\33\5\0\14\33\4\0\13\33\1\303"+
    "\13\33\25\0\1\33\5\0\14\33\4\0\15\33\1\304"+
    "\6\33\1\305\2\33\25\0\1\33\5\0\14\33\4\0"+
    "\22\33\1\306\4\33\25\0\1\33\5\0\14\33\4\0"+
    "\13\33\1\307\13\33\25\0\1\33\5\0\14\33\4\0"+
    "\23\33\1\310\3\33\25\0\1\33\5\0\14\33\4\0"+
    "\22\33\1\311\4\33\25\0\1\33\5\0\14\33\4\0"+
    "\21\33\1\312\5\33\25\0\1\33\5\0\14\33\4\0"+
    "\5\33\1\313\21\33\25\0\1\33\5\0\14\33\4\0"+
    "\4\33\1\314\22\33\25\0\1\33\5\0\14\33\4\0"+
    "\13\33\1\315\13\33\3\0\5\103\1\316\37\103\1\105"+
    "\41\103\1\317\37\103\1\105\41\103\1\320\37\103\1\105"+
    "\41\103\1\321\37\103\1\105\41\103\1\104\35\103\1\322"+
    "\1\103\1\105\41\103\1\104\34\103\1\323\2\103\1\105"+
    "\34\103\53\0\1\324\50\0\1\33\5\0\1\325\13\33"+
    "\4\0\27\33\25\0\1\33\5\0\2\33\1\326\11\33"+
    "\4\0\27\33\25\0\1\33\5\0\14\33\4\0\20\33"+
    "\1\327\6\33\25\0\1\33\5\0\14\33\4\0\21\33"+
    "\1\330\5\33\25\0\1\33\5\0\14\33\4\0\21\33"+
    "\1\331\1\274\4\33\25\0\1\33\5\0\14\33\4\0"+
    "\1\33\1\332\25\33\25\0\1\33\5\0\14\33\4\0"+
    "\3\33\1\333\23\33\25\0\1\33\5\0\14\33\4\0"+
    "\15\33\1\334\11\33\25\0\1\33\5\0\14\33\4\0"+
    "\15\33\1\335\11\33\25\0\1\33\5\0\14\33\4\0"+
    "\15\33\1\336\11\33\46\0\1\337\100\0\1\340\114\0"+
    "\1\341\63\0\1\342\64\0\1\33\5\0\14\33\4\0"+
    "\15\33\1\343\11\33\25\0\1\33\5\0\14\33\4\0"+
    "\5\33\1\344\21\33\25\0\1\33\5\0\14\33\4\0"+
    "\12\33\1\345\14\33\25\0\1\33\5\0\14\33\4\0"+
    "\11\33\1\346\15\33\25\0\1\33\5\0\14\33\4\0"+
    "\21\33\1\347\5\33\25\0\1\33\5\0\14\33\4\0"+
    "\11\33\1\350\15\33\25\0\1\33\5\0\14\33\4\0"+
    "\23\33\1\351\3\33\25\0\1\33\5\0\14\33\4\0"+
    "\13\33\1\352\13\33\25\0\1\33\5\0\14\33\4\0"+
    "\15\33\1\353\11\33\25\0\1\33\5\0\14\33\4\0"+
    "\22\33\1\354\4\33\25\0\1\33\5\0\14\33\4\0"+
    "\15\33\1\355\11\33\25\0\1\33\5\0\14\33\4\0"+
    "\22\33\1\356\4\33\25\0\1\33\5\0\14\33\4\0"+
    "\1\33\1\357\25\33\25\0\1\33\5\0\14\33\4\0"+
    "\5\33\1\360\21\33\25\0\1\33\5\0\14\33\4\0"+
    "\11\33\1\361\15\33\25\0\1\33\5\0\14\33\4\0"+
    "\20\33\1\362\6\33\25\0\1\33\5\0\14\33\4\0"+
    "\3\33\1\363\23\33\25\0\1\33\5\0\14\33\4\0"+
    "\5\33\1\364\21\33\3\0\5\103\1\104\22\103\1\365"+
    "\14\103\1\105\41\103\1\104\24\103\1\366\12\103\1\105"+
    "\34\103\63\0\1\367\40\0\1\33\5\0\1\370\13\33"+
    "\4\0\27\33\25\0\1\33\5\0\14\33\4\0\3\33"+
    "\1\371\23\33\25\0\1\33\5\0\14\33\4\0\22\33"+
    "\1\372\4\33\25\0\1\33\5\0\14\33\4\0\22\33"+
    "\1\373\4\33\25\0\1\33\5\0\14\33\4\0\10\33"+
    "\1\374\16\33\25\0\1\33\5\0\14\33\4\0\22\33"+
    "\1\375\4\33\25\0\1\33\5\0\14\33\4\0\6\33"+
    "\1\376\20\33\33\0\1\377\103\0\1\u0100\123\0\1\u0101"+
    "\60\0\1\u0102\70\0\1\33\5\0\14\33\4\0\7\33"+
    "\1\u0103\17\33\25\0\1\33\5\0\14\33\4\0\1\33"+
    "\1\u0104\25\33\25\0\1\33\5\0\14\33\4\0\15\33"+
    "\1\u0105\11\33\25\0\1\33\5\0\14\33\4\0\15\33"+
    "\1\u0106\11\33\25\0\1\33\5\0\14\33\4\0\13\33"+
    "\1\u0107\13\33\25\0\1\33\5\0\14\33\4\0\5\33"+
    "\1\373\21\33\25\0\1\33\5\0\14\33\4\0\4\33"+
    "\1\u0108\22\33\25\0\1\33\5\0\14\33\4\0\11\33"+
    "\1\u0109\15\33\25\0\1\33\5\0\14\33\4\0\17\33"+
    "\1\u010a\7\33\25\0\1\33\5\0\14\33\4\0\13\33"+
    "\1\u010b\13\33\25\0\1\33\5\0\14\33\4\0\22\33"+
    "\1\u010c\4\33\25\0\1\33\5\0\14\33\4\0\3\33"+
    "\1\u010d\23\33\25\0\1\33\5\0\14\33\4\0\3\33"+
    "\1\u010e\23\33\25\0\1\33\5\0\14\33\4\0\15\33"+
    "\1\u010f\11\33\25\0\1\33\5\0\14\33\4\0\10\33"+
    "\1\u0110\16\33\3\0\5\103\1\104\12\103\1\u0111\24\103"+
    "\1\105\41\103\1\104\22\103\1\u0112\14\103\1\105\34\103"+
    "\73\0\1\u0113\30\0\1\33\5\0\5\33\1\u0114\6\33"+
    "\4\0\27\33\25\0\1\33\5\0\14\33\4\0\20\33"+
    "\1\u0115\6\33\25\0\1\33\5\0\14\33\4\0\6\33"+
    "\1\u0116\20\33\33\0\1\u0117\144\0\1\u0118\47\0\1\u0119"+
    "\62\0\1\33\5\0\14\33\4\0\15\33\1\u011a\11\33"+
    "\25\0\1\33\5\0\14\33\4\0\17\33\1\u011b\7\33"+
    "\25\0\1\33\5\0\14\33\4\0\23\33\1\u011c\3\33"+
    "\25\0\1\33\5\0\14\33\4\0\22\33\1\u011d\4\33"+
    "\25\0\1\33\5\0\14\33\4\0\21\33\1\u011e\5\33"+
    "\25\0\1\33\5\0\14\33\4\0\15\33\1\u011f\11\33"+
    "\25\0\1\33\5\0\14\33\4\0\23\33\1\u0120\3\33"+
    "\25\0\1\33\5\0\14\33\4\0\15\33\1\u0121\11\33"+
    "\25\0\1\33\5\0\14\33\4\0\5\33\1\u0122\21\33"+
    "\25\0\1\33\5\0\14\33\4\0\22\33\1\u0123\4\33"+
    "\3\0\5\103\1\104\6\103\1\u0124\13\103\14\u0125\1\103"+
    "\1\105\3\103\26\u0125\10\103\1\104\27\103\1\u0126\7\103"+
    "\1\105\34\103\54\0\1\u0127\62\0\1\u0128\134\0\1\u0129"+
    "\41\0\1\u012a\73\0\1\33\5\0\14\33\4\0\23\33"+
    "\1\u012b\3\33\25\0\1\33\5\0\14\33\4\0\5\33"+
    "\1\u012c\21\33\25\0\1\33\5\0\14\33\4\0\17\33"+
    "\1\u012d\7\33\25\0\1\33\5\0\14\33\4\0\22\33"+
    "\1\u012e\4\33\25\0\1\33\5\0\14\33\4\0\5\33"+
    "\1\u012f\21\33\3\0\5\103\1\u0130\37\103\1\105\41\103"+
    "\1\u0131\14\103\1\u0125\5\103\14\u0125\1\103\1\105\2\103"+
    "\27\u0125\10\103\1\u0132\12\103\1\u0133\24\103\1\105\34\103"+
    "\55\0\1\u0134\101\0\1\u0135\62\0\1\u0136\65\0\1\33"+
    "\5\0\14\33\4\0\22\33\1\u0137\4\33\25\0\1\33"+
    "\5\0\14\33\4\0\23\33\1\u0138\3\33\25\0\1\33"+
    "\5\0\14\33\4\0\4\33\1\u0139\22\33\3\0\5\103"+
    "\1\104\22\103\14\u013a\1\103\1\105\3\103\26\u013a\3\103"+
    "\30\0\1\u013b\73\0\1\33\5\0\14\33\4\0\22\33"+
    "\1\u013c\4\33\3\0\5\103\1\u013d\14\103\1\u013a\5\103"+
    "\14\u013a\1\103\1\105\2\103\27\u013a\3\103";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15708];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\10\1\3\11\1\1\1\11\1\1\1\11"+
    "\2\1\2\11\5\1\3\11\15\1\1\11\1\1\1\11"+
    "\2\1\1\11\15\1\2\0\1\11\1\0\1\11\2\0"+
    "\1\11\2\0\2\11\1\0\1\1\1\0\3\11\32\1"+
    "\1\11\4\0\14\1\4\0\1\11\1\1\1\0\33\1"+
    "\7\0\13\1\4\0\1\11\30\1\4\11\3\0\12\1"+
    "\4\0\22\1\3\0\7\1\1\11\3\0\16\1\3\0"+
    "\3\1\3\0\12\1\4\0\1\11\2\0\5\1\3\11"+
    "\1\0\2\11\1\0\3\1\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LinkedList<Errores> listaErrores = new LinkedList<>();    
    
    private Symbol symbol(int type){
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value){
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      // sout.println("teto aanlizarrrrrrr: " + yytext());
    yyline = 1;
    yycolumn = 1;
    listaErrores = new LinkedList<>();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { listaErrores.add(new Errores("LEXICO","El caracter "+
                yytext()+" NO pertenece al lenguaje", yyline, yycolumn));
            }
          // fall through
          case 89: break;
          case 2:
            { 
            }
          // fall through
          case 90: break;
          case 3:
            { return symbol(sym.NOT, yytext());
            }
          // fall through
          case 91: break;
          case 4:
            { return symbol(sym.MOD, yytext());
            }
          // fall through
          case 92: break;
          case 5:
            { return symbol(sym.PAR_OP, yytext());
            }
          // fall through
          case 93: break;
          case 6:
            { return symbol(sym.PAR_CL, yytext());
            }
          // fall through
          case 94: break;
          case 7:
            { return symbol(sym.TIMES, yytext());
            }
          // fall through
          case 95: break;
          case 8:
            { return symbol(sym.PLUS, yytext());
            }
          // fall through
          case 96: break;
          case 9:
            { return symbol(sym.COLON, yytext());
            }
          // fall through
          case 97: break;
          case 10:
            { return symbol(sym.MINUS, yytext());
            }
          // fall through
          case 98: break;
          case 11:
            { return symbol(sym.DOT, yytext());
            }
          // fall through
          case 99: break;
          case 12:
            { return symbol(sym.DIVIDED, yytext());
            }
          // fall through
          case 100: break;
          case 13:
            { return symbol(sym.ENTERO, yytext());
            }
          // fall through
          case 101: break;
          case 14:
            { return symbol(sym.POINTS, yytext());
            }
          // fall through
          case 102: break;
          case 15:
            { return symbol(sym.SEMIC, yytext());
            }
          // fall through
          case 103: break;
          case 16:
            { return symbol(sym.LESS, yytext());
            }
          // fall through
          case 104: break;
          case 17:
            { return symbol(sym.ASSIGNMENT, yytext());
            }
          // fall through
          case 105: break;
          case 18:
            { return symbol(sym.GREATER, yytext());
            }
          // fall through
          case 106: break;
          case 19:
            { return symbol(sym.ID, yytext());
            }
          // fall through
          case 107: break;
          case 20:
            { return symbol(sym.BRACK_L, yytext());
            }
          // fall through
          case 108: break;
          case 21:
            { return symbol(sym.BRACK_R, yytext());
            }
          // fall through
          case 109: break;
          case 22:
            { return symbol(sym.RAISED, yytext());
            }
          // fall through
          case 110: break;
          case 23:
            { return symbol(sym.K_OP, yytext());
            }
          // fall through
          case 111: break;
          case 24:
            { return symbol(sym.K_CL, yytext());
            }
          // fall through
          case 112: break;
          case 25:
            { return symbol(sym.ANDSIMPLE, yytext());
            }
          // fall through
          case 113: break;
          case 26:
            { return symbol(sym.DIFFERENT, yytext());
            }
          // fall through
          case 114: break;
          case 27:
            { String cadenaReconocida = yytext();
                        String cadenaEntregar = cadenaReconocida.substring(1, cadenaReconocida.length() - 1); 
                        return symbol(sym.CADENA, cadenaEntregar );
            }
          // fall through
          case 115: break;
          case 28:
            { return symbol(sym.AND, yytext());
            }
          // fall through
          case 116: break;
          case 29:
            { return symbol(sym.PLUSPLUS, yytext());
            }
          // fall through
          case 117: break;
          case 30:
            { return symbol(sym.MINUSMINUS, yytext());
            }
          // fall through
          case 118: break;
          case 31:
            { return symbol(sym.L_EQUALS, yytext());
            }
          // fall through
          case 119: break;
          case 32:
            { return symbol(sym.EQUALS, yytext());
            }
          // fall through
          case 120: break;
          case 33:
            { return symbol(sym.G_EQUALS, yytext());
            }
          // fall through
          case 121: break;
          case 34:
            { return symbol(sym.DO, yytext());
            }
          // fall through
          case 122: break;
          case 35:
            { return symbol(sym.IF, yytext());
            }
          // fall through
          case 123: break;
          case 36:
            { return symbol(sym.OR, yytext());
            }
          // fall through
          case 124: break;
          case 37:
            { String charac = yytext();
                        charac = charac.substring(1, charac.length()-1);
                        return new Symbol(sym.CHARAC, yyline, yycolumn,charac);
            }
          // fall through
          case 125: break;
          case 38:
            { return symbol(sym.DECIMAL, yytext());
            }
          // fall through
          case 126: break;
          case 39:
            { return symbol(sym.FOR, yytext());
            }
          // fall through
          case 127: break;
          case 40:
            { return symbol(sym.INT, yytext());
            }
          // fall through
          case 128: break;
          case 41:
            { return symbol(sym.NEW, yytext());
            }
          // fall through
          case 129: break;
          case 42:
            { return symbol(sym.CASE, yytext());
            }
          // fall through
          case 130: break;
          case 43:
            { return symbol(sym.CHAR, yytext());
            }
          // fall through
          case 131: break;
          case 44:
            { return symbol(sym.ELSE, yytext());
            }
          // fall through
          case 132: break;
          case 45:
            { return symbol(sym.NULL, yytext());
            }
          // fall through
          case 133: break;
          case 46:
            { return  symbol(sym.THIS, yytext());
            }
          // fall through
          case 134: break;
          case 47:
            { return symbol(sym.BOOL, yytext());
            }
          // fall through
          case 135: break;
          case 48:
            { return symbol(sym.VOID, yytext());
            }
          // fall through
          case 136: break;
          case 49:
            { String idd = "c";
            return symbol(sym.MASK_C, idd);
            }
          // fall through
          case 137: break;
          case 50:
            { String idd = "d";
            return symbol(sym.MASK_D, idd);
            }
          // fall through
          case 138: break;
          case 51:
            { String idd = "f";
            return symbol(sym.MASK_F, idd);
            }
          // fall through
          case 139: break;
          case 52:
            { String idd = "s";
            return symbol(sym.MASK_S, idd);
            }
          // fall through
          case 140: break;
          case 53:
            { return symbol(sym.JAVA, yytext());
            }
          // fall through
          case 141: break;
          case 54:
            { return  symbol(sym.MAIN, yytext());
            }
          // fall through
          case 142: break;
          case 55:
            { return symbol(sym.BREAK, yytext());
            }
          // fall through
          case 143: break;
          case 56:
            { return  symbol(sym.CLASS, yytext());
            }
          // fall through
          case 144: break;
          case 57:
            { return  symbol(sym.PRINT, yytext());
            }
          // fall through
          case 145: break;
          case 58:
            { return symbol(sym.WHILE, yytext());
            }
          // fall through
          case 146: break;
          case 59:
            { return symbol(sym.CONST, yytext());
            }
          // fall through
          case 147: break;
          case 60:
            { return symbol(sym.DOUBLE, yytext());
            }
          // fall through
          case 148: break;
          case 61:
            { return symbol(sym.GETCH, yytext());
            }
          // fall through
          case 149: break;
          case 62:
            { return symbol(sym.SCAN, yytext());
            }
          // fall through
          case 150: break;
          case 63:
            { yybegin(JAVA);
            }
          // fall through
          case 151: break;
          case 64:
            { return symbol(sym.STRING, yytext());
            }
          // fall through
          case 152: break;
          case 65:
            { return  symbol(sym.PUBLIC, yytext());
            }
          // fall through
          case 153: break;
          case 66:
            { return symbol(sym.RETURN, yytext());
            }
          // fall through
          case 154: break;
          case 67:
            { return symbol(sym.SWITCH, yytext());
            }
          // fall through
          case 155: break;
          case 68:
            { return symbol(sym.PASCAL, yytext());
            }
          // fall through
          case 156: break;
          case 69:
            { return symbol(sym.CLRSCR, yytext());
            }
          // fall through
          case 157: break;
          case 70:
            { return symbol(sym.PRINT, yytext());
            }
          // fall through
          case 158: break;
          case 71:
            { return symbol(sym.BOOLEAN, yytext());
            }
          // fall through
          case 159: break;
          case 72:
            { return symbol(sym.DEFAULT, yytext());
            }
          // fall through
          case 160: break;
          case 73:
            { return  symbol(sym.EXTENDS, yytext());
            }
          // fall through
          case 161: break;
          case 74:
            { return  symbol(sym.PRINTLN, yytext());
            }
          // fall through
          case 162: break;
          case 75:
            { return  symbol(sym.PRIVATE, yytext());
            }
          // fall through
          case 163: break;
          case 76:
            { yybegin(YYINITIAL);
            }
          // fall through
          case 164: break;
          case 77:
            { return symbol(sym.CONTINUE, yytext());
            }
          // fall through
          case 165: break;
          case 78:
            { return symbol(sym.INP_INT, yytext());
            }
          // fall through
          case 166: break;
          case 79:
            { return  symbol(sym.JAVATODO, yytext());
            }
          // fall through
          case 167: break;
          case 80:
            { String id = yytext().substring(6, yytext().length() - 1); // extrae el id
                return symbol(sym.JAVAUNO, id);
            }
          // fall through
          case 168: break;
          case 81:
            { return  symbol(sym.PASCALSIMP, yytext());
            }
          // fall through
          case 169: break;
          case 82:
            { return symbol(sym.INCLUDE, yytext());
            }
          // fall through
          case 170: break;
          case 83:
            { return  symbol(sym.PROCEDURE, yytext());
            }
          // fall through
          case 171: break;
          case 84:
            { return symbol(sym.INP_C, yytext());
            }
          // fall through
          case 172: break;
          case 85:
            { return  symbol(sym.PROTECTED, yytext());
            }
          // fall through
          case 173: break;
          case 86:
            { yybegin(PROGRAMA);
            }
          // fall through
          case 174: break;
          case 87:
            { return symbol(sym.INP_F, yytext());
            }
          // fall through
          case 175: break;
          case 88:
            { String id = yytext().substring(8, yytext().length() - 1); // extrae el id
                return symbol(sym.PASCALUNO, id);
            }
          // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
