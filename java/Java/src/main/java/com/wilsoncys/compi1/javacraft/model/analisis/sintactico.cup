package com.wilsoncys.compi1.javacraft.model.analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;

import com.wilsoncys.compi1.javacraft.model.asbtracto.Instruction;
import com.wilsoncys.compi1.javacraft.model.excepciones.Errores;

import com.wilsoncys.compi1.javacraft.model.simbolo.*;
import com.wilsoncys.compi1.javacraft.model.instrucciones.*;
import com.wilsoncys.compi1.javacraft.model.expresiones.*;

import com.wilsoncys.compi1.javacraft.model.expresiones.Aritmeticas.*;
import com.wilsoncys.compi1.javacraft.model.expresiones.Enums.*;
import java.util.HashMap;


// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    // public void syntax_error(Symbol s){
    //     System.out.println("Error Sintactico en la linea " +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }

    // public void unrecovered_syntax_error (Symbol s){
    //     System.out.println("Error Sintactico no recuperable en la linea" +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }


:}

action code
{:
:}

//terminales
terminal String CADENA, BOOL, CHARAC, ENTERO, DECIMAL, ID;
terminal PLUS, MINUS, TIMES, DIVIDED, RAISED, MOD;
terminal GREATER, LESS, G_EQUALS, L_EQUALS, EQUALS, DIFFERENT;
terminal ASSIGNMENT;
terminal DO, IF, ELSE, FOR, BREAK, MATCH, WHILE, CONTINUE, DEFAULT, ARROW;

terminal OR, AND, XOR, NOT;
terminal UNEGATIVE, UMINUS, CAST;
terminal PLUSPLUS, MINUSMINUS;

terminal PRINT, INT, DOUBLE, BOOLEAN, CHAR, STRING, VOID;
terminal PAR_OP, PAR_CL, K_OP, K_CL, SEMIC, POINTS, BRACK_L, BRACK_R;
terminal VAR, CONST, COLON, START_W, LIST, NEW, DOT, APPEND, REMOVE, LENGTH, FIND, ROUND;
terminal RETURN, STRUCT, TUSTRIN;
terminal PROTECTED, PRIVATE, PUBLIC;
terminal EXTENDS, THIS, MAIN, CLASS, PRINTLN;



//no terminales
nonterminal LinkedList<Instruction> INICIO, InstructionES;
nonterminal Instruction Instruction, EXPRESION;
nonterminal Instruction globalDec, asignacion, increaseDecrease;
nonterminal Boolean mutabilidad;
// nonterminal Relational_LogicalOperations operador, logical;
nonterminal Tipo typeVar, varCasteo;
nonterminal Instruction print, while, do, for, match;
nonterminal Instruction if, simpleIf, elsees, declaraAsigna, updateVarFor;
nonterminal LinkedList<Instruction> cierreElse, valoresVectorAlone;
nonterminal LinkedList<CaseMatch>  listCases;
nonterminal CaseMatch case;
nonterminal Instruction continue, break, start_whit, methodd;
nonterminal Instruction declaracionEstructuraD;
nonterminal LinkedList<LinkedList<Instruction>>  valoresVector2D;
nonterminal LinkedList<HashMap>  parametersFuncts, paramsStructs, valuesStruct;
nonterminal LinkedList<Instruction>  callsParameters;
nonterminal Instruction append, call, returnn, callEXP, struct;
nonterminal structsTypes;
nonterminal modPriv, claass, Oneclaass, constructor;
nonterminal Instruction gIns, declaracion, gInstructionss, call2;
nonterminal Instruction callEXP2, paramss, assig_to_acces;

precedence left OR;
precedence left AND;
precedence left XOR;

precedence right UNEGATIVE;


precedence left EQUALS, DIFFERENT, LESS, L_EQUALS, GREATER, G_EQUALS;

 
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDED, MOD;
precedence nonassoc RAISED;

// precedence left ID;

precedence right UMINUS;
precedence right CAST;

start with INICIO;

INICIO ::= claass:a      {:   RESULT = new LinkedList<>();;   :}
;
// INICIO ::= InstructionES:a      {:   RESULT = a;   :}
// ;

InstructionES ::= InstructionES:a Instruction:b     {: RESULT = a; RESULT.add(b); :}
                | Instruction:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;


constructor::=  ID  PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
                | modPriv ID PAR_OP parametersFuncts PAR_CL  K_OP InstructionES K_CL 
;

modPriv::= PUBLIC
        |PROTECTED
        |PRIVATE
;


claass::= Oneclaass 
        | claass Oneclaass
;

Oneclaass::=  CLASS ID K_OP gInstructionss K_CL 
        | PUBLIC CLASS ID K_OP gInstructionss K_CL 
        |  CLASS ID EXTENDS ID K_OP gInstructionss K_CL         
        | PUBLIC CLASS ID EXTENDS ID K_OP gInstructionss K_CL         
;

gInstructionss::= gIns
        | gInstructionss gIns       
;

gIns::= methodd
        |globalDec
;

Instruction ::= declaracion:w {: RESULT = w; :}
        | asignacion:w {: RESULT = w; :}
        | print:w {: RESULT = w ; :}
        | if:w {: RESULT = w; :}
        | increaseDecrease:w {: RESULT = w; :}
        | for:w {: RESULT = w; :}
        | while:w {: RESULT =w;:}
        | do:w {: RESULT = w; :}
        | match:w {: RESULT = w; :}
        | break:w {: RESULT = w; :}
        | returnn:w {: RESULT = w; :}
        | continue:w {: RESULT = w;:}
        | declaracionEstructuraD:w {: RESULT = w; :}
        | struct:w {: RESULT = w; :}
        // | methodd:w {: RESULT = w; :}
        | start_whit:w {: RESULT = w; :}
        | call:w {: RESULT = w; :} 
        | error SEMIC
        | error
        ;


EXPRESION::= MINUS EXPRESION:a             {:   RESULT = new Negacion(a, OperadoresAritmeticos.NEGACION, aleft, aright);   :} %prec UMINUS
            | NOT EXPRESION:a  {:   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   :}              %prec UNEGATIVE
            | EXPRESION:a PLUS EXPRESION:b   {:   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   :}
            | EXPRESION:a MINUS EXPRESION:b   {:   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   :}
            | EXPRESION:a DIVIDED EXPRESION:b   {:   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   :}
            | EXPRESION:a TIMES EXPRESION:b   {:   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   :}
            | EXPRESION:a MOD EXPRESION:b   {:   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   :}
            | EXPRESION:a RAISED EXPRESION:b   {:   RESULT = new Raised(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   :}
            
            | EXPRESION:a EQUALS:op EXPRESION:b   {:   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   :}
            | EXPRESION:a DIFFERENT:op EXPRESION:b   {:   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   :}
            | EXPRESION:a LESS:op EXPRESION:b   {:   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   :}
            | EXPRESION:a L_EQUALS:op EXPRESION:b   {:   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   :}
            | EXPRESION:a GREATER:op EXPRESION:b   {:   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   :}
            | EXPRESION:a G_EQUALS:op EXPRESION:b   {:   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   :}
            
            | EXPRESION:a AND:log EXPRESION:b   {:   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   :}
            | EXPRESION:a OR:log EXPRESION:b   {:   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   :}
            | EXPRESION:a XOR:log EXPRESION:b   {:   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.XOR, aleft, aright);   :}
            | PAR_OP EXPRESION:a PAR_CL    {:   RESULT = a;   :}  
            | ENTERO:a      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   :}
            | DECIMAL:a     {:   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   :}
            | CADENA:a      {:   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   :}
            | CHARAC:a      {:   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   :}
            | BOOL:a      {:   RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright );   :}
            | ID:a      {:   RESULT = new Access(a, aleft, aright);   :}

            | ID:a BRACK_L EXPRESION:indx BRACK_R      {:   RESULT = new AccesVector(a, indx, aleft, aright);   :}
            | ID:a BRACK_L EXPRESION:indx1 BRACK_R BRACK_L  EXPRESION:indx2 BRACK_R      {:   RESULT = new AccesVector(a, indx1, indx2, aleft, aright);   :}
            | TUSTRIN PAR_OP EXPRESION:a PAR_CL {: RESULT = new FunctionToString(a, aleft, aright); :}
            | callEXP:a {: RESULT = a; :}    
            | NEW typeVar:t  PAR_OP callsParameters PAR_CL 
            | NEW typeVar:t  PAR_OP PAR_CL
        //     | ID:a DOT REMOVE PAR_OP EXPRESION:exp PAR_CL  {: RESULT = new DynamicLists(a, exp, false, aleft, aright); :}
        //     | ID:a DOT FIND  PAR_OP EXPRESION:exp PAR_CL {: RESULT = new FunctionFindd(a, exp, aleft, aright); :}    
        //     | ID:idStruct DOT ID:field {: RESULT = new Access(idStruct, field, idStructright, idStructleft); :} 
        //     | ID:idStruct DOT ID:field DOT ID:elseID {: RESULT = new Access(idStruct, field, elseID, idStructright, idStructleft); :} 
        //     | K_OP:a valuesStruct:valuess K_CL {: RESULT = new Structs(null, valuess, aleft, aright); :}
;


// public Method(String id, LinkedList<HashMap> parametros, LinkedList<Instruction> instrucciones, Tipo tipo, int linea, int col) {
 methodd ::= modPriv VOID:a ID:b PAR_OP parametersFuncts:p PAR_CL K_OP InstructionES:c K_CL    {:   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   :}
        |  modPriv VOID:a ID:b PAR_OP PAR_CL K_OP InstructionES:c K_CL             {:   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   :}
        |  modPriv typeVar:a ID:b PAR_OP parametersFuncts:p PAR_CL K_OP InstructionES:c K_CL    {:   RESULT= new Functionss(b, p, c, a, aleft, aright );   :}
        |  modPriv typeVar:a ID:b PAR_OP PAR_CL K_OP InstructionES:c K_CL             {:   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   :}
        
        |  VOID:a ID:b PAR_OP parametersFuncts:p PAR_CL K_OP InstructionES:c K_CL    {:   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   :}
        |   VOID:a ID:b PAR_OP PAR_CL K_OP InstructionES:c K_CL             {:   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   :}
        |   typeVar:a ID:b PAR_OP parametersFuncts:p PAR_CL K_OP InstructionES:c K_CL    {:   RESULT= new Functionss(b, p, c, a, aleft, aright );   :}
        |   typeVar:a ID:b PAR_OP PAR_CL K_OP InstructionES:c K_CL             {:   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   :}
        
        | modPriv VOID:a MAIN:b PAR_OP parametersFuncts:p PAR_CL K_OP InstructionES:c K_CL    {:   RESULT= new Method("MAIN", p, c, new Tipo(tipoDato.VOID), aleft, aright );   :}
        | modPriv VOID:a MAIN:b PAR_OP PAR_CL K_OP InstructionES:c K_CL    {:   RESULT= new Method("MAIN", new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   :}
        |  VOID:a MAIN:b PAR_OP parametersFuncts:p PAR_CL K_OP InstructionES:c K_CL    {:   RESULT= new Method("MAIN", p, c, new Tipo(tipoDato.VOID), aleft, aright );   :}
        |  VOID:a MAIN:b PAR_OP PAR_CL K_OP InstructionES:c K_CL    {:   RESULT= new Method("MAIN", new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   :}
        | constructor
;

parametersFuncts ::= parametersFuncts:a COLON typeVar:b ID:id   {:  
                                            RESULT = a;
                                            var elseParam= new HashMap<String, Object>();
                                            elseParam.put("id", id);
                                            elseParam.put("tipo", b);
                                            RESULT.add(elseParam);
                                        :}
        | typeVar:a ID:id                  {:  RESULT = new LinkedList<HashMap>(); 
                                            var oneParam = new HashMap<String, Object>();
                                            oneParam.put("id",id);
                                            oneParam.put("tipo", a);
                                            RESULT.add(oneParam);
                                        :}
;

// callEXP::= ID:a PAR_OP callsParameters:params PAR_CL {: RESULT = new Call(a, params, aleft, aright); :}
//         | ID:a PAR_OP PAR_CL {: RESULT = new Call(a, new LinkedList<Instruction>(), aleft, aright); :}
// ; 

paramss::= callsParameters
        |
;

callEXP::= ID:a DOT callEXP2   
        | ID:a PAR_OP paramss PAR_CL  DOT callEXP2
        | ID:a PAR_OP paramss PAR_CL  
;
// getA() . call2
callEXP2::=  
// ID:a PAR_OP paramss PAR_CL DOT callEXP
          | ID:a PAR_OP paramss PAR_CL DOT callEXP2
          | ID:a PAR_OP paramss PAR_CL 
          | ID:a DOT callEXP2  
          | ID:a  
;

 
call::= ID DOT call2
        | ID:a PAR_OP paramss PAR_CL DOT call2
        | ID:a PAR_OP paramss PAR_CL SEMIC
;
call2::= ID PAR_OP paramss PAR_CL DOT call
        |  ID DOT call
        | ID:a PAR_OP paramss PAR_CL SEMIC
;
 
 
start_whit ::=  START_W ID:a PAR_OP callsParameters:b PAR_CL SEMIC     {:   RESULT = new Start_Main(a, b, aleft, aright );   :}
            | START_W ID:a PAR_OP PAR_CL SEMIC                  {:   RESULT = new Start_Main(a, new LinkedList<Instruction>(), aleft, aright );   :}
;

callsParameters ::= callsParameters:a COLON EXPRESION:e    {:  RESULT = a;
                                                    RESULT.add(e);
                                                :}
            | EXPRESION:a                       {:  RESULT = new LinkedList<Instruction>(); 
                                                    RESULT.add(a);
                                                :}
            
;


varCasteo::= PAR_OP INT PAR_CL {: RESULT = new Tipo(tipoDato.ENTERO); :}
        | PAR_OP DOUBLE    PAR_CL {: RESULT = new Tipo(tipoDato.DECIMAL); :}
        |PAR_OP CHAR PAR_CL {: RESULT = new Tipo(tipoDato.CARACTER); :}
                                |PAR_OP STRING PAR_CL {: RESULT = new Tipo(tipoDato.CADENA); :}
        ;

if::=   IF PAR_OP EXPRESION:exp PAR_CL  K_OP InstructionES:ins K_CL ELSE  if:elif {: RESULT = new IF(exp, ins, elif, expleft, expright);    :}
        |elsees:w {: RESULT = w; :}
        |simpleIf:w {: RESULT = w; :}
; 

/*
for(var i:int=0; i<10; i++){
    println(i);
}*/
for::= FOR PAR_OP   declaraAsigna:a  EXPRESION:b SEMIC     updateVarFor:c PAR_CL K_OP InstructionES:ins K_CL
                {: RESULT = new CiclicaFor(a, b, c, ins, aleft, aright); :}
;

//     public CiclicaFor(Instruction asignacion, Instruction condicion, Instruction actualizacion, LinkedList<Instruction> instrucciones, int linea, int col) {
updateVarFor::=  ID:id PLUSPLUS  {: RESULT = new IncreaseDecrease(id, true, idleft, idright); :}
        |ID:id  MINUSMINUS  {: RESULT = new IncreaseDecrease(id, false, idleft, idright); :}
        |ID:id ASSIGNMENT EXPRESION:exp {:  RESULT = new Assignmentt(id, exp, idleft, idright);  :}
        ;

while::= WHILE PAR_OP    EXPRESION:a   PAR_CL K_OP  InstructionES:ins K_CL
                {: RESULT = new CiclicaWhile(a, ins, false,aleft, aright); :}
        ;

do::= DO K_OP  InstructionES:ins K_CL WHILE PAR_OP    EXPRESION:a   PAR_CL SEMIC
                {: RESULT = new CiclicaWhile(a, ins, false, aleft, aright); :}
        ;


match::= MATCH EXPRESION:exp K_OP  listCases:cazzoz K_CL
                {: RESULT = new Match(exp, cazzoz, expleft, expright); :}
;

listCases::=  listCases:b  case:a {: RESULT = b; RESULT.add(a); :}
        | case:a {:  RESULT = new LinkedList<>();   RESULT.add(a); :}
        ;


case::= EXPRESION:a ARROW K_OP InstructionES:ins K_CL
        {: RESULT = new CaseMatch(a, ins, false, aleft, aright); :}
        | DEFAULT:a ARROW K_OP InstructionES:ins K_CL
        {: RESULT = new CaseMatch(null, ins, true, aleft, aright); :}
;


declaraAsigna::= declaracion:w {: RESULT = w; :}
                | asignacion:w	{: RESULT = w; :}
                ;

cierreElse::= ELSE K_OP InstructionES:ins {: RESULT = ins;  :} K_CL 
;

simpleIf::=  IF PAR_OP EXPRESION:a PAR_CL  K_OP InstructionES:ins K_CL   
                                {: RESULT = new IF(a, ins, aleft, aright); :}
; 

//     public IF(Instruction expression, LinkedList<Instruction> instructionss, LinkedList<Instruction> instructionsElse, int linea, int col) {
elsees::=  IF PAR_OP EXPRESION:exp PAR_CL  K_OP InstructionES:ins K_CL cierreElse:insEls   
                {: RESULT = new IF(exp, ins, insEls, expleft, expright); :}
;


print::= PRINT PAR_OP callsParameters:a PAR_CL SEMIC   //{:   RESULT = new Print(a, aleft, aright);   :}
        |PRINTLN PAR_OP callsParameters:a PAR_CL SEMIC   //{:   RESULT = new Print(a, aleft, aright);   :}
;

 

declaracion::=   typeVar:t ID:string   SEMIC                     {: RESULT = new Statement(string, t, tleft, tright, false); :}
            |    typeVar:t ID:string   ASSIGNMENT EXPRESION:exp SEMIC {: RESULT = new Statement(string, exp, t, tleft, tright, false); :}    
;

globalDec::=    modPriv  typeVar:t ID:string   SEMIC                     {: RESULT = new Statement(string, t, tleft, tright, false); :}
            |     modPriv  typeVar:t ID:string   ASSIGNMENT EXPRESION:exp SEMIC {: RESULT = new Statement(string, exp, t, tleft, tright, false); :}    
            
        //     |     modPriv mutabilidad:a ID:string POINTS ID:st ASSIGNMENT K_OP valuesStruct:valuess K_CL SEMIC 
                // {: RESULT = new InstanceStruct(string, st, a, valuess, stringleft, stringright ); :}
        ;
        // mutabilidad:a ID:string POINTS typeVar:t SEMIC                     {: RESULT = new Statement(string, t, aleft, aright, a); :}
        //     |     modPriv mutabilidad:a ID:string POINTS typeVar:t ASSIGNMENT EXPRESION:exp SEMIC {: RESULT = new Statement(string, exp, t, aleft, aright, a); :}    
        //     |     modPriv mutabilidad:a ID:string POINTS ID:st ASSIGNMENT K_OP valuesStruct:valuess K_CL SEMIC 
        //         {: RESULT = new InstanceStruct(string, st, a, valuess, stringleft, stringright ); :}
        // ;
//     var p1: persona = { nombre: "Luis", edad: 20, estatura: 1.60 };


//public VectorsStatement(String identificador, boolean isConst, LinkedList<Instruction> valuesVect, LinkedList<LinkedList<Instruction>> valuesVect2D, Tipo tipo, int linea, int col) {
declaracionEstructuraD::= mutabilidad:a ID:id POINTS typeVar:t BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVectorAlone:vals BRACK_R SEMIC
                         {: RESULT = new VectorsStatement(id, a, vals, null, t, aleft, aright); :}
        |mutabilidad:a ID:id POINTS typeVar:t BRACK_L BRACK_R BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVector2D:vals BRACK_R SEMIC
                         {: RESULT = new VectorsStatement(id, a, null, vals, t, aleft, aright); :}
        | LIST LESS typeVar:t GREATER ID:id ASSIGNMENT NEW LIST PAR_OP PAR_CL SEMIC 
                {: RESULT = new DynamicLists(id, t, idleft, idright);     :}
        ;

    
valoresVector2D::= BRACK_L valoresVectorAlone:vals BRACK_R {: RESULT = new LinkedList<>(); RESULT.add(vals); :}
                | valoresVector2D:listaVals  COLON BRACK_L valoresVectorAlone:vals BRACK_R {: RESULT = listaVals; RESULT.add(vals); :}    
;


valoresVectorAlone::= EXPRESION:exp {: RESULT = new LinkedList<>();  RESULT.add(exp);  :}   //aqui solo entra la primera o ultima vez
                    |  valoresVectorAlone:valuess   COLON EXPRESION:exp     {: RESULT = valuess; RESULT.add(exp); :}
;

 

assig_to_acces::=ID  PAR_OP paramss PAR_CL DOT assig_to_acces
                | ID DOT assig_to_acces
                | ID
;

//     public Assignmentt(String id, Instruction exp, int linea, int col) {
asignacion::= THIS DOT ID:id ASSIGNMENT EXPRESION:exp SEMIC {:  RESULT = new Assignmentt(id, exp, idleft, idright);  :}
             | ID:id ASSIGNMENT EXPRESION:exp SEMIC {:  RESULT = new Assignmentt(id, exp, idleft, idright);  :}
             
             
             | ID DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC
             | ID PAR_OP paramss PAR_CL DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC


             | ID:id BRACK_L EXPRESION:index1 BRACK_R ASSIGNMENT EXPRESION:exp  SEMIC 
                {: RESULT = new AssignmentVectores(id, index1, exp, idleft, idright); :}
             | ID:id BRACK_L EXPRESION:index1 BRACK_R BRACK_L EXPRESION:index2 BRACK_R ASSIGNMENT EXPRESION:exp  SEMIC
              {: RESULT = new AssignmentVectores(id, index1, index2, exp, idleft, idright); :} 
        ; 

        // numeros[0][0] = 10;
//       vector2[j] = vector2[j + 1];
//       vector1[1] = "World";


increaseDecrease::=  ID:id PLUSPLUS SEMIC {: RESULT = new IncreaseDecrease(id, true, idleft, idright); :}
    |ID:id  MINUSMINUS SEMIC {: RESULT = new IncreaseDecrease(id, false, idleft, idright); :}
    ;


mutabilidad::= VAR {: RESULT = false; :}
        |CONST {: RESULT = true; :}
        ;

typeVar::=STRING        {: RESULT = new Tipo(tipoDato.CADENA); :}
        |INT             {: RESULT = new Tipo(tipoDato.ENTERO); :}
        |DOUBLE         {: RESULT = new Tipo(tipoDato.DECIMAL); :}
        |CHAR            {: RESULT = new Tipo(tipoDato.CARACTER); :}
        |BOOLEAN          {: RESULT = new Tipo(tipoDato.BOOLEANO); :}
        // |VOID          {: RESULT = new Tipo(tipoDato.VOID); :}
        | ID
        ;


break::= BREAK:w SEMIC {: RESULT = new transferBreak(wleft, wright);    :}
;

continue::= CONTINUE:a SEMIC {: RESULT = new transferContinue(aleft, aright); :}
;
returnn::= RETURN:a SEMIC {: RESULT = new transferReturn(aleft, aright); :}
        |RETURN:a  EXPRESION:exp SEMIC {: RESULT = new transferReturn(exp, expleft, expright); :}
;       

// struct::= STRUCT K_OP paramsStructs:params K_CL ID:id SEMIC {: RESULT = new Structs(id, params, idleft, idright); :}
// ;

// paramsStructs ::= paramsStructs:params  ID:id  POINTS structsTypes:a SEMIC {: RESULT = params;         
//                                 var elseParam= new HashMap<String, Object>();
//                                 elseParam.put("id", id);        elseParam.put("tipo", a);       RESULT.add(elseParam);
//                                                                                                                                 :}
//         | ID:id  POINTS structsTypes:a SEMIC {: RESULT = new LinkedList<>();   var oneParam = new HashMap<String, Object>();
//                                             oneParam.put("id", id);      oneParam.put("tipo", a);
//                                                     RESULT.add(oneParam);:}
// ;


// structsTypes::= typeVar:t {: RESULT = t; :}
//                 |ID:id {: RESULT = id;
//                  :}
// ;

// valuesStruct::= valuesStruct:valuess COLON ID:id POINTS EXPRESION:exp {: RESULT = valuess; 
//                                                                          var elseParam = new HashMap<String, Object>();
//                                             elseParam.put("id", id);      elseParam.put("exp", exp);        RESULT.add(elseParam);:} 

//                 | ID:id POINTS EXPRESION:exp {:  RESULT = new LinkedList<>();   var oneParam = new HashMap<String, Object>();
//                                             oneParam.put("id", id);      oneParam.put("exp", exp);        RESULT.add(oneParam); :}
// ;
