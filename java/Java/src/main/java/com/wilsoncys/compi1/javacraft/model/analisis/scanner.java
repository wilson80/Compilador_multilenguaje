// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexico.jflex

package com.wilsoncys.compi1.javacraft.model.analisis;


// importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.wilsoncys.compi1.javacraft.model.excepciones.Errores;



@SuppressWarnings("fallthrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  4,  5,  0,  0,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22,  0, 
     0, 23, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25, 23, 23, 
    23, 23, 23, 26, 23, 23, 23, 23, 23, 23, 23, 27, 28, 29, 30, 31, 
     0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 23, 41, 42, 43, 44, 45, 
    46, 23, 47, 48, 49, 50, 51, 52, 53, 23, 23, 54, 55, 56,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\4\23\1\24\1\25"+
    "\1\26\1\27\15\23\1\30\1\1\1\31\1\32\1\0"+
    "\1\33\1\0\1\34\2\0\1\35\1\36\1\37\1\0"+
    "\1\2\1\0\1\40\1\41\1\42\1\43\7\23\1\44"+
    "\5\23\1\45\13\23\1\46\2\47\1\0\1\50\14\23"+
    "\1\51\1\52\1\23\1\53\6\23\1\54\2\23\1\2"+
    "\1\23\1\55\1\23\1\56\1\57\4\23\1\60\11\23"+
    "\1\61\1\62\1\63\1\23\1\64\2\23\1\65\1\66"+
    "\5\23\1\67\1\70\4\23\1\71\1\72\2\23\1\73"+
    "\6\23\1\74\1\75\2\23\1\76\2\23\1\77\1\100"+
    "\2\23\1\101\1\23\1\102\1\23\1\103\1\23\1\104"+
    "\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\71\0\u011d\0\u0156"+
    "\0\71\0\71\0\u018f\0\u01c8\0\71\0\u0201\0\71\0\u023a"+
    "\0\u0273\0\71\0\71\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390"+
    "\0\u03c9\0\u0402\0\71\0\71\0\71\0\71\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\71\0\u0720\0\71\0\71\0\344"+
    "\0\71\0\u0759\0\71\0\u0792\0\u07cb\0\71\0\71\0\71"+
    "\0\u0804\0\u083d\0\u0876\0\71\0\71\0\71\0\71\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0357\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\71\0\71\0\u0792\0\u0e07\0\u0876\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u0357\0\u10ec\0\u1125\0\u0357\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\u0357\0\u12b4\0\u12ed\0\71\0\u1326"+
    "\0\u0357\0\u135f\0\u0357\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u0357\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u0357\0\u0357\0\u0357\0\u16b6\0\u0357\0\u16ef"+
    "\0\u1728\0\u0357\0\u0357\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u0357\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u0357\0\u0357"+
    "\0\u199b\0\u19d4\0\u0357\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1"+
    "\0\u1b2a\0\u0357\0\u0357\0\u1b63\0\u1b9c\0\u0357\0\u1bd5\0\u1c0e"+
    "\0\u0357\0\u0357\0\u1c47\0\u1c80\0\u0357\0\u1cb9\0\u0357\0\u1cf2"+
    "\0\u0357\0\u1d2b\0\u0357\0\u0357";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\2\1\34\1\35\1\36\1\27"+
    "\1\37\1\40\1\41\1\42\1\43\2\27\1\44\2\27"+
    "\1\45\1\46\1\27\1\47\1\50\1\27\1\51\1\27"+
    "\1\52\1\53\1\27\1\54\1\55\1\56\72\0\2\3"+
    "\113\0\1\57\43\0\5\60\1\61\26\60\1\62\34\60"+
    "\7\0\1\63\61\0\10\64\1\0\23\64\1\65\34\64"+
    "\13\0\1\66\71\0\1\67\72\0\1\70\65\0\1\71"+
    "\4\0\1\72\67\0\1\73\1\0\1\21\74\0\1\74"+
    "\70\0\1\75\1\76\67\0\1\77\64\0\1\27\5\0"+
    "\4\27\4\0\27\27\24\0\1\27\5\0\4\27\4\0"+
    "\20\27\1\100\6\27\24\0\1\27\5\0\4\27\4\0"+
    "\1\27\1\101\25\27\24\0\1\27\5\0\4\27\4\0"+
    "\22\27\1\102\4\27\24\0\1\27\5\0\4\27\4\0"+
    "\16\27\1\103\10\27\24\0\1\27\5\0\4\27\4\0"+
    "\10\27\1\104\2\27\1\105\2\27\1\106\10\27\24\0"+
    "\1\27\5\0\4\27\4\0\16\27\1\107\10\27\24\0"+
    "\1\27\5\0\4\27\4\0\13\27\1\110\12\27\1\111"+
    "\24\0\1\27\5\0\4\27\4\0\1\27\1\112\11\27"+
    "\1\113\2\27\1\114\10\27\24\0\1\27\5\0\4\27"+
    "\4\0\6\27\1\115\6\27\1\116\11\27\24\0\1\27"+
    "\5\0\4\27\4\0\1\27\1\117\25\27\24\0\1\27"+
    "\5\0\4\27\4\0\5\27\1\120\21\27\24\0\1\27"+
    "\5\0\4\27\4\0\20\27\1\121\2\27\1\122\3\27"+
    "\24\0\1\27\5\0\4\27\4\0\5\27\1\123\21\27"+
    "\24\0\1\27\5\0\4\27\4\0\10\27\1\124\7\27"+
    "\1\125\6\27\24\0\1\27\5\0\4\27\4\0\1\27"+
    "\1\126\14\27\1\127\10\27\24\0\1\27\5\0\4\27"+
    "\4\0\10\27\1\130\16\27\72\0\1\131\6\0\1\60"+
    "\2\0\1\60\23\0\1\60\17\0\1\60\4\0\1\60"+
    "\17\0\1\132\70\0\1\133\23\0\1\64\17\0\1\64"+
    "\2\0\1\64\1\0\1\64\7\0\13\71\1\134\55\71"+
    "\2\72\1\0\66\72\21\0\1\135\70\0\1\27\5\0"+
    "\4\27\4\0\5\27\1\136\21\27\24\0\1\27\5\0"+
    "\4\27\4\0\11\27\1\137\15\27\24\0\1\27\5\0"+
    "\4\27\4\0\20\27\1\140\6\27\24\0\1\27\5\0"+
    "\4\27\4\0\16\27\1\141\10\27\24\0\1\27\5\0"+
    "\4\27\4\0\1\27\1\142\25\27\24\0\1\27\5\0"+
    "\4\27\4\0\1\27\1\143\25\27\24\0\1\27\5\0"+
    "\4\27\4\0\15\27\1\144\11\27\24\0\1\27\5\0"+
    "\4\27\4\0\23\27\1\145\3\27\24\0\1\27\5\0"+
    "\4\27\4\0\21\27\1\146\5\27\24\0\1\27\5\0"+
    "\4\27\4\0\22\27\1\147\4\27\24\0\1\27\5\0"+
    "\4\27\4\0\13\27\1\150\13\27\24\0\1\27\5\0"+
    "\4\27\4\0\16\27\1\151\10\27\24\0\1\27\5\0"+
    "\4\27\4\0\20\27\1\152\6\27\24\0\1\27\5\0"+
    "\4\27\4\0\22\27\1\153\4\27\24\0\1\27\5\0"+
    "\4\27\4\0\22\27\1\154\4\27\24\0\1\27\5\0"+
    "\4\27\4\0\25\27\1\155\1\27\24\0\1\27\5\0"+
    "\4\27\4\0\11\27\1\156\4\27\1\157\10\27\24\0"+
    "\1\27\5\0\4\27\4\0\2\27\1\160\24\27\24\0"+
    "\1\27\5\0\4\27\4\0\22\27\1\161\4\27\24\0"+
    "\1\27\5\0\4\27\4\0\11\27\1\162\15\27\24\0"+
    "\1\27\5\0\4\27\4\0\23\27\1\163\3\27\24\0"+
    "\1\27\5\0\4\27\4\0\20\27\1\164\6\27\24\0"+
    "\1\27\5\0\4\27\4\0\11\27\1\165\15\27\24\0"+
    "\1\27\5\0\4\27\4\0\11\27\1\166\15\27\3\0"+
    "\13\71\1\134\4\71\1\167\50\71\21\0\1\27\5\0"+
    "\4\27\4\0\1\27\1\170\25\27\24\0\1\27\5\0"+
    "\4\27\4\0\15\27\1\171\11\27\24\0\1\27\5\0"+
    "\4\27\4\0\11\27\1\172\15\27\24\0\1\27\5\0"+
    "\4\27\4\0\13\27\1\173\13\27\24\0\1\27\5\0"+
    "\4\27\4\0\20\27\1\174\6\27\24\0\1\27\5\0"+
    "\4\27\4\0\21\27\1\175\5\27\24\0\1\27\5\0"+
    "\4\27\4\0\21\27\1\176\1\177\4\27\24\0\1\27"+
    "\5\0\4\27\4\0\2\27\1\200\24\27\24\0\1\27"+
    "\5\0\4\27\4\0\5\27\1\201\21\27\24\0\1\27"+
    "\5\0\4\27\4\0\5\27\1\202\21\27\24\0\1\27"+
    "\5\0\4\27\4\0\21\27\1\163\5\27\24\0\1\27"+
    "\5\0\4\27\4\0\1\27\1\203\25\27\24\0\1\27"+
    "\5\0\4\27\4\0\11\27\1\204\15\27\24\0\1\27"+
    "\5\0\4\27\4\0\3\27\1\205\23\27\24\0\1\27"+
    "\5\0\4\27\4\0\15\27\1\206\6\27\1\207\2\27"+
    "\24\0\1\27\5\0\4\27\4\0\22\27\1\210\4\27"+
    "\24\0\1\27\5\0\4\27\4\0\13\27\1\211\13\27"+
    "\24\0\1\27\5\0\4\27\4\0\23\27\1\212\3\27"+
    "\24\0\1\27\5\0\4\27\4\0\21\27\1\213\5\27"+
    "\24\0\1\27\5\0\4\27\4\0\5\27\1\214\21\27"+
    "\24\0\1\27\5\0\4\27\4\0\4\27\1\215\22\27"+
    "\24\0\1\27\5\0\4\27\4\0\13\27\1\216\13\27"+
    "\24\0\1\27\5\0\4\27\4\0\12\27\1\217\14\27"+
    "\24\0\1\27\5\0\4\27\4\0\15\27\1\220\11\27"+
    "\24\0\1\27\5\0\4\27\4\0\11\27\1\221\15\27"+
    "\24\0\1\27\5\0\4\27\4\0\21\27\1\222\5\27"+
    "\24\0\1\27\5\0\4\27\4\0\22\27\1\223\4\27"+
    "\24\0\1\27\5\0\4\27\4\0\11\27\1\224\15\27"+
    "\24\0\1\27\5\0\4\27\4\0\13\27\1\225\13\27"+
    "\24\0\1\27\5\0\4\27\4\0\15\27\1\226\11\27"+
    "\24\0\1\27\5\0\4\27\4\0\22\27\1\227\4\27"+
    "\24\0\1\27\5\0\4\27\4\0\15\27\1\230\11\27"+
    "\24\0\1\27\5\0\4\27\4\0\10\27\1\231\16\27"+
    "\24\0\1\27\5\0\4\27\4\0\22\27\1\232\4\27"+
    "\24\0\1\27\5\0\4\27\4\0\1\27\1\233\25\27"+
    "\24\0\1\27\5\0\4\27\4\0\5\27\1\234\21\27"+
    "\24\0\1\27\5\0\4\27\4\0\11\27\1\235\15\27"+
    "\24\0\1\27\5\0\4\27\4\0\20\27\1\236\6\27"+
    "\24\0\1\27\5\0\4\27\4\0\5\27\1\237\21\27"+
    "\24\0\1\27\5\0\4\27\4\0\7\27\1\240\17\27"+
    "\24\0\1\27\5\0\4\27\4\0\15\27\1\241\11\27"+
    "\24\0\1\27\5\0\4\27\4\0\15\27\1\242\11\27"+
    "\24\0\1\27\5\0\4\27\4\0\5\27\1\243\21\27"+
    "\24\0\1\27\5\0\4\27\4\0\4\27\1\244\22\27"+
    "\24\0\1\27\5\0\4\27\4\0\11\27\1\245\15\27"+
    "\24\0\1\27\5\0\4\27\4\0\17\27\1\246\7\27"+
    "\24\0\1\27\5\0\4\27\4\0\13\27\1\247\13\27"+
    "\24\0\1\27\5\0\4\27\4\0\22\27\1\250\4\27"+
    "\24\0\1\27\5\0\4\27\4\0\3\27\1\251\23\27"+
    "\24\0\1\27\5\0\4\27\4\0\3\27\1\252\23\27"+
    "\24\0\1\27\5\0\4\27\4\0\15\27\1\253\11\27"+
    "\24\0\1\27\5\0\4\27\4\0\17\27\1\254\7\27"+
    "\24\0\1\27\5\0\4\27\4\0\23\27\1\255\3\27"+
    "\24\0\1\27\5\0\4\27\4\0\21\27\1\256\5\27"+
    "\24\0\1\27\5\0\4\27\4\0\15\27\1\257\11\27"+
    "\24\0\1\27\5\0\4\27\4\0\23\27\1\260\3\27"+
    "\24\0\1\27\5\0\4\27\4\0\15\27\1\261\11\27"+
    "\24\0\1\27\5\0\4\27\4\0\5\27\1\262\21\27"+
    "\24\0\1\27\5\0\4\27\4\0\22\27\1\263\4\27"+
    "\24\0\1\27\5\0\4\27\4\0\23\27\1\264\3\27"+
    "\24\0\1\27\5\0\4\27\4\0\5\27\1\265\21\27"+
    "\24\0\1\27\5\0\4\27\4\0\17\27\1\266\7\27"+
    "\24\0\1\27\5\0\4\27\4\0\22\27\1\267\4\27"+
    "\24\0\1\27\5\0\4\27\4\0\5\27\1\270\21\27"+
    "\24\0\1\27\5\0\4\27\4\0\22\27\1\271\4\27"+
    "\24\0\1\27\5\0\4\27\4\0\23\27\1\272\3\27"+
    "\24\0\1\27\5\0\4\27\4\0\4\27\1\273\22\27"+
    "\24\0\1\27\5\0\4\27\4\0\22\27\1\274\4\27"+
    "\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7524];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\7\1\4\11\15\1\1\11"+
    "\1\1\2\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\0\1\1\1\0\4\11\31\1\2\11\1\1\1\0"+
    "\32\1\1\11\105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LinkedList<Errores> listaErrores = new LinkedList<>();    
    
    private Symbol symbol(int type){
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value){
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      // sout.println("teto aanlizarrrrrrr: " + yytext());
    yyline = 1;
    yycolumn = 1;
    listaErrores = new LinkedList<>();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { listaErrores.add(new Errores("LEXICO","El caracter "+
                yytext()+" NO pertenece al lenguaje", yyline, yycolumn));
            }
          // fall through
          case 70: break;
          case 2:
            { 
            }
          // fall through
          case 71: break;
          case 3:
            { return symbol(sym.NOT, yytext());
            }
          // fall through
          case 72: break;
          case 4:
            { return symbol(sym.MOD, yytext());
            }
          // fall through
          case 73: break;
          case 5:
            { return symbol(sym.PAR_OP, yytext());
            }
          // fall through
          case 74: break;
          case 6:
            { return symbol(sym.PAR_CL, yytext());
            }
          // fall through
          case 75: break;
          case 7:
            { return symbol(sym.TIMES, yytext());
            }
          // fall through
          case 76: break;
          case 8:
            { return symbol(sym.PLUS, yytext());
            }
          // fall through
          case 77: break;
          case 9:
            { return symbol(sym.COLON, yytext());
            }
          // fall through
          case 78: break;
          case 10:
            { return symbol(sym.MINUS, yytext());
            }
          // fall through
          case 79: break;
          case 11:
            { return symbol(sym.DOT, yytext());
            }
          // fall through
          case 80: break;
          case 12:
            { return symbol(sym.DIVIDED, yytext());
            }
          // fall through
          case 81: break;
          case 13:
            { return symbol(sym.ENTERO, yytext());
            }
          // fall through
          case 82: break;
          case 14:
            { return symbol(sym.POINTS, yytext());
            }
          // fall through
          case 83: break;
          case 15:
            { return symbol(sym.SEMIC, yytext());
            }
          // fall through
          case 84: break;
          case 16:
            { return symbol(sym.LESS, yytext());
            }
          // fall through
          case 85: break;
          case 17:
            { return symbol(sym.ASSIGNMENT, yytext());
            }
          // fall through
          case 86: break;
          case 18:
            { return symbol(sym.GREATER, yytext());
            }
          // fall through
          case 87: break;
          case 19:
            { return symbol(sym.ID, yytext());
            }
          // fall through
          case 88: break;
          case 20:
            { return symbol(sym.BRACK_L, yytext());
            }
          // fall through
          case 89: break;
          case 21:
            { return symbol(sym.BRACK_R, yytext());
            }
          // fall through
          case 90: break;
          case 22:
            { return symbol(sym.XOR, yytext());
            }
          // fall through
          case 91: break;
          case 23:
            { return symbol(sym.DEFAULT, yytext());
            }
          // fall through
          case 92: break;
          case 24:
            { return symbol(sym.K_OP, yytext());
            }
          // fall through
          case 93: break;
          case 25:
            { return symbol(sym.K_CL, yytext());
            }
          // fall through
          case 94: break;
          case 26:
            { return symbol(sym.DIFFERENT, yytext());
            }
          // fall through
          case 95: break;
          case 27:
            { String cadenaReconocida = yytext();
                        String cadenaEntregar = cadenaReconocida.substring(1, cadenaReconocida.length() - 1); 
                        return symbol(sym.CADENA, cadenaEntregar );
            }
          // fall through
          case 96: break;
          case 28:
            { return symbol(sym.AND, yytext());
            }
          // fall through
          case 97: break;
          case 29:
            { return symbol(sym.RAISED, yytext());
            }
          // fall through
          case 98: break;
          case 30:
            { return symbol(sym.PLUSPLUS, yytext());
            }
          // fall through
          case 99: break;
          case 31:
            { return symbol(sym.MINUSMINUS, yytext());
            }
          // fall through
          case 100: break;
          case 32:
            { return symbol(sym.L_EQUALS, yytext());
            }
          // fall through
          case 101: break;
          case 33:
            { return symbol(sym.EQUALS, yytext());
            }
          // fall through
          case 102: break;
          case 34:
            { return symbol(sym.ARROW, yytext());
            }
          // fall through
          case 103: break;
          case 35:
            { return symbol(sym.G_EQUALS, yytext());
            }
          // fall through
          case 104: break;
          case 36:
            { return symbol(sym.DO, yytext());
            }
          // fall through
          case 105: break;
          case 37:
            { return symbol(sym.IF, yytext());
            }
          // fall through
          case 106: break;
          case 38:
            { return symbol(sym.OR, yytext());
            }
          // fall through
          case 107: break;
          case 39:
            { String charac = yytext();
                        charac = charac.substring(1, charac.length()-1);
                        return new Symbol(sym.CHARAC, yyline, yycolumn,charac);
            }
          // fall through
          case 108: break;
          case 40:
            { return symbol(sym.DECIMAL, yytext());
            }
          // fall through
          case 109: break;
          case 41:
            { return symbol(sym.FOR, yytext());
            }
          // fall through
          case 110: break;
          case 42:
            { return symbol(sym.INT, yytext());
            }
          // fall through
          case 111: break;
          case 43:
            { return symbol(sym.NEW, yytext());
            }
          // fall through
          case 112: break;
          case 44:
            { return symbol(sym.VAR, yytext());
            }
          // fall through
          case 113: break;
          case 45:
            { return  symbol(sym.MAIN, yytext());
            }
          // fall through
          case 114: break;
          case 46:
            { return symbol(sym.BOOLEAN, yytext());
            }
          // fall through
          case 115: break;
          case 47:
            { return symbol(sym.CHAR, yytext());
            }
          // fall through
          case 116: break;
          case 48:
            { return symbol(sym.ELSE, yytext());
            }
          // fall through
          case 117: break;
          case 49:
            { return  symbol(sym.THIS, yytext());
            }
          // fall through
          case 118: break;
          case 50:
            { return symbol(sym.BOOL, yytext());
            }
          // fall through
          case 119: break;
          case 51:
            { return symbol(sym.VOID, yytext());
            }
          // fall through
          case 120: break;
          case 52:
            { return symbol(sym.BREAK, yytext());
            }
          // fall through
          case 121: break;
          case 53:
            { return  symbol(sym.CLASS, yytext());
            }
          // fall through
          case 122: break;
          case 54:
            { return symbol(sym.CONST, yytext());
            }
          // fall through
          case 123: break;
          case 55:
            { return symbol(sym.MATCH, yytext());
            }
          // fall through
          case 124: break;
          case 56:
            { return  symbol(sym.PRINT, yytext());
            }
          // fall through
          case 125: break;
          case 57:
            { return symbol(sym.WHILE, yytext());
            }
          // fall through
          case 126: break;
          case 58:
            { return symbol(sym.STRING, yytext());
            }
          // fall through
          case 127: break;
          case 59:
            { return symbol(sym.DOUBLE, yytext());
            }
          // fall through
          case 128: break;
          case 60:
            { return  symbol(sym.PUBLIC, yytext());
            }
          // fall through
          case 129: break;
          case 61:
            { return symbol(sym.RETURN, yytext());
            }
          // fall through
          case 130: break;
          case 62:
            { return  symbol(sym.EXTENDS, yytext());
            }
          // fall through
          case 131: break;
          case 63:
            { return  symbol(sym.PRINTLN, yytext());
            }
          // fall through
          case 132: break;
          case 64:
            { return  symbol(sym.PRIVATE, yytext());
            }
          // fall through
          case 133: break;
          case 65:
            { return symbol(sym.CONTINUE, yytext());
            }
          // fall through
          case 134: break;
          case 66:
            { return symbol(sym.INP_INT, yytext());
            }
          // fall through
          case 135: break;
          case 67:
            { return symbol(sym.INP_C, yytext());
            }
          // fall through
          case 136: break;
          case 68:
            { return  symbol(sym.PROTECTED, yytext());
            }
          // fall through
          case 137: break;
          case 69:
            { return symbol(sym.INP_F, yytext());
            }
          // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
