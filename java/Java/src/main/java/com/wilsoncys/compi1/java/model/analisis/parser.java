
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.wilsoncys.compi1.java.model.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.wilsoncys.compi1.java.model.asbtracto.Instruction;
import com.wilsoncys.compi1.java.model.programa.*;
import com.wilsoncys.compi1.java.model.excepciones.Errores;
import com.wilsoncys.compi1.java.model.simbolo.*;
import com.wilsoncys.compi1.java.model.instrucciones.*;
import com.wilsoncys.compi1.java.model.poo.*;
import com.wilsoncys.compi1.java.model.expresiones.*;
import com.wilsoncys.compi1.java.model.expresiones.Aritmeticas.*;
import com.wilsoncys.compi1.java.model.expresiones.Enums.*;
import com.wilsoncys.compi1.java.model.programa.*;
import com.wilsoncys.compi1.java.model.programa.expresiones.*;
import com.wilsoncys.compi1.java.model.programa.instrucciones.*;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\002\002\004\000\002\002\003\000\002\060" +
    "\004\000\002\060\003\000\002\061\004\000\002\061\003" +
    "\000\002\107\003\000\002\063\005\000\002\063\002\000" +
    "\002\123\004\000\002\123\004\000\002\123\002\000\002" +
    "\125\004\000\002\125\004\000\002\124\004\000\002\124" +
    "\004\000\002\064\010\000\002\065\007\000\002\065\005" +
    "\000\002\066\011\000\002\117\004\000\002\117\004\000" +
    "\002\117\004\000\002\117\002\000\002\062\004\000\002" +
    "\062\004\000\002\062\002\000\002\122\003\000\002\122" +
    "\003\000\002\122\003\000\002\122\003\000\002\070\007" +
    "\000\002\070\010\000\002\126\004\000\002\126\005\000" +
    "\002\071\012\000\002\071\012\000\002\071\012\000\002" +
    "\071\012\000\002\072\006\000\002\111\006\000\002\111" +
    "\006\000\002\111\006\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\111\004\000\002\111\004\000\002" +
    "\111\003\000\002\111\003\000\002\111\003\000\002\110" +
    "\006\000\002\110\006\000\002\110\006\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\110\003\000\002\110\004\000\002\116" +
    "\004\000\002\116\002\000\002\101\006\000\002\113\010" +
    "\000\002\113\007\000\002\073\011\000\002\075\013\000" +
    "\002\076\013\000\002\076\003\000\002\076\003\000\002" +
    "\127\002\000\002\114\007\000\002\103\011\000\002\102" +
    "\012\000\002\074\014\000\002\105\004\000\002\105\004" +
    "\000\002\105\005\000\002\104\003\000\002\104\007\000" +
    "\002\077\011\000\002\120\004\000\002\120\003\000\002" +
    "\121\010\000\002\121\007\000\002\112\005\000\002\112" +
    "\003\000\002\115\003\000\002\115\002\000\002\100\011" +
    "\000\002\100\013\000\002\106\010\000\002\106\012\000" +
    "\002\067\004\000\002\067\004\000\002\067\005\000\002" +
    "\067\005\000\002\067\005\000\002\067\005\000\002\067" +
    "\005\000\002\067\005\000\002\067\005\000\002\067\005" +
    "\000\002\067\005\000\002\067\005\000\002\067\005\000" +
    "\002\067\005\000\002\067\005\000\002\067\005\000\002" +
    "\067\005\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\006" +
    "\000\002\067\011\000\002\067\006\000\002\067\003\000" +
    "\002\055\003\000\002\055\004\000\002\003\004\000\002" +
    "\003\003\000\002\053\003\000\002\053\002\000\002\057" +
    "\011\000\002\057\012\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\056\007\000\002\056\010\000" +
    "\002\056\011\000\002\056\012\000\002\052\003\000\002" +
    "\052\002\000\002\051\003\000\002\051\004\000\002\044" +
    "\003\000\002\044\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\005" +
    "\000\002\005\006\000\002\005\011\000\002\005\003\000" +
    "\002\005\007\000\002\005\006\000\002\033\013\000\002" +
    "\033\012\000\002\033\013\000\002\033\012\000\002\033" +
    "\012\000\002\033\011\000\002\033\012\000\002\033\011" +
    "\000\002\033\003\000\002\036\006\000\002\036\004\000" +
    "\002\054\003\000\002\054\002\000\002\042\005\000\002" +
    "\042\010\000\002\042\006\000\002\047\002\000\002\047" +
    "\010\000\002\047\006\000\002\047\005\000\002\047\003" +
    "\000\002\040\005\000\002\040\010\000\002\040\007\000" +
    "\002\046\010\000\002\046\005\000\002\046\007\000\002" +
    "\037\005\000\002\037\003\000\002\020\013\000\002\020" +
    "\003\000\002\020\003\000\002\016\014\000\002\024\004" +
    "\000\002\024\004\000\002\024\005\000\002\014\011\000" +
    "\002\015\013\000\002\017\007\000\002\027\004\000\002" +
    "\027\003\000\002\030\007\000\002\030\007\000\002\023" +
    "\003\000\002\023\003\000\002\130\002\000\002\025\007" +
    "\000\002\021\011\000\002\022\012\000\002\013\007\000" +
    "\002\013\007\000\002\045\005\000\002\045\007\000\002" +
    "\045\011\000\002\045\011\000\002\045\011\000\002\006" +
    "\006\000\002\006\010\000\002\006\005\000\002\006\007" +
    "\000\002\034\015\000\002\034\017\000\002\035\005\000" +
    "\002\035\007\000\002\026\003\000\002\026\005\000\002" +
    "\050\010\000\002\050\005\000\002\050\003\000\002\007" +
    "\010\000\002\007\006\000\002\007\010\000\002\007\013" +
    "\000\002\007\011\000\002\007\014\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\010\005\000\002" +
    "\010\005\000\002\011\003\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\032\004\000" +
    "\002\031\004\000\002\041\004\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02e1\000\032\002\ufff9\052\ufff6\053\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\071\ufff6\100\004\104\020\111\006\113\ufff6" +
    "\122\012\001\002\000\004\104\u02d9\001\002\000\004\002" +
    "\u02d8\001\002\000\030\002\ufffb\052\ufffb\053\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\071\ufffb\100\ufffb\104\ufffb\113\ufffb\122" +
    "\ufffb\001\002\000\004\002\ufffe\001\002\000\022\052\ufff6" +
    "\053\ufff6\055\ufff6\056\ufff6\057\ufff6\071\ufff6\113\ufff6\122" +
    "\012\001\002\000\004\002\ufffc\001\002\000\012\116\u02d6" +
    "\117\u02d4\120\u02d3\121\u02d5\001\002\000\030\002\ufff9\052" +
    "\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6\071\ufff6\100\004" +
    "\104\020\113\ufff6\122\012\001\002\000\022\052\ufff6\053" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\071\ufff6\113\ufff6\122\012" +
    "\001\002\000\030\002\ufff9\052\ufff6\053\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\071\ufff6\100\004\104\020\113\ufff6\122\012" +
    "\001\002\000\030\002\uff83\052\uff83\053\uff83\055\uff83\056" +
    "\uff83\057\uff83\071\uff83\100\uff83\104\uff83\113\uff83\122\uff83" +
    "\001\002\000\020\052\uffea\053\uffea\055\uffea\056\uffea\057" +
    "\uffea\071\uffea\113\uffea\001\002\000\004\011\022\001\002" +
    "\000\004\002\000\001\002\000\006\062\023\101\024\001" +
    "\002\000\026\011\041\052\027\053\040\054\034\055\047" +
    "\056\037\057\035\076\036\077\042\100\031\001\002\000" +
    "\004\011\025\001\002\000\004\062\026\001\002\000\026" +
    "\011\041\052\027\053\040\054\034\055\047\056\037\057" +
    "\035\076\036\077\042\100\031\001\002\000\006\011\ufeed" +
    "\066\ufeed\001\002\000\030\011\041\052\027\053\040\054" +
    "\034\055\047\056\037\057\035\063\u01a9\076\036\077\042" +
    "\100\031\001\002\000\020\011\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\055\uff7b\056\uff7b\057\uff7b\001\002\000\030\011\uff6f" +
    "\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\063" +
    "\uff6f\076\uff6f\077\uff6f\100\uff6f\001\002\000\030\011\uff38" +
    "\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38\057\uff38\063" +
    "\uff38\076\uff38\077\uff38\100\uff38\001\002\000\006\011\ufeea" +
    "\066\ufeea\001\002\000\004\011\u019e\001\002\000\020\011" +
    "\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a" +
    "\001\002\000\006\011\ufeee\066\ufeee\001\002\000\006\011" +
    "\ufeec\066\ufeec\001\002\000\006\011\ufee9\060\u0198\001\002" +
    "\000\020\011\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056" +
    "\uff79\057\uff79\001\002\000\030\011\uff72\052\uff72\053\uff72" +
    "\054\uff72\055\uff72\056\uff72\057\uff72\063\uff72\076\uff72\077" +
    "\uff72\100\uff72\001\002\000\020\011\u0175\052\027\053\040" +
    "\054\034\055\047\056\037\057\u0177\001\002\000\030\011" +
    "\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70" +
    "\063\uff70\076\uff70\077\uff70\100\uff70\001\002\000\004\011" +
    "\050\001\002\000\006\011\ufeeb\066\ufeeb\001\002\000\010" +
    "\026\051\060\052\064\053\001\002\000\030\004\127\005" +
    "\132\006\137\007\135\010\131\011\140\013\130\044\142" +
    "\060\134\073\133\102\141\001\002\000\020\011\056\052" +
    "\027\053\040\054\034\055\047\056\037\061\055\001\002" +
    "\000\030\011\uff06\052\uff06\053\uff06\054\uff06\055\uff06\056" +
    "\uff06\057\uff06\063\uff06\076\uff06\077\uff06\100\uff06\001\002" +
    "\000\006\061\u016d\072\u016c\001\002\000\004\062\061\001" +
    "\002\000\006\011\ufee9\066\ufee9\001\002\000\004\011\060" +
    "\001\002\000\006\061\uff36\072\uff36\001\002\000\054\003" +
    "\104\011\101\027\124\030\076\032\072\033\105\034\111" +
    "\035\116\036\067\051\125\052\027\053\040\054\034\055" +
    "\047\056\037\063\uff7e\070\123\071\063\075\102\102\100" +
    "\105\071\001\002\000\054\003\uff61\011\uff61\027\uff61\030" +
    "\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\051\uff61" +
    "\052\uff61\053\uff61\054\uff61\055\uff61\056\uff61\063\uff61\070" +
    "\uff61\071\uff61\075\uff61\102\uff61\105\uff61\001\002\000\004" +
    "\011\ufeef\001\002\000\054\003\uff6a\011\uff6a\027\uff6a\030" +
    "\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\051\uff6a" +
    "\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\063\uff6a\070" +
    "\uff6a\071\uff6a\075\uff6a\102\uff6a\105\uff6a\001\002\000\054" +
    "\003\uff66\011\uff66\027\uff66\030\uff66\032\uff66\033\uff66\034" +
    "\uff66\035\uff66\036\uff66\051\uff66\052\uff66\053\uff66\054\uff66" +
    "\055\uff66\056\uff66\063\uff66\070\uff66\071\uff66\075\uff66\102" +
    "\uff66\105\uff66\001\002\000\054\003\uff63\011\uff63\027\uff63" +
    "\030\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036\uff63\051" +
    "\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\063\uff63" +
    "\070\uff63\071\uff63\075\uff63\102\uff63\105\uff63\001\002\000" +
    "\004\064\u016b\001\002\000\054\003\uff67\011\uff67\027\uff67" +
    "\030\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036\uff67\051" +
    "\uff67\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67\063\uff67" +
    "\070\uff67\071\uff67\075\uff67\102\uff67\105\uff67\001\002\000" +
    "\004\060\u0167\001\002\000\004\060\u014b\001\002\000\054" +
    "\003\104\011\101\027\124\030\076\032\072\033\105\034" +
    "\111\035\116\036\067\051\125\052\027\053\040\054\034" +
    "\055\047\056\037\063\uff7f\070\123\071\063\075\102\102" +
    "\100\105\071\001\002\000\004\063\u014a\001\002\000\054" +
    "\003\uff64\011\uff64\027\uff64\030\uff64\032\uff64\033\uff64\034" +
    "\uff64\035\uff64\036\uff64\051\uff64\052\uff64\053\uff64\054\uff64" +
    "\055\uff64\056\uff64\063\uff64\070\uff64\071\uff64\075\uff64\102" +
    "\uff64\105\uff64\001\002\000\004\060\u013d\001\002\000\054" +
    "\003\uff80\011\uff80\027\uff80\030\uff80\032\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\051\uff80\052\uff80\053\uff80\054\uff80" +
    "\055\uff80\056\uff80\063\uff80\070\uff80\071\uff80\075\uff80\102" +
    "\uff80\105\uff80\001\002\000\004\074\u0138\001\002\000\020" +
    "\011\ufee9\026\370\047\373\050\372\060\371\066\374\074" +
    "\375\001\002\000\032\004\127\005\132\006\137\007\135" +
    "\010\131\011\140\013\130\044\142\060\134\064\365\073" +
    "\133\102\141\001\002\000\054\003\uff65\011\uff65\027\uff65" +
    "\030\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65\051" +
    "\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056\uff65\063\uff65" +
    "\070\uff65\071\uff65\075\uff65\102\uff65\105\uff65\001\002\000" +
    "\056\003\uff5f\011\uff5f\027\uff5f\030\uff5f\032\uff5f\033\uff5f" +
    "\034\uff5f\035\uff5f\036\uff5f\051\uff5f\052\uff5f\053\uff5f\054" +
    "\uff5f\055\uff5f\056\uff5f\063\uff5f\064\364\070\uff5f\071\uff5f" +
    "\075\uff5f\102\uff5f\105\uff5f\001\002\000\004\064\363\001" +
    "\002\000\054\003\uff62\011\uff62\027\uff62\030\uff62\032\uff62" +
    "\033\uff62\034\uff62\035\uff62\036\uff62\051\uff62\052\uff62\053" +
    "\uff62\054\uff62\055\uff62\056\uff62\063\uff62\070\uff62\071\uff62" +
    "\075\uff62\102\uff62\105\uff62\001\002\000\054\003\uff21\011" +
    "\uff21\027\uff21\030\uff21\032\uff21\033\uff21\034\uff21\035\uff21" +
    "\036\uff21\051\uff21\052\uff21\053\uff21\054\uff21\055\uff21\056" +
    "\uff21\063\uff21\070\uff21\071\uff21\075\uff21\102\uff21\105\uff21" +
    "\001\002\000\004\011\330\001\002\000\030\004\127\005" +
    "\132\006\137\007\135\010\131\011\140\013\130\044\142" +
    "\060\134\073\133\102\141\001\002\000\054\003\uff68\011" +
    "\uff68\027\uff68\030\uff68\032\uff68\033\uff68\034\uff68\035\uff68" +
    "\036\uff68\051\uff68\052\uff68\053\uff68\054\uff68\055\uff68\056" +
    "\uff68\063\uff68\070\uff68\071\uff68\075\uff68\102\uff68\105\uff68" +
    "\001\002\000\054\003\uff6b\011\uff6b\027\uff6b\030\uff6b\032" +
    "\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\051\uff6b\052\uff6b" +
    "\053\uff6b\054\uff6b\055\uff6b\056\uff6b\063\uff6b\070\uff6b\071" +
    "\uff6b\075\uff6b\102\uff6b\105\uff6b\001\002\000\004\011\267" +
    "\001\002\000\054\003\uff69\011\uff69\027\uff69\030\uff69\032" +
    "\uff69\033\uff69\034\uff69\035\uff69\036\uff69\051\uff69\052\uff69" +
    "\053\uff69\054\uff69\055\uff69\056\uff69\063\uff69\070\uff69\071" +
    "\uff69\075\uff69\102\uff69\105\uff69\001\002\000\004\060\261" +
    "\001\002\000\054\003\uff6c\011\uff6c\027\uff6c\030\uff6c\032" +
    "\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\051\uff6c\052\uff6c" +
    "\053\uff6c\054\uff6c\055\uff6c\056\uff6c\063\uff6c\070\uff6c\071" +
    "\uff6c\075\uff6c\102\uff6c\105\uff6c\001\002\000\054\003\uff22" +
    "\011\uff22\027\uff22\030\uff22\032\uff22\033\uff22\034\uff22\035" +
    "\uff22\036\uff22\051\uff22\052\uff22\053\uff22\054\uff22\055\uff22" +
    "\056\uff22\063\uff22\070\uff22\071\uff22\075\uff22\102\uff22\105" +
    "\uff22\001\002\000\054\003\uff6e\011\uff6e\027\uff6e\030\uff6e" +
    "\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\051\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\063\uff6e\070\uff6e" +
    "\071\uff6e\075\uff6e\102\uff6e\105\uff6e\001\002\000\054\003" +
    "\uff6d\011\uff6d\027\uff6d\030\uff6d\032\uff6d\033\uff6d\034\uff6d" +
    "\035\uff6d\036\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\055" +
    "\uff6d\056\uff6d\063\uff6d\070\uff6d\071\uff6d\075\uff6d\102\uff6d" +
    "\105\uff6d\001\002\000\004\011\ufef0\001\002\000\004\062" +
    "\250\001\002\000\004\060\126\001\002\000\032\004\127" +
    "\005\132\006\137\007\135\010\131\011\140\013\130\044" +
    "\142\060\134\061\uff34\073\133\102\141\001\002\000\054" +
    "\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020" +
    "\uff4a\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\040\uff4a" +
    "\041\uff4a\042\uff4a\043\uff4a\061\uff4a\062\uff4a\064\uff4a\067" +
    "\uff4a\072\uff4a\001\002\000\030\004\127\005\132\006\137" +
    "\007\135\010\131\011\140\013\130\044\142\060\134\073" +
    "\133\102\141\001\002\000\054\012\uff4b\013\uff4b\014\uff4b" +
    "\015\uff4b\016\uff4b\017\uff4b\020\uff4b\021\uff4b\022\uff4b\023" +
    "\uff4b\024\uff4b\025\uff4b\040\uff4b\041\uff4b\042\uff4b\043\uff4b" +
    "\061\uff4b\062\uff4b\064\uff4b\067\uff4b\072\uff4b\001\002\000" +
    "\054\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48\017\uff48" +
    "\020\uff48\021\uff48\022\uff48\023\uff48\024\uff48\025\uff48\040" +
    "\uff48\041\uff48\042\uff48\043\uff48\061\uff48\062\uff48\064\uff48" +
    "\067\uff48\072\uff48\001\002\000\004\011\242\001\002\000" +
    "\030\004\127\005\132\006\137\007\135\010\131\011\140" +
    "\013\130\044\142\060\134\073\133\102\141\001\002\000" +
    "\054\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c" +
    "\020\uff4c\021\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c\040" +
    "\uff4c\041\uff4c\042\uff4c\043\uff4c\061\uff4c\062\uff4c\064\uff4c" +
    "\067\uff4c\072\uff4c\001\002\000\006\061\uff35\072\236\001" +
    "\002\000\054\012\uff49\013\uff49\014\uff49\015\uff49\016\uff49" +
    "\017\uff49\020\uff49\021\uff49\022\uff49\023\uff49\024\uff49\025" +
    "\uff49\040\uff49\041\uff49\042\uff49\043\uff49\061\uff49\062\uff49" +
    "\064\uff49\067\uff49\072\uff49\001\002\000\062\012\uff47\013" +
    "\uff47\014\uff47\015\uff47\016\uff47\017\uff47\020\uff47\021\uff47" +
    "\022\uff47\023\uff47\024\uff47\025\uff47\040\uff47\041\uff47\042" +
    "\uff47\043\uff47\060\211\061\uff47\062\uff47\064\uff47\066\212" +
    "\067\uff47\072\uff47\074\213\001\002\000\004\074\207\001" +
    "\002\000\030\004\127\005\132\006\137\007\135\010\131" +
    "\011\140\013\130\044\142\060\134\073\133\102\141\001" +
    "\002\000\054\012\uff43\013\uff43\014\uff43\015\uff43\016\uff43" +
    "\017\uff43\020\uff43\021\uff43\022\uff43\023\uff43\024\uff43\025" +
    "\uff43\040\uff43\041\uff43\042\uff43\043\uff43\061\uff43\062\uff43" +
    "\064\uff43\067\uff43\072\uff43\001\002\000\044\012\156\013" +
    "\150\014\163\015\160\016\157\017\153\020\154\021\161" +
    "\022\162\023\164\024\165\025\155\041\166\042\151\043" +
    "\152\061\uff24\072\uff24\001\002\000\004\061\146\001\002" +
    "\000\004\064\147\001\002\000\054\003\uff0f\011\uff0f\027" +
    "\uff0f\030\uff0f\032\uff0f\033\uff0f\034\uff0f\035\uff0f\036\uff0f" +
    "\051\uff0f\052\uff0f\053\uff0f\054\uff0f\055\uff0f\056\uff0f\063" +
    "\uff0f\070\uff0f\071\uff0f\075\uff0f\102\uff0f\105\uff0f\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\030\004\127\005\132\006\137\007\135\010\131\011" +
    "\140\013\130\044\142\060\134\073\133\102\141\001\002" +
    "\000\054\012\156\013\150\014\163\015\160\016\157\017" +
    "\153\020\154\021\161\022\162\023\164\024\165\025\155" +
    "\040\uff4f\041\uff4f\042\151\043\152\061\uff4f\062\uff4f\064" +
    "\uff4f\067\uff4f\072\uff4f\001\002\000\054\012\156\013\150" +
    "\014\163\015\160\016\157\017\153\020\uff56\021\uff56\022" +
    "\uff56\023\uff56\024\uff56\025\uff56\040\uff56\041\uff56\042\uff56" +
    "\043\uff56\061\uff56\062\uff56\064\uff56\067\uff56\072\uff56\001" +
    "\002\000\054\012\156\013\150\014\163\015\160\016\157" +
    "\017\153\020\uff53\021\uff53\022\uff53\023\uff53\024\uff53\025" +
    "\uff53\040\uff53\041\uff53\042\uff53\043\uff53\061\uff53\062\uff53" +
    "\064\uff53\067\uff53\072\uff53\001\002\000\054\012\uff59\013" +
    "\uff59\014\uff59\015\uff59\016\157\017\uff59\020\uff59\021\uff59" +
    "\022\uff59\023\uff59\024\uff59\025\uff59\040\uff59\041\uff59\042" +
    "\uff59\043\uff59\061\uff59\062\uff59\064\uff59\067\uff59\072\uff59" +
    "\001\002\000\054\012\156\013\150\014\163\015\160\016" +
    "\157\017\153\020\uff51\021\uff51\022\uff51\023\uff51\024\uff51" +
    "\025\uff51\040\uff51\041\uff51\042\uff51\043\uff51\061\uff51\062" +
    "\uff51\064\uff51\067\uff51\072\uff51\001\002\000\054\012\156" +
    "\013\150\014\163\015\160\016\157\017\153\020\uff54\021" +
    "\uff54\022\uff54\023\uff54\024\uff54\025\uff54\040\uff54\041\uff54" +
    "\042\uff54\043\uff54\061\uff54\062\uff54\064\uff54\067\uff54\072" +
    "\uff54\001\002\000\054\012\uff5a\013\uff5a\014\uff5a\015\uff5a" +
    "\016\157\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024" +
    "\uff5a\025\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\061\uff5a" +
    "\062\uff5a\064\uff5a\067\uff5a\072\uff5a\001\002\000\052\012" +
    "\uff57\013\uff57\014\uff57\015\uff57\017\uff57\020\uff57\021\uff57" +
    "\022\uff57\023\uff57\024\uff57\025\uff57\040\uff57\041\uff57\042" +
    "\uff57\043\uff57\061\uff57\062\uff57\064\uff57\067\uff57\072\uff57" +
    "\001\002\000\054\012\uff5c\013\uff5c\014\163\015\160\016" +
    "\157\017\153\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c" +
    "\025\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\061\uff5c\062" +
    "\uff5c\064\uff5c\067\uff5c\072\uff5c\001\002\000\054\012\156" +
    "\013\150\014\163\015\160\016\157\017\153\020\uff55\021" +
    "\uff55\022\uff55\023\uff55\024\uff55\025\uff55\040\uff55\041\uff55" +
    "\042\uff55\043\uff55\061\uff55\062\uff55\064\uff55\067\uff55\072" +
    "\uff55\001\002\000\054\012\156\013\150\014\163\015\160" +
    "\016\157\017\153\020\uff52\021\uff52\022\uff52\023\uff52\024" +
    "\uff52\025\uff52\040\uff52\041\uff52\042\uff52\043\uff52\061\uff52" +
    "\062\uff52\064\uff52\067\uff52\072\uff52\001\002\000\054\012" +
    "\uff58\013\uff58\014\uff58\015\uff58\016\157\017\uff58\020\uff58" +
    "\021\uff58\022\uff58\023\uff58\024\uff58\025\uff58\040\uff58\041" +
    "\uff58\042\uff58\043\uff58\061\uff58\062\uff58\064\uff58\067\uff58" +
    "\072\uff58\001\002\000\054\012\156\013\150\014\163\015" +
    "\160\016\157\017\153\020\154\021\161\022\162\023\164" +
    "\024\165\025\155\040\uff4e\041\uff4e\042\uff4e\043\uff4e\061" +
    "\uff4e\062\uff4e\064\uff4e\067\uff4e\072\uff4e\001\002\000\054" +
    "\012\156\013\150\014\163\015\160\016\157\017\153\020" +
    "\154\021\161\022\162\023\164\024\165\025\155\040\uff50" +
    "\041\uff50\042\uff50\043\152\061\uff50\062\uff50\064\uff50\067" +
    "\uff50\072\uff50\001\002\000\054\012\uff5b\013\uff5b\014\163" +
    "\015\160\016\157\017\153\020\uff5b\021\uff5b\022\uff5b\023" +
    "\uff5b\024\uff5b\025\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b" +
    "\061\uff5b\062\uff5b\064\uff5b\067\uff5b\072\uff5b\001\002\000" +
    "\054\012\156\013\150\014\163\015\160\016\157\017\153" +
    "\020\154\021\161\022\162\023\164\024\165\025\155\040" +
    "\uff5d\041\uff5d\042\uff5d\043\uff5d\061\uff5d\062\uff5d\064\uff5d" +
    "\067\uff5d\072\uff5d\001\002\000\004\011\210\001\002\000" +
    "\054\012\uff46\013\uff46\014\uff46\015\uff46\016\uff46\017\uff46" +
    "\020\uff46\021\uff46\022\uff46\023\uff46\024\uff46\025\uff46\040" +
    "\uff46\041\uff46\042\uff46\043\uff46\061\uff46\062\uff46\064\uff46" +
    "\067\uff46\072\uff46\001\002\000\032\004\127\005\132\006" +
    "\137\007\135\010\131\011\140\013\130\044\142\060\134" +
    "\061\uff34\073\133\102\141\001\002\000\030\004\127\005" +
    "\132\006\137\007\135\010\131\011\140\013\130\044\142" +
    "\060\134\073\133\102\141\001\002\000\056\011\214\012" +
    "\uff30\013\uff30\014\uff30\015\uff30\016\uff30\017\uff30\020\uff30" +
    "\021\uff30\022\uff30\023\uff30\024\uff30\025\uff30\040\uff30\041" +
    "\uff30\042\uff30\043\uff30\061\uff30\062\uff30\064\uff30\067\uff30" +
    "\072\uff30\001\002\000\060\012\uff2c\013\uff2c\014\uff2c\015" +
    "\uff2c\016\uff2c\017\uff2c\020\uff2c\021\uff2c\022\uff2c\023\uff2c" +
    "\024\uff2c\025\uff2c\040\uff2c\041\uff2c\042\uff2c\043\uff2c\060" +
    "\216\061\uff2c\062\uff2c\064\uff2c\067\uff2c\072\uff2c\074\217" +
    "\001\002\000\054\012\uff33\013\uff33\014\uff33\015\uff33\016" +
    "\uff33\017\uff33\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33" +
    "\025\uff33\040\uff33\041\uff33\042\uff33\043\uff33\061\uff33\062" +
    "\uff33\064\uff33\067\uff33\072\uff33\001\002\000\032\004\127" +
    "\005\132\006\137\007\135\010\131\011\140\013\130\044" +
    "\142\060\134\061\uff34\073\133\102\141\001\002\000\056" +
    "\011\214\012\uff30\013\uff30\014\uff30\015\uff30\016\uff30\017" +
    "\uff30\020\uff30\021\uff30\022\uff30\023\uff30\024\uff30\025\uff30" +
    "\040\uff30\041\uff30\042\uff30\043\uff30\061\uff30\062\uff30\064" +
    "\uff30\067\uff30\072\uff30\001\002\000\054\012\uff2d\013\uff2d" +
    "\014\uff2d\015\uff2d\016\uff2d\017\uff2d\020\uff2d\021\uff2d\022" +
    "\uff2d\023\uff2d\024\uff2d\025\uff2d\040\uff2d\041\uff2d\042\uff2d" +
    "\043\uff2d\061\uff2d\062\uff2d\064\uff2d\067\uff2d\072\uff2d\001" +
    "\002\000\004\061\222\001\002\000\056\012\uff2e\013\uff2e" +
    "\014\uff2e\015\uff2e\016\uff2e\017\uff2e\020\uff2e\021\uff2e\022" +
    "\uff2e\023\uff2e\024\uff2e\025\uff2e\040\uff2e\041\uff2e\042\uff2e" +
    "\043\uff2e\061\uff2e\062\uff2e\064\uff2e\067\uff2e\072\uff2e\074" +
    "\223\001\002\000\056\011\214\012\uff30\013\uff30\014\uff30" +
    "\015\uff30\016\uff30\017\uff30\020\uff30\021\uff30\022\uff30\023" +
    "\uff30\024\uff30\025\uff30\040\uff30\041\uff30\042\uff30\043\uff30" +
    "\061\uff30\062\uff30\064\uff30\067\uff30\072\uff30\001\002\000" +
    "\054\012\uff2f\013\uff2f\014\uff2f\015\uff2f\016\uff2f\017\uff2f" +
    "\020\uff2f\021\uff2f\022\uff2f\023\uff2f\024\uff2f\025\uff2f\040" +
    "\uff2f\041\uff2f\042\uff2f\043\uff2f\061\uff2f\062\uff2f\064\uff2f" +
    "\067\uff2f\072\uff2f\001\002\000\042\012\156\013\150\014" +
    "\163\015\160\016\157\017\153\020\154\021\161\022\162" +
    "\023\164\024\165\025\155\041\166\042\151\043\152\067" +
    "\226\001\002\000\056\012\uff45\013\uff45\014\uff45\015\uff45" +
    "\016\uff45\017\uff45\020\uff45\021\uff45\022\uff45\023\uff45\024" +
    "\uff45\025\uff45\040\uff45\041\uff45\042\uff45\043\uff45\061\uff45" +
    "\062\uff45\064\uff45\066\227\067\uff45\072\uff45\001\002\000" +
    "\030\004\127\005\132\006\137\007\135\010\131\011\140" +
    "\013\130\044\142\060\134\073\133\102\141\001\002\000" +
    "\042\012\156\013\150\014\163\015\160\016\157\017\153" +
    "\020\154\021\161\022\162\023\164\024\165\025\155\041" +
    "\166\042\151\043\152\067\231\001\002\000\054\012\uff44" +
    "\013\uff44\014\uff44\015\uff44\016\uff44\017\uff44\020\uff44\021" +
    "\uff44\022\uff44\023\uff44\024\uff44\025\uff44\040\uff44\041\uff44" +
    "\042\uff44\043\uff44\061\uff44\062\uff44\064\uff44\067\uff44\072" +
    "\uff44\001\002\000\004\061\233\001\002\000\056\012\uff31" +
    "\013\uff31\014\uff31\015\uff31\016\uff31\017\uff31\020\uff31\021" +
    "\uff31\022\uff31\023\uff31\024\uff31\025\uff31\040\uff31\041\uff31" +
    "\042\uff31\043\uff31\061\uff31\062\uff31\064\uff31\067\uff31\072" +
    "\uff31\074\234\001\002\000\056\011\214\012\uff30\013\uff30" +
    "\014\uff30\015\uff30\016\uff30\017\uff30\020\uff30\021\uff30\022" +
    "\uff30\023\uff30\024\uff30\025\uff30\040\uff30\041\uff30\042\uff30" +
    "\043\uff30\061\uff30\062\uff30\064\uff30\067\uff30\072\uff30\001" +
    "\002\000\054\012\uff32\013\uff32\014\uff32\015\uff32\016\uff32" +
    "\017\uff32\020\uff32\021\uff32\022\uff32\023\uff32\024\uff32\025" +
    "\uff32\040\uff32\041\uff32\042\uff32\043\uff32\061\uff32\062\uff32" +
    "\064\uff32\067\uff32\072\uff32\001\002\000\030\004\127\005" +
    "\132\006\137\007\135\010\131\011\140\013\130\044\142" +
    "\060\134\073\133\102\141\001\002\000\044\012\156\013" +
    "\150\014\163\015\160\016\157\017\153\020\154\021\161" +
    "\022\162\023\164\024\165\025\155\041\166\042\151\043" +
    "\152\061\uff25\072\uff25\001\002\000\042\012\156\013\150" +
    "\014\163\015\160\016\157\017\153\020\154\021\161\022" +
    "\162\023\164\024\165\025\155\041\166\042\151\043\152" +
    "\061\241\001\002\000\054\012\uff4d\013\uff4d\014\uff4d\015" +
    "\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d" +
    "\024\uff4d\025\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d\061" +
    "\uff4d\062\uff4d\064\uff4d\067\uff4d\072\uff4d\001\002\000\004" +
    "\060\243\001\002\000\032\004\127\005\132\006\137\007" +
    "\135\010\131\011\140\013\130\044\142\060\134\061\245" +
    "\073\133\102\141\001\002\000\006\061\246\072\236\001" +
    "\002\000\054\012\uff41\013\uff41\014\uff41\015\uff41\016\uff41" +
    "\017\uff41\020\uff41\021\uff41\022\uff41\023\uff41\024\uff41\025" +
    "\uff41\040\uff41\041\uff41\042\uff41\043\uff41\061\uff41\062\uff41" +
    "\064\uff41\067\uff41\072\uff41\001\002\000\054\012\uff42\013" +
    "\uff42\014\uff42\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42" +
    "\022\uff42\023\uff42\024\uff42\025\uff42\040\uff42\041\uff42\042" +
    "\uff42\043\uff42\061\uff42\062\uff42\064\uff42\067\uff42\072\uff42" +
    "\001\002\000\054\012\uff5e\013\uff5e\014\uff5e\015\uff5e\016" +
    "\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e" +
    "\025\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\061\uff5e\062" +
    "\uff5e\064\uff5e\067\uff5e\072\uff5e\001\002\000\052\003\104" +
    "\011\101\027\124\030\076\032\072\033\105\034\111\035" +
    "\116\036\067\051\125\052\027\053\040\054\034\055\047" +
    "\056\037\070\123\071\063\075\102\102\100\105\071\001" +
    "\002\000\054\003\104\011\101\027\124\030\076\032\072" +
    "\033\105\034\111\035\116\036\067\051\125\052\027\053" +
    "\040\054\034\055\047\056\037\063\252\070\123\071\063" +
    "\075\102\102\100\105\071\001\002\000\004\035\254\001" +
    "\002\000\054\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\036\uff81\051\uff81\052\uff81\053" +
    "\uff81\054\uff81\055\uff81\056\uff81\063\uff81\070\uff81\071\uff81" +
    "\075\uff81\102\uff81\105\uff81\001\002\000\004\060\255\001" +
    "\002\000\030\004\127\005\132\006\137\007\135\010\131" +
    "\011\140\013\130\044\142\060\134\073\133\102\141\001" +
    "\002\000\042\012\156\013\150\014\163\015\160\016\157" +
    "\017\153\020\154\021\161\022\162\023\164\024\165\025" +
    "\155\041\166\042\151\043\152\061\257\001\002\000\004" +
    "\064\260\001\002\000\054\003\uff1b\011\uff1b\027\uff1b\030" +
    "\uff1b\032\uff1b\033\uff1b\034\uff1b\035\uff1b\036\uff1b\051\uff1b" +
    "\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056\uff1b\063\uff1b\070" +
    "\uff1b\071\uff1b\075\uff1b\102\uff1b\105\uff1b\001\002\000\030" +
    "\004\127\005\132\006\137\007\135\010\131\011\140\013" +
    "\130\044\142\060\134\073\133\102\141\001\002\000\042" +
    "\012\156\013\150\014\163\015\160\016\157\017\153\020" +
    "\154\021\161\022\162\023\164\024\165\025\155\041\166" +
    "\042\151\043\152\061\263\001\002\000\004\062\264\001" +
    "\002\000\052\003\104\011\101\027\124\030\076\032\072" +
    "\033\105\034\111\035\116\036\067\051\125\052\027\053" +
    "\040\054\034\055\047\056\037\070\123\071\063\075\102" +
    "\102\100\105\071\001\002\000\054\003\104\011\101\027" +
    "\124\030\076\032\072\033\105\034\111\035\116\036\067" +
    "\051\125\052\027\053\040\054\034\055\047\056\037\063" +
    "\266\070\123\071\063\075\102\102\100\105\071\001\002" +
    "\000\054\003\uff1c\011\uff1c\027\uff1c\030\uff1c\032\uff1c\033" +
    "\uff1c\034\uff1c\035\uff1c\036\uff1c\051\uff1c\052\uff1c\053\uff1c" +
    "\054\uff1c\055\uff1c\056\uff1c\063\uff1c\070\uff1c\071\uff1c\075" +
    "\uff1c\102\uff1c\105\uff1c\001\002\000\006\026\270\064\271" +
    "\001\002\000\036\004\127\005\132\006\137\007\135\010" +
    "\131\011\140\013\130\044\142\060\134\073\133\102\141" +
    "\106\273\107\274\110\272\001\002\000\076\003\uff0d\004" +
    "\uff0d\005\uff0d\006\uff0d\007\uff0d\010\uff0d\011\uff0d\013\uff0d" +
    "\027\uff0d\030\uff0d\032\uff0d\033\uff0d\034\uff0d\035\uff0d\036" +
    "\uff0d\044\uff0d\051\uff0d\052\uff0d\053\uff0d\054\uff0d\055\uff0d" +
    "\056\uff0d\060\uff0d\063\uff0d\070\uff0d\071\uff0d\073\uff0d\075" +
    "\uff0d\102\uff0d\105\uff0d\001\002\000\004\060\305\001\002" +
    "\000\004\060\302\001\002\000\004\060\277\001\002\000" +
    "\042\012\156\013\150\014\163\015\160\016\157\017\153" +
    "\020\154\021\161\022\162\023\164\024\165\025\155\041" +
    "\166\042\151\043\152\064\276\001\002\000\076\003\uff0c" +
    "\004\uff0c\005\uff0c\006\uff0c\007\uff0c\010\uff0c\011\uff0c\013" +
    "\uff0c\027\uff0c\030\uff0c\032\uff0c\033\uff0c\034\uff0c\035\uff0c" +
    "\036\uff0c\044\uff0c\051\uff0c\052\uff0c\053\uff0c\054\uff0c\055" +
    "\uff0c\056\uff0c\060\uff0c\063\uff0c\070\uff0c\071\uff0c\073\uff0c" +
    "\075\uff0c\102\uff0c\105\uff0c\001\002\000\004\061\300\001" +
    "\002\000\004\064\301\001\002\000\076\003\uff0b\004\uff0b" +
    "\005\uff0b\006\uff0b\007\uff0b\010\uff0b\011\uff0b\013\uff0b\027" +
    "\uff0b\030\uff0b\032\uff0b\033\uff0b\034\uff0b\035\uff0b\036\uff0b" +
    "\044\uff0b\051\uff0b\052\uff0b\053\uff0b\054\uff0b\055\uff0b\056" +
    "\uff0b\060\uff0b\063\uff0b\070\uff0b\071\uff0b\073\uff0b\075\uff0b" +
    "\102\uff0b\105\uff0b\001\002\000\004\061\303\001\002\000" +
    "\004\064\304\001\002\000\076\003\uff0a\004\uff0a\005\uff0a" +
    "\006\uff0a\007\uff0a\010\uff0a\011\uff0a\013\uff0a\027\uff0a\030" +
    "\uff0a\032\uff0a\033\uff0a\034\uff0a\035\uff0a\036\uff0a\044\uff0a" +
    "\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\056\uff0a\060" +
    "\uff0a\063\uff0a\070\uff0a\071\uff0a\073\uff0a\075\uff0a\102\uff0a" +
    "\105\uff0a\001\002\000\004\061\306\001\002\000\004\064" +
    "\307\001\002\000\076\003\uff09\004\uff09\005\uff09\006\uff09" +
    "\007\uff09\010\uff09\011\uff09\013\uff09\027\uff09\030\uff09\032" +
    "\uff09\033\uff09\034\uff09\035\uff09\036\uff09\044\uff09\051\uff09" +
    "\052\uff09\053\uff09\054\uff09\055\uff09\056\uff09\060\uff09\063" +
    "\uff09\070\uff09\071\uff09\073\uff09\075\uff09\102\uff09\105\uff09" +
    "\001\002\000\042\012\156\013\150\014\163\015\160\016" +
    "\157\017\153\020\154\021\161\022\162\023\164\024\165" +
    "\025\155\041\166\042\151\043\152\062\311\001\002\000" +
    "\032\004\127\005\132\006\137\007\135\010\131\011\140" +
    "\013\130\037\312\044\142\060\134\073\133\102\141\001" +
    "\002\000\004\040\324\001\002\000\034\004\127\005\132" +
    "\006\137\007\135\010\131\011\140\013\130\037\312\044" +
    "\142\060\134\063\322\073\133\102\141\001\002\000\034" +
    "\004\uff18\005\uff18\006\uff18\007\uff18\010\uff18\011\uff18\013" +
    "\uff18\037\uff18\044\uff18\060\uff18\063\uff18\073\uff18\102\uff18" +
    "\001\002\000\042\012\156\013\150\014\163\015\160\016" +
    "\157\017\153\020\154\021\161\022\162\023\164\024\165" +
    "\025\155\040\316\041\166\042\151\043\152\001\002\000" +
    "\004\062\317\001\002\000\052\003\104\011\101\027\124" +
    "\030\076\032\072\033\105\034\111\035\116\036\067\051" +
    "\125\052\027\053\040\054\034\055\047\056\037\070\123" +
    "\071\063\075\102\102\100\105\071\001\002\000\054\003" +
    "\104\011\101\027\124\030\076\032\072\033\105\034\111" +
    "\035\116\036\067\051\125\052\027\053\040\054\034\055" +
    "\047\056\037\063\321\070\123\071\063\075\102\102\100" +
    "\105\071\001\002\000\034\004\uff17\005\uff17\006\uff17\007" +
    "\uff17\010\uff17\011\uff17\013\uff17\037\uff17\044\uff17\060\uff17" +
    "\063\uff17\073\uff17\102\uff17\001\002\000\054\003\uff1a\011" +
    "\uff1a\027\uff1a\030\uff1a\032\uff1a\033\uff1a\034\uff1a\035\uff1a" +
    "\036\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056" +
    "\uff1a\063\uff1a\070\uff1a\071\uff1a\075\uff1a\102\uff1a\105\uff1a" +
    "\001\002\000\034\004\uff19\005\uff19\006\uff19\007\uff19\010" +
    "\uff19\011\uff19\013\uff19\037\uff19\044\uff19\060\uff19\063\uff19" +
    "\073\uff19\102\uff19\001\002\000\004\062\325\001\002\000" +
    "\052\003\104\011\101\027\124\030\076\032\072\033\105" +
    "\034\111\035\116\036\067\051\125\052\027\053\040\054" +
    "\034\055\047\056\037\070\123\071\063\075\102\102\100" +
    "\105\071\001\002\000\054\003\104\011\101\027\124\030" +
    "\076\032\072\033\105\034\111\035\116\036\067\051\125" +
    "\052\027\053\040\054\034\055\047\056\037\063\327\070" +
    "\123\071\063\075\102\102\100\105\071\001\002\000\034" +
    "\004\uff16\005\uff16\006\uff16\007\uff16\010\uff16\011\uff16\013" +
    "\uff16\037\uff16\044\uff16\060\uff16\063\uff16\073\uff16\102\uff16" +
    "\001\002\000\004\065\331\001\002\000\016\011\056\052" +
    "\027\053\040\054\034\055\047\056\037\001\002\000\004" +
    "\066\333\001\002\000\004\067\334\001\002\000\006\026" +
    "\335\066\336\001\002\000\004\066\357\001\002\000\004" +
    "\067\337\001\002\000\004\026\340\001\002\000\004\066" +
    "\341\001\002\000\004\066\343\001\002\000\006\067\351" +
    "\072\352\001\002\000\030\004\127\005\132\006\137\007" +
    "\135\010\131\011\140\013\130\044\142\060\134\073\133" +
    "\102\141\001\002\000\006\067\346\072\347\001\002\000" +
    "\044\012\156\013\150\014\163\015\160\016\157\017\153" +
    "\020\154\021\161\022\162\023\164\024\165\025\155\041" +
    "\166\042\151\043\152\067\uff00\072\uff00\001\002\000\006" +
    "\067\uff02\072\uff02\001\002\000\030\004\127\005\132\006" +
    "\137\007\135\010\131\011\140\013\130\044\142\060\134" +
    "\073\133\102\141\001\002\000\044\012\156\013\150\014" +
    "\163\015\160\016\157\017\153\020\154\021\161\022\162" +
    "\023\164\024\165\025\155\041\166\042\151\043\152\067" +
    "\ufeff\072\ufeff\001\002\000\004\064\356\001\002\000\004" +
    "\066\353\001\002\000\030\004\127\005\132\006\137\007" +
    "\135\010\131\011\140\013\130\044\142\060\134\073\133" +
    "\102\141\001\002\000\006\067\355\072\347\001\002\000" +
    "\006\067\uff01\072\uff01\001\002\000\054\003\uff03\011\uff03" +
    "\027\uff03\030\uff03\032\uff03\033\uff03\034\uff03\035\uff03\036" +
    "\uff03\051\uff03\052\uff03\053\uff03\054\uff03\055\uff03\056\uff03" +
    "\063\uff03\070\uff03\071\uff03\075\uff03\102\uff03\105\uff03\001" +
    "\002\000\030\004\127\005\132\006\137\007\135\010\131" +
    "\011\140\013\130\044\142\060\134\073\133\102\141\001" +
    "\002\000\006\067\361\072\347\001\002\000\004\064\362" +
    "\001\002\000\054\003\uff04\011\uff04\027\uff04\030\uff04\032" +
    "\uff04\033\uff04\034\uff04\035\uff04\036\uff04\051\uff04\052\uff04" +
    "\053\uff04\054\uff04\055\uff04\056\uff04\063\uff04\070\uff04\071" +
    "\uff04\075\uff04\102\uff04\105\uff04\001\002\000\054\003\ufee8" +
    "\011\ufee8\027\ufee8\030\ufee8\032\ufee8\033\ufee8\034\ufee8\035" +
    "\ufee8\036\ufee8\051\ufee8\052\ufee8\053\ufee8\054\ufee8\055\ufee8" +
    "\056\ufee8\063\ufee8\070\ufee8\071\ufee8\075\ufee8\102\ufee8\105" +
    "\ufee8\001\002\000\054\003\uff60\011\uff60\027\uff60\030\uff60" +
    "\032\uff60\033\uff60\034\uff60\035\uff60\036\uff60\051\uff60\052" +
    "\uff60\053\uff60\054\uff60\055\uff60\056\uff60\063\uff60\070\uff60" +
    "\071\uff60\075\uff60\102\uff60\105\uff60\001\002\000\054\003" +
    "\ufee6\011\ufee6\027\ufee6\030\ufee6\032\ufee6\033\ufee6\034\ufee6" +
    "\035\ufee6\036\ufee6\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055" +
    "\ufee6\056\ufee6\063\ufee6\070\ufee6\071\ufee6\075\ufee6\102\ufee6" +
    "\105\ufee6\001\002\000\042\012\156\013\150\014\163\015" +
    "\160\016\157\017\153\020\154\021\161\022\162\023\164" +
    "\024\165\025\155\041\166\042\151\043\152\064\367\001" +
    "\002\000\054\003\ufee5\011\ufee5\027\ufee5\030\ufee5\032\ufee5" +
    "\033\ufee5\034\ufee5\035\ufee5\036\ufee5\051\ufee5\052\ufee5\053" +
    "\ufee5\054\ufee5\055\ufee5\056\ufee5\063\ufee5\070\ufee5\071\ufee5" +
    "\075\ufee5\102\ufee5\105\ufee5\001\002\000\036\004\127\005" +
    "\132\006\137\007\135\010\131\011\140\013\130\044\142" +
    "\060\134\073\133\102\141\106\u012b\107\u012d\110\u012a\001" +
    "\002\000\032\004\127\005\132\006\137\007\135\010\131" +
    "\011\140\013\130\044\142\060\134\061\uff34\073\133\102" +
    "\141\001\002\000\004\064\u0122\001\002\000\004\064\u0121" +
    "\001\002\000\030\004\127\005\132\006\137\007\135\010" +
    "\131\011\140\013\130\044\142\060\134\073\133\102\141" +
    "\001\002\000\004\011\376\001\002\000\010\026\ufefc\060" +
    "\u0104\074\u0105\001\002\000\054\003\uff2b\011\uff2b\027\uff2b" +
    "\030\uff2b\032\uff2b\033\uff2b\034\uff2b\035\uff2b\036\uff2b\051" +
    "\uff2b\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056\uff2b\063\uff2b" +
    "\070\uff2b\071\uff2b\075\uff2b\102\uff2b\105\uff2b\001\002\000" +
    "\004\026\u0101\001\002\000\030\004\127\005\132\006\137" +
    "\007\135\010\131\011\140\013\130\044\142\060\134\073" +
    "\133\102\141\001\002\000\042\012\156\013\150\014\163" +
    "\015\160\016\157\017\153\020\154\021\161\022\162\023" +
    "\164\024\165\025\155\041\166\042\151\043\152\064\u0103" +
    "\001\002\000\076\003\ufef9\004\ufef9\005\ufef9\006\ufef9\007" +
    "\ufef9\010\ufef9\011\ufef9\013\ufef9\027\ufef9\030\ufef9\032\ufef9" +
    "\033\ufef9\034\ufef9\035\ufef9\036\ufef9\044\ufef9\051\ufef9\052" +
    "\ufef9\053\ufef9\054\ufef9\055\ufef9\056\ufef9\060\ufef9\063\ufef9" +
    "\070\ufef9\071\ufef9\073\ufef9\075\ufef9\102\ufef9\105\ufef9\001" +
    "\002\000\032\004\127\005\132\006\137\007\135\010\131" +
    "\011\140\013\130\044\142\060\134\061\uff34\073\133\102" +
    "\141\001\002\000\004\011\u0106\001\002\000\010\026\ufefc" +
    "\060\u0109\074\u010a\001\002\000\054\003\uff27\011\uff27\027" +
    "\uff27\030\uff27\032\uff27\033\uff27\034\uff27\035\uff27\036\uff27" +
    "\051\uff27\052\uff27\053\uff27\054\uff27\055\uff27\056\uff27\063" +
    "\uff27\070\uff27\071\uff27\075\uff27\102\uff27\105\uff27\001\002" +
    "\000\004\026\ufefd\001\002\000\032\004\127\005\132\006" +
    "\137\007\135\010\131\011\140\013\130\044\142\060\134" +
    "\061\uff34\073\133\102\141\001\002\000\004\011\376\001" +
    "\002\000\004\061\u010c\001\002\000\006\064\u010d\074\u010e" +
    "\001\002\000\054\003\uff29\011\uff29\027\uff29\030\uff29\032" +
    "\uff29\033\uff29\034\uff29\035\uff29\036\uff29\051\uff29\052\uff29" +
    "\053\uff29\054\uff29\055\uff29\056\uff29\063\uff29\070\uff29\071" +
    "\uff29\075\uff29\102\uff29\105\uff29\001\002\000\004\011\376" +
    "\001\002\000\054\003\uff2a\011\uff2a\027\uff2a\030\uff2a\032" +
    "\uff2a\033\uff2a\034\uff2a\035\uff2a\036\uff2a\051\uff2a\052\uff2a" +
    "\053\uff2a\054\uff2a\055\uff2a\056\uff2a\063\uff2a\070\uff2a\071" +
    "\uff2a\075\uff2a\102\uff2a\105\uff2a\001\002\000\004\026\ufefe" +
    "\001\002\000\004\061\u0112\001\002\000\006\064\u0113\074" +
    "\u0114\001\002\000\054\003\uff26\011\uff26\027\uff26\030\uff26" +
    "\032\uff26\033\uff26\034\uff26\035\uff26\036\uff26\051\uff26\052" +
    "\uff26\053\uff26\054\uff26\055\uff26\056\uff26\063\uff26\070\uff26" +
    "\071\uff26\075\uff26\102\uff26\105\uff26\001\002\000\004\011" +
    "\u0106\001\002\000\054\003\uff28\011\uff28\027\uff28\030\uff28" +
    "\032\uff28\033\uff28\034\uff28\035\uff28\036\uff28\051\uff28\052" +
    "\uff28\053\uff28\054\uff28\055\uff28\056\uff28\063\uff28\070\uff28" +
    "\071\uff28\075\uff28\102\uff28\105\uff28\001\002\000\042\012" +
    "\156\013\150\014\163\015\160\016\157\017\153\020\154" +
    "\021\161\022\162\023\164\024\165\025\155\041\166\042" +
    "\151\043\152\067\u0117\001\002\000\006\026\u0118\066\u0119" +
    "\001\002\000\030\004\127\005\132\006\137\007\135\010" +
    "\131\011\140\013\130\044\142\060\134\073\133\102\141" +
    "\001\002\000\030\004\127\005\132\006\137\007\135\010" +
    "\131\011\140\013\130\044\142\060\134\073\133\102\141" +
    "\001\002\000\042\012\156\013\150\014\163\015\160\016" +
    "\157\017\153\020\154\021\161\022\162\023\164\024\165" +
    "\025\155\041\166\042\151\043\152\067\u011b\001\002\000" +
    "\004\026\u011c\001\002\000\030\004\127\005\132\006\137" +
    "\007\135\010\131\011\140\013\130\044\142\060\134\073" +
    "\133\102\141\001\002\000\042\012\156\013\150\014\163" +
    "\015\160\016\157\017\153\020\154\021\161\022\162\023" +
    "\164\024\165\025\155\041\166\042\151\043\152\064\u011e" +
    "\001\002\000\076\003\ufef6\004\ufef6\005\ufef6\006\ufef6\007" +
    "\ufef6\010\ufef6\011\ufef6\013\ufef6\027\ufef6\030\ufef6\032\ufef6" +
    "\033\ufef6\034\ufef6\035\ufef6\036\ufef6\044\ufef6\051\ufef6\052" +
    "\ufef6\053\ufef6\054\ufef6\055\ufef6\056\ufef6\060\ufef6\063\ufef6" +
    "\070\ufef6\071\ufef6\073\ufef6\075\ufef6\102\ufef6\105\ufef6\001" +
    "\002\000\042\012\156\013\150\014\163\015\160\016\157" +
    "\017\153\020\154\021\161\022\162\023\164\024\165\025" +
    "\155\041\166\042\151\043\152\064\u0120\001\002\000\076" +
    "\003\ufef7\004\ufef7\005\ufef7\006\ufef7\007\ufef7\010\ufef7\011" +
    "\ufef7\013\ufef7\027\ufef7\030\ufef7\032\ufef7\033\ufef7\034\ufef7" +
    "\035\ufef7\036\ufef7\044\ufef7\051\ufef7\052\ufef7\053\ufef7\054" +
    "\ufef7\055\ufef7\056\ufef7\060\ufef7\063\ufef7\070\ufef7\071\ufef7" +
    "\073\ufef7\075\ufef7\102\ufef7\105\ufef7\001\002\000\054\003" +
    "\ufef2\011\ufef2\027\ufef2\030\ufef2\032\ufef2\033\ufef2\034\ufef2" +
    "\035\ufef2\036\ufef2\051\ufef2\052\ufef2\053\ufef2\054\ufef2\055" +
    "\ufef2\056\ufef2\063\ufef2\070\ufef2\071\ufef2\075\ufef2\102\ufef2" +
    "\105\ufef2\001\002\000\054\003\ufef1\011\ufef1\027\ufef1\030" +
    "\ufef1\032\ufef1\033\ufef1\034\ufef1\035\ufef1\036\ufef1\051\ufef1" +
    "\052\ufef1\053\ufef1\054\ufef1\055\ufef1\056\ufef1\063\ufef1\070" +
    "\ufef1\071\ufef1\075\ufef1\102\ufef1\105\ufef1\001\002\000\004" +
    "\061\u0124\001\002\000\006\064\u010d\074\u0125\001\002\000" +
    "\004\011\376\001\002\000\004\026\u0127\001\002\000\030" +
    "\004\127\005\132\006\137\007\135\010\131\011\140\013" +
    "\130\044\142\060\134\073\133\102\141\001\002\000\042" +
    "\012\156\013\150\014\163\015\160\016\157\017\153\020" +
    "\154\021\161\022\162\023\164\024\165\025\155\041\166" +
    "\042\151\043\152\064\u0129\001\002\000\076\003\ufef8\004" +
    "\ufef8\005\ufef8\006\ufef8\007\ufef8\010\ufef8\011\ufef8\013\ufef8" +
    "\027\ufef8\030\ufef8\032\ufef8\033\ufef8\034\ufef8\035\ufef8\036" +
    "\ufef8\044\ufef8\051\ufef8\052\ufef8\053\ufef8\054\ufef8\055\ufef8" +
    "\056\ufef8\060\ufef8\063\ufef8\070\ufef8\071\ufef8\073\ufef8\075" +
    "\ufef8\102\ufef8\105\ufef8\001\002\000\004\060\u0135\001\002" +
    "\000\004\060\u0132\001\002\000\042\012\156\013\150\014" +
    "\163\015\160\016\157\017\153\020\154\021\161\022\162" +
    "\023\164\024\165\025\155\041\166\042\151\043\152\064" +
    "\u0131\001\002\000\004\060\u012e\001\002\000\004\061\u012f" +
    "\001\002\000\004\064\u0130\001\002\000\076\003\ufef5\004" +
    "\ufef5\005\ufef5\006\ufef5\007\ufef5\010\ufef5\011\ufef5\013\ufef5" +
    "\027\ufef5\030\ufef5\032\ufef5\033\ufef5\034\ufef5\035\ufef5\036" +
    "\ufef5\044\ufef5\051\ufef5\052\ufef5\053\ufef5\054\ufef5\055\ufef5" +
    "\056\ufef5\060\ufef5\063\ufef5\070\ufef5\071\ufef5\073\ufef5\075" +
    "\ufef5\102\ufef5\105\ufef5\001\002\000\076\003\ufefa\004\ufefa" +
    "\005\ufefa\006\ufefa\007\ufefa\010\ufefa\011\ufefa\013\ufefa\027" +
    "\ufefa\030\ufefa\032\ufefa\033\ufefa\034\ufefa\035\ufefa\036\ufefa" +
    "\044\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa\055\ufefa\056" +
    "\ufefa\060\ufefa\063\ufefa\070\ufefa\071\ufefa\073\ufefa\075\ufefa" +
    "\102\ufefa\105\ufefa\001\002\000\004\061\u0133\001\002\000" +
    "\004\064\u0134\001\002\000\076\003\ufef4\004\ufef4\005\ufef4" +
    "\006\ufef4\007\ufef4\010\ufef4\011\ufef4\013\ufef4\027\ufef4\030" +
    "\ufef4\032\ufef4\033\ufef4\034\ufef4\035\ufef4\036\ufef4\044\ufef4" +
    "\051\ufef4\052\ufef4\053\ufef4\054\ufef4\055\ufef4\056\ufef4\060" +
    "\ufef4\063\ufef4\070\ufef4\071\ufef4\073\ufef4\075\ufef4\102\ufef4" +
    "\105\ufef4\001\002\000\004\061\u0136\001\002\000\004\064" +
    "\u0137\001\002\000\076\003\ufef3\004\ufef3\005\ufef3\006\ufef3" +
    "\007\ufef3\010\ufef3\011\ufef3\013\ufef3\027\ufef3\030\ufef3\032" +
    "\ufef3\033\ufef3\034\ufef3\035\ufef3\036\ufef3\044\ufef3\051\ufef3" +
    "\052\ufef3\053\ufef3\054\ufef3\055\ufef3\056\ufef3\060\ufef3\063" +
    "\ufef3\070\ufef3\071\ufef3\073\ufef3\075\ufef3\102\ufef3\105\ufef3" +
    "\001\002\000\004\011\u0139\001\002\000\004\026\u013a\001" +
    "\002\000\030\004\127\005\132\006\137\007\135\010\131" +
    "\011\140\013\130\044\142\060\134\073\133\102\141\001" +
    "\002\000\042\012\156\013\150\014\163\015\160\016\157" +
    "\017\153\020\154\021\161\022\162\023\164\024\165\025" +
    "\155\041\166\042\151\043\152\064\u013c\001\002\000\076" +
    "\003\ufefb\004\ufefb\005\ufefb\006\ufefb\007\ufefb\010\ufefb\011" +
    "\ufefb\013\ufefb\027\ufefb\030\ufefb\032\ufefb\033\ufefb\034\ufefb" +
    "\035\ufefb\036\ufefb\044\ufefb\051\ufefb\052\ufefb\053\ufefb\054" +
    "\ufefb\055\ufefb\056\ufefb\060\ufefb\063\ufefb\070\ufefb\071\ufefb" +
    "\073\ufefb\075\ufefb\102\ufefb\105\ufefb\001\002\000\030\004" +
    "\127\005\132\006\137\007\135\010\131\011\140\013\130" +
    "\044\142\060\134\073\133\102\141\001\002\000\042\012" +
    "\156\013\150\014\163\015\160\016\157\017\153\020\154" +
    "\021\161\022\162\023\164\024\165\025\155\041\166\042" +
    "\151\043\152\061\u013f\001\002\000\004\062\u0140\001\002" +
    "\000\052\003\104\011\101\027\124\030\076\032\072\033" +
    "\105\034\111\035\116\036\067\051\125\052\027\053\040" +
    "\054\034\055\047\056\037\070\123\071\063\075\102\102" +
    "\100\105\071\001\002\000\054\003\104\011\101\027\124" +
    "\030\076\032\072\033\105\034\111\035\116\036\067\051" +
    "\125\052\027\053\040\054\034\055\047\056\037\063\u0142" +
    "\070\123\071\063\075\102\102\100\105\071\001\002\000" +
    "\056\003\uff11\011\uff11\027\uff11\030\uff11\031\u0144\032\uff11" +
    "\033\uff11\034\uff11\035\uff11\036\uff11\051\uff11\052\uff11\053" +
    "\uff11\054\uff11\055\uff11\056\uff11\063\uff11\070\uff11\071\uff11" +
    "\075\uff11\102\uff11\105\uff11\001\002\000\054\003\uff10\011" +
    "\uff10\027\uff10\030\uff10\032\uff10\033\uff10\034\uff10\035\uff10" +
    "\036\uff10\051\uff10\052\uff10\053\uff10\054\uff10\055\uff10\056" +
    "\uff10\063\uff10\070\uff10\071\uff10\075\uff10\102\uff10\105\uff10" +
    "\001\002\000\006\030\076\062\u0145\001\002\000\052\003" +
    "\104\011\101\027\124\030\076\032\072\033\105\034\111" +
    "\035\116\036\067\051\125\052\027\053\040\054\034\055" +
    "\047\056\037\070\123\071\063\075\102\102\100\105\071" +
    "\001\002\000\054\003\uff23\011\uff23\027\uff23\030\uff23\032" +
    "\uff23\033\uff23\034\uff23\035\uff23\036\uff23\051\uff23\052\uff23" +
    "\053\uff23\054\uff23\055\uff23\056\uff23\063\uff23\070\uff23\071" +
    "\uff23\075\uff23\102\uff23\105\uff23\001\002\000\054\003\104" +
    "\011\101\027\124\030\076\032\072\033\105\034\111\035" +
    "\116\036\067\051\125\052\027\053\040\054\034\055\047" +
    "\056\037\063\uff13\070\123\071\063\075\102\102\100\105" +
    "\071\001\002\000\004\063\u0149\001\002\000\054\003\uff12" +
    "\011\uff12\027\uff12\030\uff12\032\uff12\033\uff12\034\uff12\035" +
    "\uff12\036\uff12\051\uff12\052\uff12\053\uff12\054\uff12\055\uff12" +
    "\056\uff12\063\uff12\070\uff12\071\uff12\075\uff12\102\uff12\105" +
    "\uff12\001\002\000\030\011\uff39\052\uff39\053\uff39\054\uff39" +
    "\055\uff39\056\uff39\057\uff39\063\uff39\076\uff39\077\uff39\100" +
    "\uff39\001\002\000\020\011\u014f\052\027\053\040\054\034" +
    "\055\047\056\037\102\100\001\002\000\030\004\uff14\005" +
    "\uff14\006\uff14\007\uff14\010\uff14\011\uff14\013\uff14\044\uff14" +
    "\060\uff14\073\uff14\102\uff14\001\002\000\030\004\127\005" +
    "\132\006\137\007\135\010\131\011\140\013\130\044\142" +
    "\060\134\073\133\102\141\001\002\000\030\004\uff15\005" +
    "\uff15\006\uff15\007\uff15\010\uff15\011\uff15\013\uff15\044\uff15" +
    "\060\uff15\073\uff15\102\uff15\001\002\000\014\011\ufee9\026" +
    "\370\060\u0150\066\374\074\u0151\001\002\000\032\004\127" +
    "\005\132\006\137\007\135\010\131\011\140\013\130\044" +
    "\142\060\134\061\uff34\073\133\102\141\001\002\000\004" +
    "\011\u0152\001\002\000\010\026\ufefc\060\u0153\074\u0154\001" +
    "\002\000\032\004\127\005\132\006\137\007\135\010\131" +
    "\011\140\013\130\044\142\060\134\061\uff34\073\133\102" +
    "\141\001\002\000\004\011\u0152\001\002\000\004\061\u0156" +
    "\001\002\000\004\074\u0157\001\002\000\004\011\u0152\001" +
    "\002\000\004\061\u0159\001\002\000\004\074\u015a\001\002" +
    "\000\004\011\u0152\001\002\000\042\012\156\013\150\014" +
    "\163\015\160\016\157\017\153\020\154\021\161\022\162" +
    "\023\164\024\165\025\155\041\166\042\151\043\152\064" +
    "\u015c\001\002\000\004\011\u015d\001\002\000\010\026\u0163" +
    "\047\u0165\050\u0164\001\002\000\004\061\u015f\001\002\000" +
    "\004\062\u0160\001\002\000\052\003\104\011\101\027\124" +
    "\030\076\032\072\033\105\034\111\035\116\036\067\051" +
    "\125\052\027\053\040\054\034\055\047\056\037\070\123" +
    "\071\063\075\102\102\100\105\071\001\002\000\054\003" +
    "\104\011\101\027\124\030\076\032\072\033\105\034\111" +
    "\035\116\036\067\051\125\052\027\053\040\054\034\055" +
    "\047\056\037\063\u0162\070\123\071\063\075\102\102\100" +
    "\105\071\001\002\000\054\003\uff20\011\uff20\027\uff20\030" +
    "\uff20\032\uff20\033\uff20\034\uff20\035\uff20\036\uff20\051\uff20" +
    "\052\uff20\053\uff20\054\uff20\055\uff20\056\uff20\063\uff20\070" +
    "\uff20\071\uff20\075\uff20\102\uff20\105\uff20\001\002\000\030" +
    "\004\127\005\132\006\137\007\135\010\131\011\140\013" +
    "\130\044\142\060\134\073\133\102\141\001\002\000\004" +
    "\061\uff1e\001\002\000\004\061\uff1f\001\002\000\042\012" +
    "\156\013\150\014\163\015\160\016\157\017\153\020\154" +
    "\021\161\022\162\023\164\024\165\025\155\041\166\042" +
    "\151\043\152\061\uff1d\001\002\000\032\004\127\005\132" +
    "\006\137\007\135\010\131\011\140\013\130\044\142\060" +
    "\134\061\uff34\073\133\102\141\001\002\000\004\061\u0169" +
    "\001\002\000\004\064\u016a\001\002\000\054\003\uff0e\011" +
    "\uff0e\027\uff0e\030\uff0e\032\uff0e\033\uff0e\034\uff0e\035\uff0e" +
    "\036\uff0e\051\uff0e\052\uff0e\053\uff0e\054\uff0e\055\uff0e\056" +
    "\uff0e\063\uff0e\070\uff0e\071\uff0e\075\uff0e\102\uff0e\105\uff0e" +
    "\001\002\000\054\003\ufee7\011\ufee7\027\ufee7\030\ufee7\032" +
    "\ufee7\033\ufee7\034\ufee7\035\ufee7\036\ufee7\051\ufee7\052\ufee7" +
    "\053\ufee7\054\ufee7\055\ufee7\056\ufee7\063\ufee7\070\ufee7\071" +
    "\ufee7\075\ufee7\102\ufee7\105\ufee7\001\002\000\016\011\056" +
    "\052\027\053\040\054\034\055\047\056\037\001\002\000" +
    "\004\062\u016e\001\002\000\054\003\104\011\101\027\124" +
    "\030\076\032\072\033\105\034\111\035\116\036\067\051" +
    "\125\052\027\053\040\054\034\055\047\056\037\063\uff7e" +
    "\070\123\071\063\075\102\102\100\105\071\001\002\000" +
    "\004\063\u0170\001\002\000\030\011\uff3a\052\uff3a\053\uff3a" +
    "\054\uff3a\055\uff3a\056\uff3a\057\uff3a\063\uff3a\076\uff3a\077" +
    "\uff3a\100\uff3a\001\002\000\004\011\u0172\001\002\000\006" +
    "\061\uff37\072\uff37\001\002\000\042\012\156\013\150\014" +
    "\163\015\160\016\157\017\153\020\154\021\161\022\162" +
    "\023\164\024\165\025\155\041\166\042\151\043\152\064" +
    "\u0174\001\002\000\030\011\uff05\052\uff05\053\uff05\054\uff05" +
    "\055\uff05\056\uff05\057\uff05\063\uff05\076\uff05\077\uff05\100" +
    "\uff05\001\002\000\006\011\ufee9\060\u0192\001\002\000\004" +
    "\011\u0183\001\002\000\004\011\u0178\001\002\000\004\060" +
    "\u0179\001\002\000\020\011\056\052\027\053\040\054\034" +
    "\055\047\056\037\061\u017b\001\002\000\006\061\u017f\072" +
    "\u016c\001\002\000\004\062\u017c\001\002\000\054\003\104" +
    "\011\101\027\124\030\076\032\072\033\105\034\111\035" +
    "\116\036\067\051\125\052\027\053\040\054\034\055\047" +
    "\056\037\063\uff7e\070\123\071\063\075\102\102\100\105" +
    "\071\001\002\000\004\063\u017e\001\002\000\030\011\uff3f" +
    "\052\uff3f\053\uff3f\054\uff3f\055\uff3f\056\uff3f\057\uff3f\063" +
    "\uff3f\076\uff3f\077\uff3f\100\uff3f\001\002\000\004\062\u0180" +
    "\001\002\000\054\003\104\011\101\027\124\030\076\032" +
    "\072\033\105\034\111\035\116\036\067\051\125\052\027" +
    "\053\040\054\034\055\047\056\037\063\uff7e\070\123\071" +
    "\063\075\102\102\100\105\071\001\002\000\004\063\u0182" +
    "\001\002\000\030\011\uff40\052\uff40\053\uff40\054\uff40\055" +
    "\uff40\056\uff40\057\uff40\063\uff40\076\uff40\077\uff40\100\uff40" +
    "\001\002\000\010\026\u0184\060\u0185\064\u0186\001\002\000" +
    "\030\004\127\005\132\006\137\007\135\010\131\011\140" +
    "\013\130\044\142\060\134\073\133\102\141\001\002\000" +
    "\020\011\056\052\027\053\040\054\034\055\047\056\037" +
    "\061\u0188\001\002\000\030\011\uff08\052\uff08\053\uff08\054" +
    "\uff08\055\uff08\056\uff08\057\uff08\063\uff08\076\uff08\077\uff08" +
    "\100\uff08\001\002\000\006\061\u018c\072\u016c\001\002\000" +
    "\004\062\u0189\001\002\000\054\003\104\011\101\027\124" +
    "\030\076\032\072\033\105\034\111\035\116\036\067\051" +
    "\125\052\027\053\040\054\034\055\047\056\037\063\uff7e" +
    "\070\123\071\063\075\102\102\100\105\071\001\002\000" +
    "\004\063\u018b\001\002\000\030\011\uff3d\052\uff3d\053\uff3d" +
    "\054\uff3d\055\uff3d\056\uff3d\057\uff3d\063\uff3d\076\uff3d\077" +
    "\uff3d\100\uff3d\001\002\000\004\062\u018d\001\002\000\054" +
    "\003\104\011\101\027\124\030\076\032\072\033\105\034" +
    "\111\035\116\036\067\051\125\052\027\053\040\054\034" +
    "\055\047\056\037\063\uff7e\070\123\071\063\075\102\102" +
    "\100\105\071\001\002\000\004\063\u018f\001\002\000\030" +
    "\011\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\057" +
    "\uff3e\063\uff3e\076\uff3e\077\uff3e\100\uff3e\001\002\000\042" +
    "\012\156\013\150\014\163\015\160\016\157\017\153\020" +
    "\154\021\161\022\162\023\164\024\165\025\155\041\166" +
    "\042\151\043\152\064\u0191\001\002\000\030\011\uff07\052" +
    "\uff07\053\uff07\054\uff07\055\uff07\056\uff07\057\uff07\063\uff07" +
    "\076\uff07\077\uff07\100\uff07\001\002\000\016\011\056\052" +
    "\027\053\040\054\034\055\047\056\037\001\002\000\006" +
    "\061\u0194\072\u016c\001\002\000\004\062\u0195\001\002\000" +
    "\054\003\104\011\101\027\124\030\076\032\072\033\105" +
    "\034\111\035\116\036\067\051\125\052\027\053\040\054" +
    "\034\055\047\056\037\063\uff7e\070\123\071\063\075\102" +
    "\102\100\105\071\001\002\000\004\063\u0197\001\002\000" +
    "\030\011\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c" +
    "\057\uff7c\063\uff7c\076\uff7c\077\uff7c\100\uff7c\001\002\000" +
    "\016\011\056\052\027\053\040\054\034\055\047\056\037" +
    "\001\002\000\006\061\u019a\072\u016c\001\002\000\004\062" +
    "\u019b\001\002\000\054\003\104\011\101\027\124\030\076" +
    "\032\072\033\105\034\111\035\116\036\067\051\125\052" +
    "\027\053\040\054\034\055\047\056\037\063\uff7e\070\123" +
    "\071\063\075\102\102\100\105\071\001\002\000\004\063" +
    "\u019d\001\002\000\030\011\uff7d\052\uff7d\053\uff7d\054\uff7d" +
    "\055\uff7d\056\uff7d\057\uff7d\063\uff7d\076\uff7d\077\uff7d\100" +
    "\uff7d\001\002\000\004\060\u019f\001\002\000\020\011\056" +
    "\052\027\053\040\054\034\055\047\056\037\061\u01a1\001" +
    "\002\000\006\061\u01a5\072\u016c\001\002\000\004\062\u01a2" +
    "\001\002\000\054\003\104\011\101\027\124\030\076\032" +
    "\072\033\105\034\111\035\116\036\067\051\125\052\027" +
    "\053\040\054\034\055\047\056\037\063\uff7e\070\123\071" +
    "\063\075\102\102\100\105\071\001\002\000\004\063\u01a4" +
    "\001\002\000\030\011\uff3b\052\uff3b\053\uff3b\054\uff3b\055" +
    "\uff3b\056\uff3b\057\uff3b\063\uff3b\076\uff3b\077\uff3b\100\uff3b" +
    "\001\002\000\004\062\u01a6\001\002\000\054\003\104\011" +
    "\101\027\124\030\076\032\072\033\105\034\111\035\116" +
    "\036\067\051\125\052\027\053\040\054\034\055\047\056" +
    "\037\063\uff7e\070\123\071\063\075\102\102\100\105\071" +
    "\001\002\000\004\063\u01a8\001\002\000\030\011\uff3c\052" +
    "\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c\063\uff3c" +
    "\076\uff3c\077\uff3c\100\uff3c\001\002\000\030\002\uff76\052" +
    "\uff76\053\uff76\055\uff76\056\uff76\057\uff76\071\uff76\100\uff76" +
    "\104\uff76\113\uff76\122\uff76\001\002\000\030\011\uff71\052" +
    "\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\063\uff71" +
    "\076\uff71\077\uff71\100\uff71\001\002\000\030\011\041\052" +
    "\027\053\040\054\034\055\047\056\037\057\035\063\u01ac" +
    "\076\036\077\042\100\031\001\002\000\030\002\uff78\052" +
    "\uff78\053\uff78\055\uff78\056\uff78\057\uff78\071\uff78\100\uff78" +
    "\104\uff78\113\uff78\122\uff78\001\002\000\020\052\u01b0\053" +
    "\u01b4\055\u01b8\056\u01b3\057\u01b2\071\u01b9\113\u01af\001\002" +
    "\000\020\052\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\071" +
    "\uffeb\113\uffeb\001\002\000\004\074\u02c5\001\002\000\004" +
    "\011\uffe6\001\002\000\020\052\uffec\053\uffec\055\uffec\056" +
    "\uffec\057\uffec\071\uffec\113\uffec\001\002\000\004\103\u0209" +
    "\001\002\000\004\011\uffe3\001\002\000\004\011\uffe4\001" +
    "\002\000\004\011\u0204\001\002\000\020\052\uffed\053\uffed" +
    "\055\uffed\056\uffed\057\uffed\071\uffed\113\uffed\001\002\000" +
    "\004\002\ufffa\001\002\000\004\011\uffe5\001\002\000\012" +
    "\052\u01b0\053\u01b4\055\u01b8\056\u01b3\001\002\000\004\011" +
    "\u01bb\001\002\000\004\026\u01bc\001\002\000\030\004\u01bd" +
    "\006\u01c3\007\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060" +
    "\u01c1\112\u01c9\113\u01bf\115\u01c4\001\002\000\050\012\uff89" +
    "\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021" +
    "\uff89\022\uff89\023\uff89\024\uff89\025\uff89\041\uff89\042\uff89" +
    "\061\uff89\064\uff89\065\uff89\067\uff89\072\uff89\001\002\000" +
    "\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011\u01c5\013\u01be" +
    "\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4\001\002\000" +
    "\004\074\u01fc\001\002\000\050\012\uff8a\013\uff8a\014\uff8a" +
    "\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\041\uff8a\042\uff8a\061\uff8a\064\uff8a" +
    "\065\uff8a\067\uff8a\072\uff8a\001\002\000\030\004\u01bd\006" +
    "\u01c3\007\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060\u01c1" +
    "\112\u01c9\113\u01bf\115\u01c4\001\002\000\050\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\041\uff8c\042\uff8c\061" +
    "\uff8c\064\uff8c\065\uff8c\067\uff8c\072\uff8c\001\002\000\050" +
    "\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\041\uff8b" +
    "\042\uff8b\061\uff8b\064\uff8b\065\uff8b\067\uff8b\072\uff8b\001" +
    "\002\000\004\060\u01f7\001\002\000\052\012\uff88\013\uff88" +
    "\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022" +
    "\uff88\023\uff88\024\uff88\025\uff88\041\uff88\042\uff88\061\uff88" +
    "\064\uff88\065\uff88\066\u01f1\067\uff88\072\uff88\001\002\000" +
    "\050\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84" +
    "\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\041" +
    "\uff84\042\uff84\061\uff84\064\uff84\065\uff84\067\uff84\072\uff84" +
    "\001\002\000\040\012\u01d5\013\u01d0\014\u01da\015\u01d7\016" +
    "\u01d6\017\u01d2\020\u01d3\021\u01d8\022\u01d9\023\u01db\024\u01dc" +
    "\025\u01d4\041\u01dd\042\u01d1\064\u01f0\001\002\000\030\004" +
    "\u01bd\006\u01c3\007\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8" +
    "\060\u01c1\112\u01c9\113\u01bf\115\u01c4\001\002\000\004\074" +
    "\u01ca\001\002\000\004\011\u01cb\001\002\000\004\060\u01cc" +
    "\001\002\000\032\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\061\uffa2\112\u01c9\113\u01bf" +
    "\115\u01c4\001\002\000\006\061\uffa3\072\u01ed\001\002\000" +
    "\004\061\u01ec\001\002\000\042\012\u01d5\013\u01d0\014\u01da" +
    "\015\u01d7\016\u01d6\017\u01d2\020\u01d3\021\u01d8\022\u01d9\023" +
    "\u01db\024\u01dc\025\u01d4\041\u01dd\042\u01d1\061\uffa4\072\uffa4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011" +
    "\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4" +
    "\001\002\000\050\012\u01d5\013\u01d0\014\u01da\015\u01d7\016" +
    "\u01d6\017\u01d2\020\u01d3\021\u01d8\022\u01d9\023\u01db\024\u01dc" +
    "\025\u01d4\041\uff8e\042\u01d1\061\uff8e\064\uff8e\065\uff8e\067" +
    "\uff8e\072\uff8e\001\002\000\050\012\u01d5\013\u01d0\014\u01da" +
    "\015\u01d7\016\u01d6\017\u01d2\020\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\041\uff95\042\uff95\061\uff95\064\uff95" +
    "\065\uff95\067\uff95\072\uff95\001\002\000\050\012\u01d5\013" +
    "\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2\020\uff92\021\uff92" +
    "\022\uff92\023\uff92\024\uff92\025\uff92\041\uff92\042\uff92\061" +
    "\uff92\064\uff92\065\uff92\067\uff92\072\uff92\001\002\000\050" +
    "\012\uff98\013\uff98\014\uff98\015\uff98\016\u01d6\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\041\uff98" +
    "\042\uff98\061\uff98\064\uff98\065\uff98\067\uff98\072\uff98\001" +
    "\002\000\050\012\u01d5\013\u01d0\014\u01da\015\u01d7\016\u01d6" +
    "\017\u01d2\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025" +
    "\uff90\041\uff90\042\uff90\061\uff90\064\uff90\065\uff90\067\uff90" +
    "\072\uff90\001\002\000\050\012\u01d5\013\u01d0\014\u01da\015" +
    "\u01d7\016\u01d6\017\u01d2\020\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\025\uff93\041\uff93\042\uff93\061\uff93\064\uff93\065" +
    "\uff93\067\uff93\072\uff93\001\002\000\050\012\uff99\013\uff99" +
    "\014\uff99\015\uff99\016\u01d6\017\uff99\020\uff99\021\uff99\022" +
    "\uff99\023\uff99\024\uff99\025\uff99\041\uff99\042\uff99\061\uff99" +
    "\064\uff99\065\uff99\067\uff99\072\uff99\001\002\000\046\012" +
    "\uff96\013\uff96\014\uff96\015\uff96\017\uff96\020\uff96\021\uff96" +
    "\022\uff96\023\uff96\024\uff96\025\uff96\041\uff96\042\uff96\061" +
    "\uff96\064\uff96\065\uff96\067\uff96\072\uff96\001\002\000\050" +
    "\012\uff9b\013\uff9b\014\u01da\015\u01d7\016\u01d6\017\u01d2\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\041\uff9b" +
    "\042\uff9b\061\uff9b\064\uff9b\065\uff9b\067\uff9b\072\uff9b\001" +
    "\002\000\050\012\u01d5\013\u01d0\014\u01da\015\u01d7\016\u01d6" +
    "\017\u01d2\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\041\uff94\042\uff94\061\uff94\064\uff94\065\uff94\067\uff94" +
    "\072\uff94\001\002\000\050\012\u01d5\013\u01d0\014\u01da\015" +
    "\u01d7\016\u01d6\017\u01d2\020\uff91\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\025\uff91\041\uff91\042\uff91\061\uff91\064\uff91\065" +
    "\uff91\067\uff91\072\uff91\001\002\000\050\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\u01d6\017\uff97\020\uff97\021\uff97\022" +
    "\uff97\023\uff97\024\uff97\025\uff97\041\uff97\042\uff97\061\uff97" +
    "\064\uff97\065\uff97\067\uff97\072\uff97\001\002\000\050\012" +
    "\u01d5\013\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2\020\u01d3" +
    "\021\u01d8\022\u01d9\023\u01db\024\u01dc\025\u01d4\041\uff8f\042" +
    "\uff8f\061\uff8f\064\uff8f\065\uff8f\067\uff8f\072\uff8f\001\002" +
    "\000\050\012\uff9a\013\uff9a\014\u01da\015\u01d7\016\u01d6\017" +
    "\u01d2\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\041\uff9a\042\uff9a\061\uff9a\064\uff9a\065\uff9a\067\uff9a\072" +
    "\uff9a\001\002\000\050\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\041\uff9f\042\uff9f\061\uff9f\064\uff9f\065\uff9f" +
    "\067\uff9f\072\uff9f\001\002\000\030\004\u01bd\006\u01c3\007" +
    "\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9" +
    "\113\u01bf\115\u01c4\001\002\000\042\012\u01d5\013\u01d0\014" +
    "\u01da\015\u01d7\016\u01d6\017\u01d2\020\u01d3\021\u01d8\022\u01d9" +
    "\023\u01db\024\u01dc\025\u01d4\041\u01dd\042\u01d1\061\uffa5\072" +
    "\uffa5\001\002\000\050\012\u01d5\013\u01d0\014\u01da\015\u01d7" +
    "\016\u01d6\017\u01d2\020\u01d3\021\u01d8\022\u01d9\023\u01db\024" +
    "\u01dc\025\u01d4\041\uff9c\042\uff9c\061\uff9c\064\uff9c\065\uff9c" +
    "\067\uff9c\072\uff9c\001\002\000\020\052\ufff1\053\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\071\ufff1\113\ufff1\001\002\000\030" +
    "\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011\u01c5\013\u01be\044" +
    "\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4\001\002\000\040" +
    "\012\u01d5\013\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2\020" +
    "\u01d3\021\u01d8\022\u01d9\023\u01db\024\u01dc\025\u01d4\041\u01dd" +
    "\042\u01d1\067\u01f3\001\002\000\052\012\uff87\013\uff87\014" +
    "\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87" +
    "\023\uff87\024\uff87\025\uff87\041\uff87\042\uff87\061\uff87\064" +
    "\uff87\065\uff87\066\u01f4\067\uff87\072\uff87\001\002\000\030" +
    "\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011\u01c5\013\u01be\044" +
    "\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4\001\002\000\040" +
    "\012\u01d5\013\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2\020" +
    "\u01d3\021\u01d8\022\u01d9\023\u01db\024\u01dc\025\u01d4\041\u01dd" +
    "\042\u01d1\067\u01f6\001\002\000\050\012\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86" +
    "\023\uff86\024\uff86\025\uff86\041\uff86\042\uff86\061\uff86\064" +
    "\uff86\065\uff86\067\uff86\072\uff86\001\002\000\004\061\u01f8" +
    "\001\002\000\004\064\u01f9\001\002\000\050\012\uff85\013" +
    "\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\041\uff85\042\uff85\061" +
    "\uff85\064\uff85\065\uff85\067\uff85\072\uff85\001\002\000\040" +
    "\012\u01d5\013\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2\020" +
    "\u01d3\021\u01d8\022\u01d9\023\u01db\024\u01dc\025\u01d4\041\u01dd" +
    "\042\u01d1\061\u01fb\001\002\000\050\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\041\uff8d\042\uff8d\061\uff8d\064" +
    "\uff8d\065\uff8d\067\uff8d\072\uff8d\001\002\000\004\011\u01fd" +
    "\001\002\000\004\074\u01fe\001\002\000\004\011\u01ff\001" +
    "\002\000\004\060\u0200\001\002\000\032\004\u01bd\006\u01c3" +
    "\007\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060\u01c1\061" +
    "\uffa2\112\u01c9\113\u01bf\115\u01c4\001\002\000\004\061\u0202" +
    "\001\002\000\050\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e" +
    "\025\uff9e\041\uff9e\042\uff9e\061\uff9e\064\uff9e\065\uff9e\067" +
    "\uff9e\072\uff9e\001\002\000\050\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\041\uff9d\042\uff9d\061\uff9d\064\uff9d" +
    "\065\uff9d\067\uff9d\072\uff9d\001\002\000\006\026\u0205\064" +
    "\u0206\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0" +
    "\011\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115" +
    "\u01c4\001\002\000\020\052\uffef\053\uffef\055\uffef\056\uffef" +
    "\057\uffef\071\uffef\113\uffef\001\002\000\040\012\u01d5\013" +
    "\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2\020\u01d3\021\u01d8" +
    "\022\u01d9\023\u01db\024\u01dc\025\u01d4\041\u01dd\042\u01d1\064" +
    "\u0208\001\002\000\020\052\ufff0\053\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\071\ufff0\113\ufff0\001\002\000\004\060\u020a\001" +
    "\002\000\004\061\u020b\001\002\000\004\062\u020c\001\002" +
    "\000\042\003\u021f\011\u0217\027\u0218\030\u0215\032\u0223\033" +
    "\u021b\034\u0214\035\u0211\036\u020f\051\u0220\063\uffe7\112\u021e" +
    "\113\u0224\115\u0222\127\u0226\131\u021c\001\002\000\004\063" +
    "\u02c4\001\002\000\042\003\uffd1\011\uffd1\027\uffd1\030\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\051\uffd1\063" +
    "\uffd1\112\uffd1\113\uffd1\115\uffd1\127\uffd1\131\uffd1\001\002" +
    "\000\004\064\u02c3\001\002\000\042\003\uffd3\011\uffd3\027" +
    "\uffd3\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\051\uffd3\063\uffd3\112\uffd3\113\uffd3\115\uffd3\127\uffd3\131" +
    "\uffd3\001\002\000\004\060\u02bd\001\002\000\042\003\u021f" +
    "\011\u0217\027\u0218\030\u0215\032\u0223\033\u021b\034\u0214\035" +
    "\u0211\036\u020f\051\u0220\063\uffe7\112\u021e\113\u0224\115\u0222" +
    "\127\u0226\131\u021c\001\002\000\042\003\uffb6\011\uffb6\027" +
    "\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\051\uffb6\063\uffb6\112\uffb6\113\uffb6\115\uffb6\127\uffb6\131" +
    "\uffb6\001\002\000\004\060\u0290\001\002\000\004\060\u0283" +
    "\001\002\000\042\003\uffce\011\uffce\027\uffce\030\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\051\uffce\063\uffce" +
    "\112\uffce\113\uffce\115\uffce\127\uffce\131\uffce\001\002\000" +
    "\004\026\u0280\001\002\000\004\062\u0278\001\002\000\042" +
    "\003\uffd5\011\uffd5\027\uffd5\030\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\051\uffd5\063\uffd5\112\uffd5\113\uffd5" +
    "\115\uffd5\127\uffd5\131\uffd5\001\002\000\042\003\uffcc\011" +
    "\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\051\uffcc\063\uffcc\112\uffcc\113\uffcc\115\uffcc\127" +
    "\uffcc\131\uffcc\001\002\000\004\064\u0277\001\002\000\004" +
    "\060\u0274\001\002\000\042\003\uffd6\011\uffd6\027\uffd6\030" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\051\uffd6" +
    "\063\uffd6\112\uffd6\113\uffd6\115\uffd6\127\uffd6\131\uffd6\001" +
    "\002\000\004\074\u026e\001\002\000\004\064\u026d\001\002" +
    "\000\004\060\u0261\001\002\000\042\003\uffb5\011\uffb5\027" +
    "\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\051\uffb5\063\uffb5\112\uffb5\113\uffb5\115\uffb5\127\uffb5\131" +
    "\uffb5\001\002\000\004\060\u025e\001\002\000\004\060\u024a" +
    "\001\002\000\004\074\u0242\001\002\000\042\003\uffd4\011" +
    "\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\051\uffd4\063\uffd4\112\uffd4\113\uffd4\115\uffd4\127" +
    "\uffd4\131\uffd4\001\002\000\004\060\u0229\001\002\000\042" +
    "\003\uffd2\011\uffd2\027\uffd2\030\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\051\uffd2\063\uffd2\112\uffd2\113\uffd2" +
    "\115\uffd2\127\uffd2\131\uffd2\001\002\000\042\003\uffcd\011" +
    "\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\051\uffcd\063\uffcd\112\uffcd\113\uffcd\115\uffcd\127" +
    "\uffcd\131\uffcd\001\002\000\012\123\u022c\124\u022d\125\u022b" +
    "\126\u022a\001\002\000\004\072\u023d\001\002\000\004\072" +
    "\u0238\001\002\000\004\072\u0233\001\002\000\004\072\u022e" +
    "\001\002\000\004\130\u022f\001\002\000\004\011\u0230\001" +
    "\002\000\004\061\u0231\001\002\000\004\064\u0232\001\002" +
    "\000\042\003\uffdd\011\uffdd\027\uffdd\030\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\051\uffdd\063\uffdd\112\uffdd" +
    "\113\uffdd\115\uffdd\127\uffdd\131\uffdd\001\002\000\004\130" +
    "\u0234\001\002\000\004\011\u0235\001\002\000\004\061\u0236" +
    "\001\002\000\004\064\u0237\001\002\000\042\003\uffde\011" +
    "\uffde\027\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\051\uffde\063\uffde\112\uffde\113\uffde\115\uffde\127" +
    "\uffde\131\uffde\001\002\000\004\130\u0239\001\002\000\004" +
    "\011\u023a\001\002\000\004\061\u023b\001\002\000\004\064" +
    "\u023c\001\002\000\042\003\uffdc\011\uffdc\027\uffdc\030\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\051\uffdc\063" +
    "\uffdc\112\uffdc\113\uffdc\115\uffdc\127\uffdc\131\uffdc\001\002" +
    "\000\004\130\u023e\001\002\000\004\011\u023f\001\002\000" +
    "\004\061\u0240\001\002\000\004\064\u0241\001\002\000\042" +
    "\003\uffdb\011\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\051\uffdb\063\uffdb\112\uffdb\113\uffdb" +
    "\115\uffdb\127\uffdb\131\uffdb\001\002\000\004\011\u0243\001" +
    "\002\000\004\074\u0244\001\002\000\004\011\u0245\001\002" +
    "\000\004\060\u0246\001\002\000\032\004\u01bd\006\u01c3\007" +
    "\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060\u01c1\061\uffa2" +
    "\112\u01c9\113\u01bf\115\u01c4\001\002\000\004\061\u0248\001" +
    "\002\000\004\064\u0249\001\002\000\042\003\uffa0\011\uffa0" +
    "\027\uffa0\030\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\051\uffa0\063\uffa0\112\uffa0\113\uffa0\115\uffa0\127\uffa0" +
    "\131\uffa0\001\002\000\014\011\u0217\052\u01b0\053\u01b4\055" +
    "\u01b8\056\u01b3\001\002\000\030\004\u01bd\006\u01c3\007\u01c2" +
    "\010\u01c0\011\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113" +
    "\u01bf\115\u01c4\001\002\000\030\004\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\013\uffac\044\uffac\060\uffac\112\uffac\113" +
    "\uffac\115\uffac\001\002\000\004\011\u024e\001\002\000\004" +
    "\026\u024f\001\002\000\030\004\u01bd\006\u01c3\007\u01c2\010" +
    "\u01c0\011\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf" +
    "\115\u01c4\001\002\000\040\012\u01d5\013\u01d0\014\u01da\015" +
    "\u01d7\016\u01d6\017\u01d2\020\u01d3\021\u01d8\022\u01d9\023\u01db" +
    "\024\u01dc\025\u01d4\041\u01dd\042\u01d1\064\u0251\001\002\000" +
    "\030\004\uffab\006\uffab\007\uffab\010\uffab\011\uffab\013\uffab" +
    "\044\uffab\060\uffab\112\uffab\113\uffab\115\uffab\001\002\000" +
    "\040\012\u01d5\013\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2" +
    "\020\u01d3\021\u01d8\022\u01d9\023\u01db\024\u01dc\025\u01d4\041" +
    "\u01dd\042\u01d1\064\u0253\001\002\000\004\011\u0254\001\002" +
    "\000\010\026\u025a\047\u025c\050\u025b\001\002\000\004\061" +
    "\u0256\001\002\000\004\062\u0257\001\002\000\042\003\u021f" +
    "\011\u0217\027\u0218\030\u0215\032\u0223\033\u021b\034\u0214\035" +
    "\u0211\036\u020f\051\u0220\063\uffe7\112\u021e\113\u0224\115\u0222" +
    "\127\u0226\131\u021c\001\002\000\004\063\u0259\001\002\000" +
    "\042\003\uffb0\011\uffb0\027\uffb0\030\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\051\uffb0\063\uffb0\112\uffb0\113" +
    "\uffb0\115\uffb0\127\uffb0\131\uffb0\001\002\000\030\004\u01bd" +
    "\006\u01c3\007\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060" +
    "\u01c1\112\u01c9\113\u01bf\115\u01c4\001\002\000\004\061\uffae" +
    "\001\002\000\004\061\uffaf\001\002\000\040\012\u01d5\013" +
    "\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2\020\u01d3\021\u01d8" +
    "\022\u01d9\023\u01db\024\u01dc\025\u01d4\041\u01dd\042\u01d1\061" +
    "\uffad\001\002\000\004\061\u025f\001\002\000\004\064\u0260" +
    "\001\002\000\042\003\uffd7\011\uffd7\027\uffd7\030\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\051\uffd7\063\uffd7" +
    "\112\uffd7\113\uffd7\115\uffd7\127\uffd7\131\uffd7\001\002\000" +
    "\006\004\u0263\061\u0262\001\002\000\004\064\u026c\001\002" +
    "\000\006\061\u0266\072\u0265\001\002\000\004\061\u026a\001" +
    "\002\000\004\011\u0268\001\002\000\004\064\u0267\001\002" +
    "\000\042\003\uffe2\011\uffe2\027\uffe2\030\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\051\uffe2\063\uffe2\112\uffe2" +
    "\113\uffe2\115\uffe2\127\uffe2\131\uffe2\001\002\000\006\061" +
    "\uffe0\072\u0265\001\002\000\004\061\uffdf\001\002\000\004" +
    "\064\u026b\001\002\000\042\003\uffe1\011\uffe1\027\uffe1\030" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\051\uffe1" +
    "\063\uffe1\112\uffe1\113\uffe1\115\uffe1\127\uffe1\131\uffe1\001" +
    "\002\000\042\003\uffd9\011\uffd9\027\uffd9\030\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\051\uffd9\063\uffd9\112" +
    "\uffd9\113\uffd9\115\uffd9\127\uffd9\131\uffd9\001\002\000\004" +
    "\063\uffe8\001\002\000\004\011\u026f\001\002\000\004\060" +
    "\u0270\001\002\000\032\004\u01bd\006\u01c3\007\u01c2\010\u01c0" +
    "\011\u01c5\013\u01be\044\u01c8\060\u01c1\061\uffa2\112\u01c9\113" +
    "\u01bf\115\u01c4\001\002\000\004\061\u0272\001\002\000\004" +
    "\064\u0273\001\002\000\042\003\uffa1\011\uffa1\027\uffa1\030" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\051\uffa1" +
    "\063\uffa1\112\uffa1\113\uffa1\115\uffa1\127\uffa1\131\uffa1\001" +
    "\002\000\004\061\u0275\001\002\000\004\064\u0276\001\002" +
    "\000\042\003\uffd8\011\uffd8\027\uffd8\030\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\051\uffd8\063\uffd8\112\uffd8" +
    "\113\uffd8\115\uffd8\127\uffd8\131\uffd8\001\002\000\042\003" +
    "\uffd0\011\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\051\uffd0\063\uffd0\112\uffd0\113\uffd0\115" +
    "\uffd0\127\uffd0\131\uffd0\001\002\000\042\003\u021f\011\u0217" +
    "\027\u0218\030\u0215\032\u0223\033\u021b\034\u0214\035\u0211\036" +
    "\u020f\051\u0220\063\uffe7\112\u021e\113\u0224\115\u0222\127\u0226" +
    "\131\u021c\001\002\000\004\063\u027a\001\002\000\004\035" +
    "\u027b\001\002\000\004\060\u027c\001\002\000\030\004\u01bd" +
    "\006\u01c3\007\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060" +
    "\u01c1\112\u01c9\113\u01bf\115\u01c4\001\002\000\040\012\u01d5" +
    "\013\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2\020\u01d3\021" +
    "\u01d8\022\u01d9\023\u01db\024\u01dc\025\u01d4\041\u01dd\042\u01d1" +
    "\061\u027e\001\002\000\004\064\u027f\001\002\000\042\003" +
    "\uffb8\011\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\051\uffb8\063\uffb8\112\uffb8\113\uffb8\115" +
    "\uffb8\127\uffb8\131\uffb8\001\002\000\030\004\u01bd\006\u01c3" +
    "\007\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060\u01c1\112" +
    "\u01c9\113\u01bf\115\u01c4\001\002\000\040\012\u01d5\013\u01d0" +
    "\014\u01da\015\u01d7\016\u01d6\017\u01d2\020\u01d3\021\u01d8\022" +
    "\u01d9\023\u01db\024\u01dc\025\u01d4\041\u01dd\042\u01d1\064\u0282" +
    "\001\002\000\060\003\uffda\004\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\013\uffda\027\uffda\030\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\044\uffda\051\uffda\060\uffda\063" +
    "\uffda\112\uffda\113\uffda\115\uffda\127\uffda\131\uffda\001\002" +
    "\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011\u01c5\013" +
    "\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4\001\002" +
    "\000\040\012\u01d5\013\u01d0\014\u01da\015\u01d7\016\u01d6\017" +
    "\u01d2\020\u01d3\021\u01d8\022\u01d9\023\u01db\024\u01dc\025\u01d4" +
    "\041\u01dd\042\u01d1\061\u0285\001\002\000\004\062\u0286\001" +
    "\002\000\042\003\u021f\011\u0217\027\u0218\030\u0215\032\u0223" +
    "\033\u021b\034\u0214\035\u0211\036\u020f\051\u0220\063\uffe7\112" +
    "\u021e\113\u0224\115\u0222\127\u0226\131\u021c\001\002\000\004" +
    "\063\u0288\001\002\000\044\003\uffb2\011\uffb2\027\uffb2\030" +
    "\uffb2\031\u0289\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\051\uffb2\063\uffb2\112\uffb2\113\uffb2\115\uffb2\127\uffb2\131" +
    "\uffb2\001\002\000\006\030\u0215\062\u028b\001\002\000\042" +
    "\003\uffb1\011\uffb1\027\uffb1\030\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\051\uffb1\063\uffb1\112\uffb1\113\uffb1" +
    "\115\uffb1\127\uffb1\131\uffb1\001\002\000\042\003\u021f\011" +
    "\u0217\027\u0218\030\u0215\032\u0223\033\u021b\034\u0214\035\u0211" +
    "\036\u020f\051\u0220\063\uffe7\112\u021e\113\u0224\115\u0222\127" +
    "\u0226\131\u021c\001\002\000\042\003\uffb7\011\uffb7\027\uffb7" +
    "\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\051" +
    "\uffb7\063\uffb7\112\uffb7\113\uffb7\115\uffb7\127\uffb7\131\uffb7" +
    "\001\002\000\004\063\uffb4\001\002\000\004\063\u028f\001" +
    "\002\000\042\003\uffb3\011\uffb3\027\uffb3\030\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\051\uffb3\063\uffb3\112" +
    "\uffb3\113\uffb3\115\uffb3\127\uffb3\131\uffb3\001\002\000\004" +
    "\011\u0291\001\002\000\004\061\u0292\001\002\000\004\062" +
    "\u0293\001\002\000\006\037\u0294\114\u0296\001\002\000\004" +
    "\065\u02b8\001\002\000\010\037\u0294\063\u02b6\114\u0296\001" +
    "\002\000\030\004\u01bd\006\u01c3\007\u01c2\010\u01c0\011\u01c5" +
    "\013\u01be\044\u01c8\060\u01c1\112\u01c9\113\u01bf\115\u01c4\001" +
    "\002\000\010\037\uffa8\063\uffa8\114\uffa8\001\002\000\040" +
    "\012\u01d5\013\u01d0\014\u01da\015\u01d7\016\u01d6\017\u01d2\020" +
    "\u01d3\021\u01d8\022\u01d9\023\u01db\024\u01dc\025\u01d4\041\u01dd" +
    "\042\u01d1\065\u0299\001\002\000\036\003\u02a2\011\u0217\027" +
    "\u0218\030\u0215\032\u0223\033\uffbd\034\u0214\035\u0211\051\u02a3" +
    "\112\u021e\113\u0224\115\u02a4\127\u0226\131\u02a1\001\002\000" +
    "\036\003\uffc3\011\uffc3\027\uffc3\030\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\051\uffc3\112\uffc3\113\uffc3\115\uffc3\127" +
    "\uffc3\131\uffc3\001\002\000\036\003\uffc5\011\uffc5\027\uffc5" +
    "\030\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\051\uffc5\112" +
    "\uffc5\113\uffc5\115\uffc5\127\uffc5\131\uffc5\001\002\000\036" +
    "\003\u02a2\011\u0217\027\u0218\030\u0215\032\u0223\033\uffbd\034" +
    "\u0214\035\u0211\051\u02a3\112\u021e\113\u0224\115\u02a4\127\u0226" +
    "\131\u02a1\001\002\000\036\003\uffc2\011\uffc2\027\uffc2\030" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\051\uffc2\112\uffc2" +
    "\113\uffc2\115\uffc2\127\uffc2\131\uffc2\001\002\000\036\003" +
    "\uffc7\011\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\051\uffc7\112\uffc7\113\uffc7\115\uffc7\127\uffc7\131" +
    "\uffc7\001\002\000\036\003\uffc0\011\uffc0\027\uffc0\030\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\051\uffc0\112\uffc0\113" +
    "\uffc0\115\uffc0\127\uffc0\131\uffc0\001\002\000\036\003\uffc8" +
    "\011\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\051\uffc8\112\uffc8\113\uffc8\115\uffc8\127\uffc8\131\uffc8" +
    "\001\002\000\004\060\u02b2\001\002\000\004\064\u02b1\001" +
    "\002\000\004\060\u02ae\001\002\000\004\060\u02ab\001\002" +
    "\000\004\033\u02a9\001\002\000\036\003\uffc6\011\uffc6\027" +
    "\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\051\uffc6" +
    "\112\uffc6\113\uffc6\115\uffc6\127\uffc6\131\uffc6\001\002\000" +
    "\036\003\uffc4\011\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\051\uffc4\112\uffc4\113\uffc4\115\uffc4\127" +
    "\uffc4\131\uffc4\001\002\000\036\003\uffc1\011\uffc1\027\uffc1" +
    "\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\051\uffc1\112" +
    "\uffc1\113\uffc1\115\uffc1\127\uffc1\131\uffc1\001\002\000\004" +
    "\064\u02aa\001\002\000\010\037\uffa7\063\uffa7\114\uffa7\001" +
    "\002\000\004\061\u02ac\001\002\000\004\064\u02ad\001\002" +
    "\000\036\003\uffc9\011\uffc9\027\uffc9\030\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\051\uffc9\112\uffc9\113\uffc9\115\uffc9" +
    "\127\uffc9\131\uffc9\001\002\000\006\004\u0263\061\u02af\001" +
    "\002\000\004\064\u02b0\001\002\000\036\003\uffcb\011\uffcb" +
    "\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\051" +
    "\uffcb\112\uffcb\113\uffcb\115\uffcb\127\uffcb\131\uffcb\001\002" +
    "\000\036\003\uffbf\011\uffbf\027\uffbf\030\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\051\uffbf\112\uffbf\113\uffbf\115\uffbf" +
    "\127\uffbf\131\uffbf\001\002\000\004\061\u02b3\001\002\000" +
    "\004\064\u02b4\001\002\000\036\003\uffca\011\uffca\027\uffca" +
    "\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\051\uffca\112" +
    "\uffca\113\uffca\115\uffca\127\uffca\131\uffca\001\002\000\004" +
    "\033\uffbe\001\002\000\042\003\uffaa\011\uffaa\027\uffaa\030" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\051\uffaa" +
    "\063\uffaa\112\uffaa\113\uffaa\115\uffaa\127\uffaa\131\uffaa\001" +
    "\002\000\010\037\uffa9\063\uffa9\114\uffa9\001\002\000\036" +
    "\003\u02a2\011\u0217\027\u0218\030\u0215\032\u0223\033\uffbd\034" +
    "\u0214\035\u0211\051\u02a3\112\u021e\113\u0224\115\u02a4\127\u0226" +
    "\131\u02a1\001\002\000\004\033\u02ba\001\002\000\004\064" +
    "\u02bb\001\002\000\010\037\uffa6\063\uffa6\114\uffa6\001\002" +
    "\000\004\063\uffe9\001\002\000\030\004\u01bd\006\u01c3\007" +
    "\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060\u01c1\112\u01c9" +
    "\113\u01bf\115\u01c4\001\002\000\040\012\u01d5\013\u01d0\014" +
    "\u01da\015\u01d7\016\u01d6\017\u01d2\020\u01d3\021\u01d8\022\u01d9" +
    "\023\u01db\024\u01dc\025\u01d4\041\u01dd\042\u01d1\061\u02bf\001" +
    "\002\000\004\062\u02c0\001\002\000\042\003\u021f\011\u0217" +
    "\027\u0218\030\u0215\032\u0223\033\u021b\034\u0214\035\u0211\036" +
    "\u020f\051\u0220\063\uffe7\112\u021e\113\u0224\115\u0222\127\u0226" +
    "\131\u021c\001\002\000\004\063\u02c2\001\002\000\042\003" +
    "\uffb9\011\uffb9\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\051\uffb9\063\uffb9\112\uffb9\113\uffb9\115" +
    "\uffb9\127\uffb9\131\uffb9\001\002\000\042\003\uffcf\011\uffcf" +
    "\027\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\051\uffcf\063\uffcf\112\uffcf\113\uffcf\115\uffcf\127\uffcf" +
    "\131\uffcf\001\002\000\004\002\uffee\001\002\000\004\011" +
    "\u02c6\001\002\000\004\011\u02c7\001\002\000\004\060\u02c9" +
    "\001\002\000\020\052\uffbc\053\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\071\uffbc\113\uffbc\001\002\000\032\004\u01bd\006\u01c3" +
    "\007\u01c2\010\u01c0\011\u01c5\013\u01be\044\u01c8\060\u01c1\061" +
    "\uffa2\112\u01c9\113\u01bf\115\u01c4\001\002\000\004\061\u02cb" +
    "\001\002\000\006\064\u02cc\072\u02cd\001\002\000\020\052" +
    "\uffba\053\uffba\055\uffba\056\uffba\057\uffba\071\uffba\113\uffba" +
    "\001\002\000\004\011\u02c7\001\002\000\020\052\uffbb\053" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\071\uffbb\113\uffbb\001\002" +
    "\000\004\002\uffff\001\002\000\020\052\ufff7\053\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\071\ufff7\113\ufff7\001\002\000\004" +
    "\002\ufffd\001\002\000\030\002\uff82\052\uff82\053\uff82\055" +
    "\uff82\056\uff82\057\uff82\071\uff82\100\uff82\104\uff82\113\uff82" +
    "\122\uff82\001\002\000\022\052\ufff4\053\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\071\ufff4\113\ufff4\122\ufff4\001\002\000\022" +
    "\052\ufff3\053\ufff3\055\ufff3\056\ufff3\057\ufff3\071\ufff3\113" +
    "\ufff3\122\ufff3\001\002\000\022\052\ufff2\053\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\071\ufff2\113\ufff2\122\ufff2\001\002\000" +
    "\022\052\ufff5\053\ufff5\055\ufff5\056\ufff5\057\ufff5\071\ufff5" +
    "\113\ufff5\122\ufff5\001\002\000\020\052\ufff8\053\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\071\ufff8\113\ufff8\001\002\000\004" +
    "\002\001\001\002\000\004\011\u02da\001\002\000\006\062" +
    "\u02db\101\u02dc\001\002\000\030\011\041\052\027\053\040" +
    "\054\034\055\047\056\037\057\035\063\uff73\076\036\077" +
    "\042\100\031\001\002\000\004\011\u02dd\001\002\000\004" +
    "\062\u02de\001\002\000\026\011\041\052\027\053\040\054" +
    "\034\055\047\056\037\057\035\076\036\077\042\100\031" +
    "\001\002\000\030\011\041\052\027\053\040\054\034\055" +
    "\047\056\037\057\035\063\u02e0\076\036\077\042\100\031" +
    "\001\002\000\030\002\uff75\052\uff75\053\uff75\055\uff75\056" +
    "\uff75\057\uff75\071\uff75\100\uff75\104\uff75\113\uff75\122\uff75" +
    "\001\002\000\004\063\u02e3\001\002\000\030\011\041\052" +
    "\027\053\040\054\034\055\047\056\037\057\035\063\uff74" +
    "\076\036\077\042\100\031\001\002\000\030\002\uff77\052" +
    "\uff77\053\uff77\055\uff77\056\uff77\057\uff77\071\uff77\100\uff77" +
    "\104\uff77\113\uff77\122\uff77\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02e1\000\026\002\004\055\012\056\015\060\020\061" +
    "\006\063\010\107\014\123\016\124\013\125\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\123\u02d6\124\013\125\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\056\u02d1\063" +
    "\u02d0\123\016\124\013\125\007\001\001\000\010\123\u02cf" +
    "\124\013\125\007\001\001\000\020\055\012\056\015\061" +
    "\u02ce\063\010\123\016\124\013\125\007\001\001\000\002" +
    "\001\001\000\004\117\u01ac\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\031\012\045" +
    "\033\044\043\043\044\042\051\u01aa\057\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\031\012\045" +
    "\033\044\043\043\044\042\051\027\057\032\001\001\000" +
    "\002\001\001\000\016\006\031\012\045\033\044\043\043" +
    "\044\u01a9\057\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u0172\042\142" +
    "\001\001\000\006\012\056\036\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\003\072\004" +
    "\076\007\121\010\063\011\107\012\113\013\116\014\111" +
    "\015\067\016\114\017\064\020\112\021\106\022\117\031" +
    "\065\032\102\034\105\040\061\041\074\045\120\053\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\004\252\007\121\010\063\011\107\012\113\013\116" +
    "\014\111\015\067\016\114\017\064\020\112\021\106\022" +
    "\117\031\065\032\102\034\105\040\061\041\074\045\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\365\042\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\307\042\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\143\037\135\042\142\054\144\001\001\000\002\001\001" +
    "\000\006\005\246\042\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\237\042\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\205" +
    "\042\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\204\042\142\001\001\000\006\005\203\042\142\001" +
    "\001\000\006\005\202\042\142\001\001\000\006\005\201" +
    "\042\142\001\001\000\006\005\200\042\142\001\001\000" +
    "\006\005\177\042\142\001\001\000\006\005\176\042\142" +
    "\001\001\000\006\005\175\042\142\001\001\000\006\005" +
    "\174\042\142\001\001\000\006\005\173\042\142\001\001" +
    "\000\006\005\172\042\142\001\001\000\006\005\171\042" +
    "\142\001\001\000\006\005\170\042\142\001\001\000\006" +
    "\005\167\042\142\001\001\000\006\005\166\042\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\143\037" +
    "\135\042\142\054\231\001\001\000\006\005\224\042\142" +
    "\001\001\000\004\047\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\143\037\135\042\142\054\220" +
    "\001\001\000\004\047\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\227\042\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\234\001\001\000\002\001\001\000\006\005\236\042\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\143\037\243\042\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\250\004\076\007\121" +
    "\010\063\011\107\012\113\013\116\014\111\015\067\016" +
    "\114\017\064\020\112\021\106\022\117\031\065\032\102" +
    "\034\105\040\061\041\074\045\120\001\001\000\050\004" +
    "\252\007\121\010\063\011\107\012\113\013\116\014\111" +
    "\015\067\016\114\017\064\020\112\021\106\022\117\031" +
    "\065\032\102\034\105\040\061\041\074\045\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\255\042\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\261\042\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\264" +
    "\004\076\007\121\010\063\011\107\012\113\013\116\014" +
    "\111\015\067\016\114\017\064\020\112\021\106\022\117" +
    "\031\065\032\102\034\105\040\061\041\074\045\120\001" +
    "\001\000\050\004\252\007\121\010\063\011\107\012\113" +
    "\013\116\014\111\015\067\016\114\017\064\020\112\021" +
    "\106\022\117\031\065\032\102\034\105\040\061\041\074" +
    "\045\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\274\042\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\314\027\312\030" +
    "\313\042\142\001\001\000\002\001\001\000\010\005\314" +
    "\030\322\042\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\317\004\076\007\121" +
    "\010\063\011\107\012\113\013\116\014\111\015\067\016" +
    "\114\017\064\020\112\021\106\022\117\031\065\032\102" +
    "\034\105\040\061\041\074\045\120\001\001\000\050\004" +
    "\252\007\121\010\063\011\107\012\113\013\116\014\111" +
    "\015\067\016\114\017\064\020\112\021\106\022\117\031" +
    "\065\032\102\034\105\040\061\041\074\045\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\325\004\076\007\121\010\063" +
    "\011\107\012\113\013\116\014\111\015\067\016\114\017" +
    "\064\020\112\021\106\022\117\031\065\032\102\034\105" +
    "\040\061\041\074\045\120\001\001\000\050\004\252\007" +
    "\121\010\063\011\107\012\113\013\116\014\111\015\067" +
    "\016\114\017\064\020\112\021\106\022\117\031\065\032" +
    "\102\034\105\040\061\041\074\045\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\341\001\001\000\002\001\001\000\010" +
    "\005\344\026\343\042\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\347\042\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\344\026\353\042\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\344\026\357\042\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u012b\042\142\001\001\000\012\005\143\037" +
    "\135\042\142\054\u0122\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u0115\042\142\001\001\000\006\046" +
    "\376\050\377\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u0101\042\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\143\037\135" +
    "\042\142\054\u0110\001\001\000\006\040\u0106\050\u0107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\143\037\135\042\142\054\u010a\001\001\000" +
    "\006\046\376\050\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\u010e\050\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\u0114\050" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u011e\042\142\001\001\000\006\005" +
    "\u0119\042\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u011c\042\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\u010e\050\u0125\001\001\000\002\001\001" +
    "\000\006\005\u0127\042\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u013a\042\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\u013d\042\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u0140\004" +
    "\076\007\121\010\063\011\107\012\113\013\116\014\111" +
    "\015\067\016\114\017\064\020\112\021\106\022\117\031" +
    "\065\032\102\034\105\040\061\041\074\045\120\001\001" +
    "\000\050\004\252\007\121\010\063\011\107\012\113\013" +
    "\116\014\111\015\067\016\114\017\064\020\112\021\106" +
    "\022\117\031\065\032\102\034\105\040\061\041\074\045" +
    "\120\001\001\000\004\025\u0142\001\001\000\002\001\001" +
    "\000\010\020\u0145\021\106\022\117\001\001\000\052\003" +
    "\u0146\004\076\007\121\010\063\011\107\012\113\013\116" +
    "\014\111\015\067\016\114\017\064\020\112\021\106\022" +
    "\117\031\065\032\102\034\105\040\061\041\074\045\120" +
    "\001\001\000\002\001\001\000\052\004\252\007\121\010" +
    "\063\011\107\012\113\013\116\014\111\015\067\016\114" +
    "\017\064\020\112\021\106\022\117\031\065\032\102\034" +
    "\105\040\061\041\074\045\120\130\u0147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\u014b\012\113\023\u014c\045\u014d\001\001\000\002\001\001" +
    "\000\006\005\u015a\042\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\143\037\135\042\142\054\u0157" +
    "\001\001\000\004\050\377\001\001\000\002\001\001\000" +
    "\012\005\143\037\135\042\142\054\u0154\001\001\000\004" +
    "\050\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0125\001\001\000\002\001\001\000\004\024" +
    "\u015d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0160\004\076\007\121\010\063\011" +
    "\107\012\113\013\116\014\111\015\067\016\114\017\064" +
    "\020\112\021\106\022\117\031\065\032\102\034\105\040" +
    "\061\041\074\045\120\001\001\000\050\004\252\007\121" +
    "\010\063\011\107\012\113\013\116\014\111\015\067\016" +
    "\114\017\064\020\112\021\106\022\117\031\065\032\102" +
    "\034\105\040\061\041\074\045\120\001\001\000\002\001" +
    "\001\000\006\005\u0165\042\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\143\037" +
    "\135\042\142\054\u0167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0170\001\001\000\002\001\001\000\054\003\072\004\076" +
    "\007\121\010\063\011\107\012\113\013\116\014\111\015" +
    "\067\016\114\017\064\020\112\021\106\022\117\031\065" +
    "\032\102\034\105\040\061\041\074\045\120\053\u016e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\056\036\u0179\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\072\004\076\007\121" +
    "\010\063\011\107\012\113\013\116\014\111\015\067\016" +
    "\114\017\064\020\112\021\106\022\117\031\065\032\102" +
    "\034\105\040\061\041\074\045\120\053\u017c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\072\004\076\007\121\010\063\011\107\012\113\013" +
    "\116\014\111\015\067\016\114\017\064\020\112\021\106" +
    "\022\117\031\065\032\102\034\105\040\061\041\074\045" +
    "\120\053\u0180\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u018f\042\142\001\001\000" +
    "\006\012\056\036\u0186\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\072\004\076\007" +
    "\121\010\063\011\107\012\113\013\116\014\111\015\067" +
    "\016\114\017\064\020\112\021\106\022\117\031\065\032" +
    "\102\034\105\040\061\041\074\045\120\053\u0189\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\072\004\076\007\121\010\063\011\107\012\113" +
    "\013\116\014\111\015\067\016\114\017\064\020\112\021" +
    "\106\022\117\031\065\032\102\034\105\040\061\041\074" +
    "\045\120\053\u018d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\056" +
    "\036\u0192\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\072\004\076\007\121\010\063\011\107\012\113" +
    "\013\116\014\111\015\067\016\114\017\064\020\112\021" +
    "\106\022\117\031\065\032\102\034\105\040\061\041\074" +
    "\045\120\053\u0195\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\056\036\u0198\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\003\072\004\076\007\121\010" +
    "\063\011\107\012\113\013\116\014\111\015\067\016\114" +
    "\017\064\020\112\021\106\022\117\031\065\032\102\034" +
    "\105\040\061\041\074\045\120\053\u019b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\056\036\u019f\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\072\004\076\007\121\010\063\011\107\012" +
    "\113\013\116\014\111\015\067\016\114\017\064\020\112" +
    "\021\106\022\117\031\065\032\102\034\105\040\061\041" +
    "\074\045\120\053\u01a2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\072\004\076\007" +
    "\121\010\063\011\107\012\113\013\116\014\111\015\067" +
    "\016\114\017\064\020\112\021\106\022\117\031\065\032" +
    "\102\034\105\040\061\041\074\045\120\053\u01a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\031\012\045\033\044\043\043" +
    "\044\u01a9\057\032\001\001\000\002\001\001\000\014\064" +
    "\u01b5\065\u01b0\066\u01b6\101\u01ad\122\u01b4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\122\u01b9\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\067\u01c6\106\u01c5\001\001\000" +
    "\002\001\001\000\006\067\u0202\106\u01c5\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\067\u01f9\106\u01c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\067\u01ee\106\u01c5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\067\u01ce\106\u01c5\112" +
    "\u01cc\115\u01cd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\067\u01ea\106\u01c5\001\001\000" +
    "\006\067\u01e9\106\u01c5\001\001\000\006\067\u01e8\106\u01c5" +
    "\001\001\000\006\067\u01e7\106\u01c5\001\001\000\006\067" +
    "\u01e6\106\u01c5\001\001\000\006\067\u01e5\106\u01c5\001\001" +
    "\000\006\067\u01e4\106\u01c5\001\001\000\006\067\u01e3\106" +
    "\u01c5\001\001\000\006\067\u01e2\106\u01c5\001\001\000\006" +
    "\067\u01e1\106\u01c5\001\001\000\006\067\u01e0\106\u01c5\001" +
    "\001\000\006\067\u01df\106\u01c5\001\001\000\006\067\u01de" +
    "\106\u01c5\001\001\000\006\067\u01dd\106\u01c5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\067\u01ed\106\u01c5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\067\u01f1\106\u01c5\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\067\u01f4\106\u01c5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\067\u01ce\106\u01c5\112\u01cc\115" +
    "\u0200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\067\u0206\106\u01c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\062\u020c\070\u0224\071\u021c\072\u0218\073\u020f\074\u0226" +
    "\075\u020d\076\u0215\077\u0227\100\u0219\102\u0212\103\u0220\111" +
    "\u0211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\062" +
    "\u02bb\070\u0224\071\u021c\072\u0218\073\u020f\074\u0226\075\u020d" +
    "\076\u0215\077\u0227\100\u0219\102\u0212\103\u0220\111\u0211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\067" +
    "\u01ce\106\u01c5\112\u01cc\115\u0246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\072\u024b\104" +
    "\u024a\122\u024c\001\001\000\006\067\u0251\106\u01c5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\067\u024f\106\u01c5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\105\u0254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\062\u0257\070\u0224\071\u021c\072\u0218\073\u020f\074\u0226\075" +
    "\u020d\076\u0215\077\u0227\100\u0219\102\u0212\103\u0220\111\u0211" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\067" +
    "\u025c\106\u01c5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\126\u0263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\126\u0268\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\067\u01ce\106\u01c5\112\u01cc\115\u0270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\062\u0278\070\u0224\071\u021c\072\u0218" +
    "\073\u020f\074\u0226\075\u020d\076\u0215\077\u0227\100\u0219\102" +
    "\u0212\103\u0220\111\u0211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\067\u027c\106\u01c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\067\u0280\106\u01c5\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\067\u0283\106\u01c5\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\062\u0286\070\u0224\071" +
    "\u021c\072\u0218\073\u020f\074\u0226\075\u020d\076\u0215\077\u0227" +
    "\100\u0219\102\u0212\103\u0220\111\u0211\001\001\000\002\001" +
    "\001\000\004\114\u0289\001\001\000\010\076\u028b\102\u0212" +
    "\103\u0220\001\001\000\002\001\001\000\034\062\u028c\070" +
    "\u0224\071\u021c\072\u0218\073\u020f\074\u0226\075\u020d\076\u0215" +
    "\077\u0227\100\u0219\102\u0212\103\u0220\111\u0211\001\001\000" +
    "\002\001\001\000\004\127\u028d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\120\u0294\121\u0296\001\001\000\002" +
    "\001\001\000\004\121\u02b6\001\001\000\006\067\u0297\106" +
    "\u01c5\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\070\u02a5\071\u029f\072\u029d\073\u029a\074\u02a6\075\u0299\076" +
    "\u029c\077\u02a7\100\u029e\102\u0212\103\u0220\110\u029b\116\u02a4" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\070" +
    "\u02a5\071\u029f\072\u029d\073\u029a\074\u02a6\075\u0299\076\u029c" +
    "\077\u02a7\100\u029e\102\u0212\103\u0220\110\u029b\116\u02b4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\070\u02a5\071\u029f\072\u029d" +
    "\073\u029a\074\u02a6\075\u0299\076\u029c\077\u02a7\100\u029e\102" +
    "\u0212\103\u0220\110\u029b\116\u02b8\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\067\u02bd\106\u01c5\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\062\u02c0\070\u0224\071\u021c\072\u0218\073" +
    "\u020f\074\u0226\075\u020d\076\u0215\077\u0227\100\u0219\102\u0212" +
    "\103\u0220\111\u0211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u02c7\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\067\u01ce\106\u01c5\112\u01cc\115\u02c9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\113\u02cd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\031\012\045\033\044" +
    "\043\043\044\042\051\u02e1\052\u02e0\057\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\031\012\045" +
    "\033\044\043\043\044\042\051\u02de\057\032\001\001\000" +
    "\016\006\031\012\045\033\044\043\043\044\u01a9\057\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\031\012\045\033\044\043\043\044\u01a9\057\032\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String currentAmbit;

    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    // public void syntax_error(Symbol s){
    //     System.out.println("Error Sintactico en la linea " +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }

    // public void unrecovered_syntax_error (Symbol s){
    //     System.out.println("Error Sintactico no recuperable en la linea" +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pascal 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pascal ::= pascalCode java_C 
            {
              LinkedList<Instruction> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c_Jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_Jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c_J = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();
        if(p!=null){
                RESULT.add(p);
        }
        if(c_J!=null){
                RESULT.addAll(c_J);
        }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pascal ::= java_C 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // java_C ::= claass cPrincipal 
            {
              LinkedList<Instruction> RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> j = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = new LinkedList<>(); 
        if(j!=null){
        ClasesJava cl = new ClasesJava(j, jleft, jright);
                RESULT.add(cl);
        }
        if(c!=null){
                 RESULT.add(c); 
        } 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("java_C",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // java_C ::= cPrincipal 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); 
        if(c!=null){
                RESULT.add(c); 
        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("java_C",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pascalCode ::= PROCEDURE 
            {
              Instruction RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalCode",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cPrincipal ::= includes declaracionC mainC 
            {
              Instruction RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Includes in = (Includes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction main = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Programa(in, ins, main, inleft, inright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cPrincipal",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cPrincipal ::= 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cPrincipal",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // includes ::= includeP includes 
            {
              Includes RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Includes ins = (Includes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
           RESULT.addSubPPascal(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // includes ::= includeJ includes 
            {
              Includes RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Includes ins = (Includes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
         RESULT.addClaseJava(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // includes ::= 
            {
              Includes RESULT =null;
		 RESULT = new Includes(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // includeP ::= INCLUDE PASCALUNO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeP",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // includeP ::= INCLUDE PASCALSIMP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeP",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // includeJ ::= INCLUDE JAVAUNO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeJ",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // includeJ ::= INCLUDE JAVATODO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeJ",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decConstC ::= CONST typeC ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementC(id, exp, t, idleft, idright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decConstC",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decVarsC ::= typeC ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementC(id, exp, t, idleft, idright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVarsC",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decVarsC ::= typeC ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementC(id, t, idleft, idright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVarsC",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainC ::= VOID MAIN PAR_OP PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MainnC("MAIN", ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainC",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionC ::= declaracionC decConstC 
            {
              LinkedList<Instruction> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> decs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction dec = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; RESULT.add(dec);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionC ::= declaracionC decVarsC 
            {
              LinkedList<Instruction> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> decs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction dec = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; RESULT.add(dec);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionC ::= declaracionC decObjetos 
            {
              LinkedList<Instruction> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> decs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction dec = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; RESULT.add(dec);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionC ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instructionsC ::= insC instructionsC 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instructionsC ::= error SEMIC 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instructionsC ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typeC ::= INT 
            {
              Tipo RESULT =null;
		 new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typeC ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typeC ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typeC ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // printf ::= PRINT PAR_OP CADENA PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // printf ::= PRINT PAR_OP CADENA varsPrintf PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varsPrintf ::= COLON ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsPrintf",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varsPrintf ::= COLON ID varsPrintf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsPrintf",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // scanf ::= SCAN PAR_OP MASK_D COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // scanf ::= SCAN PAR_OP MASK_C COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // scanf ::= SCAN PAR_OP MASK_F COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // scanf ::= SCAN PAR_OP MASK_S COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacionC ::= ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionC",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // insC ::= PRINT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // insC ::= CLRSCR PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // insC ::= GETCH PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // insC ::= scanf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // insC ::= asignacionC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // insC ::= printf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // insC ::= whileC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // insC ::= forC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // insC ::= DOC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // insC ::= BREAK SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // insC ::= CONTINUE SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // insC ::= ifC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // insC ::= switchC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // insC ::= callC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inSwC ::= PRINT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inSwC ::= CLRSCR PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inSwC ::= GETCH PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inSwC ::= scanf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inSwC ::= asignacionC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inSwC ::= printf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inSwC ::= whileC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inSwC ::= forC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inSwC ::= DOC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // inSwC ::= ifC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // inSwC ::= switchC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inSwC ::= callC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inSwC ::= error SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // insSwC ::= inSwC insSwC 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insSwC",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // insSwC ::= 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insSwC",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // decObjetos ::= JAVA DOT ID instancesC 
            {
              Instruction RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ReferenceC(cl,ins, clleft, clright);    
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decObjetos",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instancesC ::= ID PAR_OP paramssC PAR_CL COLON instancesC 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
        CallJavaC cl = new CallJavaC(id, p, idleft, idright); 
        RESULT.add(cl);

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instancesC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instancesC ::= ID PAR_OP paramssC PAR_CL SEMIC 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new LinkedList<>();
          CallJavaC cl = new CallJavaC(id, p, idleft, idright); 
          RESULT.add(cl);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instancesC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // whileC ::= WHILE PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileC",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DOC ::= DO K_OP instructionsC K_CL WHILE PAR_OP EXPRESIONCC PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOC",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ifC ::= IF PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL ELSE ifC 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction elif = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IFC(exp, ins, elif, expleft, expright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifC",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ifC ::= elseesC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifC",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ifC ::= simpleIfC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifC",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$0 ::= 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = ins;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cierreElseC ::= ELSE K_OP instructionsC NT$0 K_CL 
            {
              LinkedList<Instruction> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (LinkedList<Instruction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierreElseC",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simpleIfC ::= IF PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(a, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleIfC",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // elseesC ::= IF PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL cierreElseC 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insElsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insElsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> insEls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, insEls, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseesC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // forC ::= FOR PAR_OP declaraAsignaC EXPRESIONCC SEMIC updateVarForC PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaFor(a, b, c, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forC",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // updateVarForC ::= ID PLUSPLUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarForC",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // updateVarForC ::= ID MINUSMINUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarForC",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // updateVarForC ::= ID ASSIGNMENT EXPRESIONCC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarForC",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaraAsignaC ::= asignacionC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsignaC",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaraAsignaC ::= typeC ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsignaC",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switchC ::= SWITCH PAR_OP ID PAR_CL K_OP listCasesC K_CL 
            {
              Instruction RESULT =null;
		int cazzozleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cazzozright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> cazzoz = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchC",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listCasesC ::= listCasesC caseC 
            {
              LinkedList<CaseMatch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCasesC",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listCasesC ::= caseC 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>();   RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCasesC",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // caseC ::= CASE EXPRESIONCC POINTS insSwC BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // caseC ::= DEFAULT POINTS insSwC BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(null, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // callsParametersC ::= callsParametersC COLON EXPRESIONCC 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParametersC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // callsParametersC ::= EXPRESIONCC 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruction>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParametersC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // paramssC ::= callsParametersC 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramssC",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // paramssC ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramssC",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // callC ::= PASCAL DOT ID PAR_OP paramssC PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callC",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // callC ::= JAVA DOT ID DOT ID PAR_OP paramssC PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callC",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // callExpC ::= PASCAL DOT ID PAR_OP paramssC PAR_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExpC",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // callExpC ::= JAVA DOT ID DOT ID PAR_OP paramssC PAR_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExpC",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESIONCC ::= MINUS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Negacion(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESIONCC ::= NOT EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESIONCC ::= EXPRESIONCC PLUS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESIONCC ::= EXPRESIONCC MINUS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESIONCC ::= EXPRESIONCC DIVIDED EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESIONCC ::= EXPRESIONCC TIMES EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESIONCC ::= EXPRESIONCC MOD EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESIONCC ::= EXPRESIONCC RAISED EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Raised(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESIONCC ::= EXPRESIONCC EQUALS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESIONCC ::= EXPRESIONCC DIFFERENT EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESIONCC ::= EXPRESIONCC LESS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESIONCC ::= EXPRESIONCC L_EQUALS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESIONCC ::= EXPRESIONCC GREATER EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESIONCC ::= EXPRESIONCC G_EQUALS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESIONCC ::= EXPRESIONCC AND EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESIONCC ::= EXPRESIONCC OR EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESIONCC ::= PAR_OP EXPRESIONCC PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESIONCC ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new NativoC(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESIONCC ::= CHARAC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new NativoC(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESIONCC ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new NativoC(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESIONCC ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new NativoC(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESIONCC ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccessC(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESIONCC ::= ID BRACK_L EXPRESIONCC BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESIONCC ::= ID BRACK_L EXPRESIONCC BRACK_R BRACK_L EXPRESIONCC BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indx1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indx1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction indx1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx1, indx2, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESIONCC ::= GETCH PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESIONCC ::= callExpC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // claass ::= Oneclaass 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // claass ::= claass Oneclaass 
            {
              LinkedList<Instruction> RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> cls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cls; RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // InstructionES ::= InstructionES Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // InstructionES ::= Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // methodIns ::= InstructionES 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodIns",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // methodIns ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodIns",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // constructor ::= ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, p, ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // constructor ::= modPriv ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, p, ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // modPriv ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // modPriv ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // modPriv ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Oneclaass ::= CLASS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Oneclaass ::= PUBLIC CLASS ID K_OP insClass K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Classs(id, ins, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Oneclaass ::= CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Oneclaass ::= PUBLIC CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // insClass ::= gInstructionss 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insClass",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // insClass ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insClass",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // gInstructionss ::= gIns 
            {
              LinkedList<Instruction> RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(in);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // gInstructionss ::= gInstructionss gIns 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; RESULT.add(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // gIns ::= methodd 
            {
              Instruction RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction m = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // gIns ::= globalDec 
            {
              Instruction RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction g = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = g; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Instruction ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Instruction ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Instruction ::= print 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Instruction ::= if 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Instruction ::= increaseDecrease 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Instruction ::= for 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Instruction ::= while 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Instruction ::= do 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Instruction ::= match 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Instruction ::= break 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Instruction ::= returnn 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Instruction ::= continue 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Instruction ::= declaracionEstructuraD 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Instruction ::= call 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Instruction ::= error SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Instruction ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Negacion(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESION ::= EXPRESION DIVIDED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION ::= EXPRESION TIMES EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION ::= EXPRESION RAISED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Raised(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESION ::= EXPRESION EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESION ::= EXPRESION DIFFERENT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESION ::= EXPRESION L_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPRESION ::= EXPRESION G_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXPRESION ::= PAR_OP EXPRESION PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPRESION ::= CHARAC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPRESION ::= BOOL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Access(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPRESION ::= THIS DOT ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Access(a, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indx1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indx1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction indx1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx1, indx2, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPRESION ::= callEXP 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXPRESION ::= NEW ID PAR_OP callsParameters PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Reference(t, p, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXPRESION ::= NEW ID PAR_OP PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Reference(t, new LinkedList<>(), tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // methodd ::= modPriv VOID ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // methodd ::= modPriv VOID ID PAR_OP PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // methodd ::= modPriv typeVar ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // methodd ::= modPriv typeVar ID PAR_OP PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // methodd ::= VOID ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // methodd ::= VOID ID PAR_OP PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // methodd ::= typeVar ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // methodd ::= typeVar ID PAR_OP PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // methodd ::= constructor 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // parametersFuncts ::= parametersFuncts COLON typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var elseParam= new HashMap<String, Object>();
                                            elseParam.put("id", id);
                                            elseParam.put("tipo", b);
                                            RESULT.add(elseParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // parametersFuncts ::= typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var oneParam = new HashMap<String, Object>();
                                            oneParam.put("id",id);
                                            oneParam.put("tipo", a);
                                            RESULT.add(oneParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // paramss ::= callsParameters 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // paramss ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // callEXP ::= ID DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // callEXP ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // callEXP ::= ID PAR_OP paramss PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // callEXP2 ::= 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // callEXP2 ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // callEXP2 ::= ID PAR_OP paramss PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // callEXP2 ::= ID DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // callEXP2 ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // call ::= ID DOT call2 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // call ::= ID PAR_OP paramss PAR_CL DOT call2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // call ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // call2 ::= ID PAR_OP paramss PAR_CL DOT call 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // call2 ::= ID DOT call 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // call2 ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // callsParameters ::= callsParameters COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // callsParameters ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruction>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // if ::= IF PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL ELSE if 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction elif = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, elif, expleft, expright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // if ::= elsees 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // if ::= simpleIf 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // for ::= FOR PAR_OP declaraAsigna EXPRESION SEMIC updateVarFor PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaFor(a, b, c, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // updateVarFor ::= ID PLUSPLUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // updateVarFor ::= ID MINUSMINUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // updateVarFor ::= ID ASSIGNMENT EXPRESION 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // while ::= WHILE PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaWhile(a, ins, false,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // do ::= DO K_OP InstructionES K_CL WHILE PAR_OP EXPRESION PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CiclicaWhile(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // match ::= SWITCH EXPRESION K_OP listCases K_CL 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cazzozleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cazzozright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> cazzoz = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(exp, cazzoz, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("match",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // listCases ::= listCases case 
            {
              LinkedList<CaseMatch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // listCases ::= case 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>();   RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // case ::= EXPRESION ARROW K_OP InstructionES K_CL 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CaseMatch(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // case ::= DEFAULT ARROW K_OP InstructionES K_CL 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CaseMatch(null, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // declaraAsigna ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // declaraAsigna ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // NT$1 ::= 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = ins;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // cierreElse ::= ELSE K_OP InstructionES NT$1 K_CL 
            {
              LinkedList<Instruction> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (LinkedList<Instruction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierreElse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // simpleIf ::= IF PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(a, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleIf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // elsees ::= IF PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL cierreElse 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insElsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insElsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> insEls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, insEls, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsees",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // print ::= PRINT PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prints(a, false, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // print ::= PRINTLN PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prints(a, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // declaracion ::= typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // declaracion ::= typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // declaracion ::= typeVar ID ASSIGNMENT INP_INT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.ENTERO), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // declaracion ::= typeVar ID ASSIGNMENT INP_C PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.CARACTER), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // declaracion ::= typeVar ID ASSIGNMENT INP_F PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.DECIMAL), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // globalDec ::= modPriv typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // globalDec ::= modPriv typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // globalDec ::= typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // globalDec ::= typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVectorAlone BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, vals, null, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVector2D BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruction>> vals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, null, vals, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // valoresVector2D ::= BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // valoresVector2D ::= valoresVector2D COLON BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int listaValsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaValsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> listaVals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = listaVals; RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // valoresVectorAlone ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.add(exp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // valoresVectorAlone ::= valoresVectorAlone COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int valuessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valuessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> valuess = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = valuess; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // assig_to_acces ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // assig_to_acces ::= ID DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // assig_to_acces ::= ID 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // asignacion ::= THIS DOT ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(true, id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // asignacion ::= ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // asignacion ::= ID DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // asignacion ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // asignacion ::= ID BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // asignacion ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int index2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, index2, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // asignacion ::= ID ASSIGNMENT INP_INT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.ENTERO), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // asignacion ::= ID ASSIGNMENT INP_C PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.CARACTER), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // asignacion ::= ID ASSIGNMENT INP_F PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.DECIMAL), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // increaseDecrease ::= ID PLUSPLUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // increaseDecrease ::= ID MINUSMINUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // typeVar ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // typeVar ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // typeVar ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // typeVar ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // typeVar ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // typeVar ::= ID 
            {
              Tipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // break ::= BREAK SEMIC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferBreak(wleft, wright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // continue ::= CONTINUE SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferContinue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // returnn ::= RETURN SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // returnn ::= RETURN EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(exp, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
