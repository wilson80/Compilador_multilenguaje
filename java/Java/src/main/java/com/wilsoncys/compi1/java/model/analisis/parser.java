
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.wilsoncys.compi1.java.model.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.wilsoncys.compi1.java.model.asbtracto.Instruction;
import com.wilsoncys.compi1.java.model.programa.*;
import com.wilsoncys.compi1.java.model.excepciones.Errores;
import com.wilsoncys.compi1.java.model.simbolo.*;
import com.wilsoncys.compi1.java.model.instrucciones.*;
import com.wilsoncys.compi1.java.model.poo.*;
import com.wilsoncys.compi1.java.model.expresiones.*;
import com.wilsoncys.compi1.java.model.expresiones.Aritmeticas.*;
import com.wilsoncys.compi1.java.model.expresiones.Enums.*;
import com.wilsoncys.compi1.java.model.programa.*;
import com.wilsoncys.compi1.java.model.programa.expresiones.*;
import com.wilsoncys.compi1.java.model.programa.instrucciones.*;
import com.wilsoncys.compi1.java.model.instruccionesPas.*;
import com.wilsoncys.compi1.java.model.expresionesPas.*;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\002\002\004\000\002\002\003\000\002\062" +
    "\004\000\002\062\003\000\002\063\004\000\002\063\003" +
    "\000\002\063\003\000\002\065\005\000\002\065\002\000" +
    "\002\125\004\000\002\125\004\000\002\125\002\000\002" +
    "\127\004\000\002\127\004\000\002\126\004\000\002\126" +
    "\004\000\002\066\010\000\002\067\007\000\002\067\005" +
    "\000\002\070\011\000\002\121\004\000\002\121\004\000" +
    "\002\121\004\000\002\121\002\000\002\064\004\000\002" +
    "\064\004\000\002\064\002\000\002\124\003\000\002\124" +
    "\003\000\002\124\003\000\002\124\003\000\002\072\007" +
    "\000\002\072\010\000\002\130\004\000\002\130\005\000" +
    "\002\073\012\000\002\073\012\000\002\073\012\000\002" +
    "\073\012\000\002\074\006\000\002\112\006\000\002\112" +
    "\006\000\002\112\006\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\112\003\000\002\112\004\000\002\112\004\000\002" +
    "\112\003\000\002\112\003\000\002\112\003\000\002\111" +
    "\006\000\002\111\006\000\002\111\006\000\002\111\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\120\004\000\002\120" +
    "\002\000\002\103\006\000\002\115\010\000\002\115\007" +
    "\000\002\075\011\000\002\077\013\000\002\100\013\000" +
    "\002\100\003\000\002\100\003\000\002\172\002\000\002" +
    "\116\007\000\002\105\011\000\002\104\012\000\002\076" +
    "\014\000\002\107\004\000\002\107\004\000\002\107\005" +
    "\000\002\106\003\000\002\106\007\000\002\101\011\000" +
    "\002\122\004\000\002\122\002\000\002\123\010\000\002" +
    "\123\007\000\002\114\005\000\002\114\003\000\002\117" +
    "\003\000\002\117\002\000\002\102\011\000\002\102\013" +
    "\000\002\110\010\000\002\110\012\000\002\071\004\000" +
    "\002\071\004\000\002\071\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\005\000\002\071" +
    "\005\000\002\071\005\000\002\071\005\000\002\071\005" +
    "\000\002\071\005\000\002\071\005\000\002\071\005\000" +
    "\002\071\005\000\002\071\005\000\002\071\005\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\006\000\002\071\011" +
    "\000\002\071\006\000\002\071\003\000\002\055\003\000" +
    "\002\055\004\000\002\003\004\000\002\003\002\000\002" +
    "\060\011\000\002\060\010\000\002\060\012\000\002\060" +
    "\011\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\057\007\000\002\057\010\000\002\057\011\000" +
    "\002\057\012\000\002\052\003\000\002\052\002\000\002" +
    "\051\003\000\002\051\004\000\002\046\003\000\002\046" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\005\000\002\005\006\000\002\005\011" +
    "\000\002\005\003\000\002\005\007\000\002\005\006\000" +
    "\002\033\013\000\002\033\012\000\002\033\013\000\002" +
    "\033\012\000\002\033\012\000\002\033\011\000\002\033" +
    "\012\000\002\033\011\000\002\033\003\000\002\036\006" +
    "\000\002\036\004\000\002\054\003\000\002\054\002\000" +
    "\002\042\005\000\002\042\010\000\002\042\006\000\002" +
    "\045\010\000\002\045\006\000\002\045\005\000\002\045" +
    "\003\000\002\040\005\000\002\040\010\000\002\040\007" +
    "\000\002\044\010\000\002\044\005\000\002\044\007\000" +
    "\002\037\005\000\002\037\003\000\002\061\003\000\002" +
    "\061\003\000\002\056\004\000\002\056\002\000\002\020" +
    "\013\000\002\020\003\000\002\020\003\000\002\016\014" +
    "\000\002\024\004\000\002\024\004\000\002\024\005\000" +
    "\002\014\011\000\002\015\013\000\002\017\007\000\002" +
    "\027\004\000\002\027\002\000\002\030\010\000\002\030" +
    "\007\000\002\023\003\000\002\023\003\000\002\173\002" +
    "\000\002\025\007\000\002\021\011\000\002\022\012\000" +
    "\002\013\007\000\002\013\007\000\002\047\005\000\002" +
    "\047\007\000\002\047\011\000\002\047\011\000\002\047" +
    "\011\000\002\006\006\000\002\006\010\000\002\006\005" +
    "\000\002\006\007\000\002\034\015\000\002\034\017\000" +
    "\002\035\005\000\002\035\007\000\002\026\003\000\002" +
    "\026\005\000\002\050\010\000\002\050\005\000\002\050" +
    "\003\000\002\007\010\000\002\007\006\000\002\007\010" +
    "\000\002\007\013\000\002\007\011\000\002\007\014\000" +
    "\002\007\010\000\002\007\010\000\002\007\010\000\002" +
    "\010\005\000\002\010\005\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\032\004\000\002\031\004\000\002\041\004\000\002" +
    "\041\005\000\002\113\003\000\002\167\004\000\002\167" +
    "\003\000\002\132\004\000\002\132\003\000\002\134\004" +
    "\000\002\134\004\000\002\134\004\000\002\134\004\000" +
    "\002\134\004\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\134\004\000\002\134\004\000\002\134" +
    "\004\000\002\134\004\000\002\134\003\000\002\147\010" +
    "\000\002\147\012\000\002\145\003\000\002\145\003\000" +
    "\002\145\003\000\002\145\003\000\002\145\003\000\002" +
    "\145\003\000\002\145\003\000\002\155\005\000\002\155" +
    "\003\000\002\136\006\000\002\146\006\000\002\154\005" +
    "\000\002\154\003\000\002\133\004\000\002\133\003\000" +
    "\002\163\006\000\002\163\006\000\002\163\016\000\002" +
    "\163\004\000\002\163\003\000\002\157\005\000\002\157" +
    "\003\000\002\137\005\000\002\141\003\000\002\141\003" +
    "\000\002\141\003\000\002\141\003\000\002\141\003\000" +
    "\002\135\005\000\002\135\005\000\002\135\005\000\002" +
    "\135\005\000\002\135\005\000\002\135\003\000\002\135" +
    "\003\000\002\135\003\000\002\135\003\000\002\135\003" +
    "\000\002\135\005\000\002\135\005\000\002\135\005\000" +
    "\002\135\005\000\002\135\005\000\002\135\005\000\002" +
    "\135\005\000\002\135\005\000\002\135\005\000\002\135" +
    "\004\000\002\135\006\000\002\135\006\000\002\135\006" +
    "\000\002\162\013\000\002\160\004\000\002\160\003\000" +
    "\002\161\005\000\002\143\012\000\002\156\006\000\002" +
    "\156\003\000\002\142\010\000\002\144\011\000\002\151" +
    "\003\000\002\150\003\000\002\140\016\000\002\164\010" +
    "\000\002\165\014\000\002\165\013\000\002\165\012\000" +
    "\002\165\011\000\002\170\003\000\002\170\002\000\002" +
    "\166\004\000\002\171\006\000\002\152\005\000\002\152" +
    "\003\000\002\153\005\000\002\153\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03c4\000\036\002\ufff9\003\021\052\ufff6\053\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\071\ufff6\100\013\104\006\111\004" +
    "\124\012\126\ufff6\135\005\001\002\000\004\011\u03bc\001" +
    "\002\000\012\131\u03bb\132\u03b9\133\u03b8\134\u03ba\001\002" +
    "\000\004\011\u03af\001\002\000\004\002\000\001\002\000" +
    "\032\002\ufff9\003\021\052\ufff6\053\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\071\ufff6\100\013\104\006\126\ufff6\135\005\001" +
    "\002\000\036\002\ufee1\003\ufee1\052\ufee1\053\ufee1\055\ufee1" +
    "\056\ufee1\057\ufee1\071\ufee1\100\ufee1\104\ufee1\111\ufee1\124" +
    "\ufee1\126\ufee1\135\ufee1\001\002\000\004\011\u02df\001\002" +
    "\000\004\104\u013b\001\002\000\030\002\uff84\052\uff84\053" +
    "\uff84\055\uff84\056\uff84\057\uff84\071\uff84\100\uff84\104\uff84" +
    "\126\uff84\135\uff84\001\002\000\022\052\ufff6\053\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\071\ufff6\126\ufff6\135\005\001\002" +
    "\000\030\002\ufff9\052\ufff6\053\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\071\ufff6\100\013\104\006\126\ufff6\135\005\001\002" +
    "\000\022\052\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6\071" +
    "\ufff6\126\ufff6\135\005\001\002\000\020\052\uffea\053\uffea" +
    "\055\uffea\056\uffea\057\uffea\071\uffea\126\uffea\001\002\000" +
    "\004\002\ufffb\001\002\000\036\002\ufee3\003\ufee3\052\ufee3" +
    "\053\ufee3\055\ufee3\056\ufee3\057\ufee3\071\ufee3\100\ufee3\104" +
    "\ufee3\111\004\124\012\126\ufee3\135\ufee3\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\026\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\001\001\002\000\036\002\ufee2" +
    "\003\ufee2\052\ufee2\053\ufee2\055\ufee2\056\ufee2\057\ufee2\071" +
    "\ufee2\100\ufee2\104\ufee2\111\ufee2\124\ufee2\126\ufee2\135\ufee2" +
    "\001\002\000\020\052\032\053\037\055\043\056\036\057" +
    "\035\071\044\126\033\001\002\000\020\052\uffeb\053\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\071\uffeb\126\uffeb\001\002\000" +
    "\004\011\uffe6\001\002\000\004\074\u012d\001\002\000\020" +
    "\052\uffec\053\uffec\055\uffec\056\uffec\057\uffec\071\uffec\126" +
    "\uffec\001\002\000\004\103\164\001\002\000\004\011\uffe3" +
    "\001\002\000\004\011\uffe4\001\002\000\004\011\157\001" +
    "\002\000\020\052\uffed\053\uffed\055\uffed\056\uffed\057\uffed" +
    "\071\uffed\126\uffed\001\002\000\004\002\ufffa\001\002\000" +
    "\004\011\uffe5\001\002\000\012\052\032\053\037\055\043" +
    "\056\036\001\002\000\004\011\046\001\002\000\004\026" +
    "\047\001\002\000\030\004\050\006\056\007\055\010\052" +
    "\011\060\013\051\043\063\060\054\125\064\126\053\130" +
    "\057\001\002\000\050\012\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024" +
    "\uff8a\025\uff8a\040\uff8a\041\uff8a\061\uff8a\064\uff8a\065\uff8a" +
    "\067\uff8a\072\uff8a\001\002\000\030\004\050\006\056\007" +
    "\055\010\052\011\060\013\051\043\063\060\054\125\064" +
    "\126\053\130\057\001\002\000\050\012\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\040\uff8b\041\uff8b\061\uff8b\064" +
    "\uff8b\065\uff8b\067\uff8b\072\uff8b\001\002\000\004\074\147" +
    "\001\002\000\030\004\050\006\056\007\055\010\052\011" +
    "\060\013\051\043\063\060\054\125\064\126\053\130\057" +
    "\001\002\000\050\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\040\uff8d\041\uff8d\061\uff8d\064\uff8d\065\uff8d\067" +
    "\uff8d\072\uff8d\001\002\000\050\012\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\025\uff8c\040\uff8c\041\uff8c\061\uff8c\064\uff8c" +
    "\065\uff8c\067\uff8c\072\uff8c\001\002\000\004\060\142\001" +
    "\002\000\052\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\040\uff89\041\uff89\061\uff89\064\uff89\065\uff89\066\134" +
    "\067\uff89\072\uff89\001\002\000\050\012\uff85\013\uff85\014" +
    "\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\025\uff85\040\uff85\041\uff85\061\uff85\064" +
    "\uff85\065\uff85\067\uff85\072\uff85\001\002\000\040\012\100" +
    "\013\074\014\105\015\102\016\101\017\075\020\076\021" +
    "\104\022\103\023\106\024\107\025\077\040\110\041\073" +
    "\064\133\001\002\000\030\004\050\006\056\007\055\010" +
    "\052\011\060\013\051\043\063\060\054\125\064\126\053" +
    "\130\057\001\002\000\004\074\065\001\002\000\004\011" +
    "\066\001\002\000\004\060\067\001\002\000\032\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\061\uffa3\125\064\126\053\130\057\001\002\000\006" +
    "\061\uffa4\072\130\001\002\000\004\061\127\001\002\000" +
    "\042\012\100\013\074\014\105\015\102\016\101\017\075" +
    "\020\076\021\104\022\103\023\106\024\107\025\077\040" +
    "\110\041\073\061\uffa5\072\uffa5\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\030\004\050" +
    "\006\056\007\055\010\052\011\060\013\051\043\063\060" +
    "\054\125\064\126\053\130\057\001\002\000\050\012\100" +
    "\013\074\014\105\015\102\016\101\017\075\020\076\021" +
    "\104\022\103\023\106\024\107\025\077\040\uff8f\041\073" +
    "\061\uff8f\064\uff8f\065\uff8f\067\uff8f\072\uff8f\001\002\000" +
    "\050\012\100\013\074\014\105\015\102\016\101\017\075" +
    "\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\040" +
    "\uff96\041\uff96\061\uff96\064\uff96\065\uff96\067\uff96\072\uff96" +
    "\001\002\000\050\012\100\013\074\014\105\015\102\016" +
    "\101\017\075\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\025\uff93\040\uff93\041\uff93\061\uff93\064\uff93\065\uff93\067" +
    "\uff93\072\uff93\001\002\000\050\012\uff99\013\uff99\014\uff99" +
    "\015\uff99\016\101\017\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\040\uff99\041\uff99\061\uff99\064\uff99" +
    "\065\uff99\067\uff99\072\uff99\001\002\000\050\012\100\013" +
    "\074\014\105\015\102\016\101\017\075\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\040\uff94\041\uff94\061" +
    "\uff94\064\uff94\065\uff94\067\uff94\072\uff94\001\002\000\050" +
    "\012\100\013\074\014\105\015\102\016\101\017\075\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\040\uff91" +
    "\041\uff91\061\uff91\064\uff91\065\uff91\067\uff91\072\uff91\001" +
    "\002\000\050\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\101" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\040\uff9a\041\uff9a\061\uff9a\064\uff9a\065\uff9a\067\uff9a" +
    "\072\uff9a\001\002\000\046\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\040\uff97\041\uff97\061\uff97\064\uff97\065\uff97\067" +
    "\uff97\072\uff97\001\002\000\050\012\uff9c\013\uff9c\014\105" +
    "\015\102\016\101\017\075\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\025\uff9c\040\uff9c\041\uff9c\061\uff9c\064\uff9c" +
    "\065\uff9c\067\uff9c\072\uff9c\001\002\000\050\012\100\013" +
    "\074\014\105\015\102\016\101\017\075\020\uff95\021\uff95" +
    "\022\uff95\023\uff95\024\uff95\025\uff95\040\uff95\041\uff95\061" +
    "\uff95\064\uff95\065\uff95\067\uff95\072\uff95\001\002\000\050" +
    "\012\100\013\074\014\105\015\102\016\101\017\075\020" +
    "\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\040\uff92" +
    "\041\uff92\061\uff92\064\uff92\065\uff92\067\uff92\072\uff92\001" +
    "\002\000\050\012\uff98\013\uff98\014\uff98\015\uff98\016\101" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\040\uff98\041\uff98\061\uff98\064\uff98\065\uff98\067\uff98" +
    "\072\uff98\001\002\000\050\012\uff9b\013\uff9b\014\105\015" +
    "\102\016\101\017\075\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\040\uff9b\041\uff9b\061\uff9b\064\uff9b\065" +
    "\uff9b\067\uff9b\072\uff9b\001\002\000\050\012\100\013\074" +
    "\014\105\015\102\016\101\017\075\020\076\021\104\022" +
    "\103\023\106\024\107\025\077\040\uff90\041\uff90\061\uff90" +
    "\064\uff90\065\uff90\067\uff90\072\uff90\001\002\000\050\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\040\uffa0\041" +
    "\uffa0\061\uffa0\064\uffa0\065\uffa0\067\uffa0\072\uffa0\001\002" +
    "\000\030\004\050\006\056\007\055\010\052\011\060\013" +
    "\051\043\063\060\054\125\064\126\053\130\057\001\002" +
    "\000\042\012\100\013\074\014\105\015\102\016\101\017" +
    "\075\020\076\021\104\022\103\023\106\024\107\025\077" +
    "\040\110\041\073\061\uffa6\072\uffa6\001\002\000\050\012" +
    "\100\013\074\014\105\015\102\016\101\017\075\020\076" +
    "\021\104\022\103\023\106\024\107\025\077\040\uff9d\041" +
    "\uff9d\061\uff9d\064\uff9d\065\uff9d\067\uff9d\072\uff9d\001\002" +
    "\000\020\052\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1\071" +
    "\ufff1\126\ufff1\001\002\000\030\004\050\006\056\007\055" +
    "\010\052\011\060\013\051\043\063\060\054\125\064\126" +
    "\053\130\057\001\002\000\040\012\100\013\074\014\105" +
    "\015\102\016\101\017\075\020\076\021\104\022\103\023" +
    "\106\024\107\025\077\040\110\041\073\067\136\001\002" +
    "\000\052\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88" +
    "\040\uff88\041\uff88\061\uff88\064\uff88\065\uff88\066\137\067" +
    "\uff88\072\uff88\001\002\000\030\004\050\006\056\007\055" +
    "\010\052\011\060\013\051\043\063\060\054\125\064\126" +
    "\053\130\057\001\002\000\040\012\100\013\074\014\105" +
    "\015\102\016\101\017\075\020\076\021\104\022\103\023" +
    "\106\024\107\025\077\040\110\041\073\067\141\001\002" +
    "\000\050\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\040\uff87\041\uff87\061\uff87\064\uff87\065\uff87\067\uff87\072" +
    "\uff87\001\002\000\004\061\143\001\002\000\004\064\144" +
    "\001\002\000\050\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\025\uff86\040\uff86\041\uff86\061\uff86\064\uff86\065\uff86\067" +
    "\uff86\072\uff86\001\002\000\040\012\100\013\074\014\105" +
    "\015\102\016\101\017\075\020\076\021\104\022\103\023" +
    "\106\024\107\025\077\040\110\041\073\061\146\001\002" +
    "\000\050\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017" +
    "\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e" +
    "\040\uff8e\041\uff8e\061\uff8e\064\uff8e\065\uff8e\067\uff8e\072" +
    "\uff8e\001\002\000\004\011\150\001\002\000\004\074\151" +
    "\001\002\000\004\011\152\001\002\000\004\060\153\001" +
    "\002\000\032\004\050\006\056\007\055\010\052\011\060" +
    "\013\051\043\063\060\054\061\uffa3\125\064\126\053\130" +
    "\057\001\002\000\004\061\155\001\002\000\050\012\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\040\uff9f\041\uff9f" +
    "\061\uff9f\064\uff9f\065\uff9f\067\uff9f\072\uff9f\001\002\000" +
    "\050\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\040" +
    "\uff9e\041\uff9e\061\uff9e\064\uff9e\065\uff9e\067\uff9e\072\uff9e" +
    "\001\002\000\006\026\160\064\161\001\002\000\030\004" +
    "\050\006\056\007\055\010\052\011\060\013\051\043\063" +
    "\060\054\125\064\126\053\130\057\001\002\000\020\052" +
    "\uffef\053\uffef\055\uffef\056\uffef\057\uffef\071\uffef\126\uffef" +
    "\001\002\000\040\012\100\013\074\014\105\015\102\016" +
    "\101\017\075\020\076\021\104\022\103\023\106\024\107" +
    "\025\077\040\110\041\073\064\163\001\002\000\020\052" +
    "\ufff0\053\ufff0\055\ufff0\056\ufff0\057\ufff0\071\ufff0\126\ufff0" +
    "\001\002\000\004\060\165\001\002\000\004\061\166\001" +
    "\002\000\004\062\167\001\002\000\042\003\170\011\uffe7" +
    "\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\051\uffe7\063\uffe7\125\uffe7\126\uffe7\130\uffe7\142\uffe7" +
    "\144\uffe7\001\002\000\004\064\u012c\001\002\000\040\011" +
    "\203\027\204\030\201\032\217\033\207\034\200\035\175" +
    "\036\172\051\213\063\222\125\212\126\216\130\215\142" +
    "\220\144\211\001\002\000\004\064\u012b\001\002\000\040" +
    "\011\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\051\uffd1\063\uffd1\125\uffd1\126\uffd1\130\uffd1" +
    "\142\uffd1\144\uffd1\001\002\000\040\011\uffd3\027\uffd3\030" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\051\uffd3" +
    "\063\uffd3\125\uffd3\126\uffd3\130\uffd3\142\uffd3\144\uffd3\001" +
    "\002\000\004\060\u0125\001\002\000\040\011\uffe9\027\uffe9" +
    "\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\051" +
    "\uffe9\063\uffe9\125\uffe9\126\uffe9\130\uffe9\142\uffe9\144\uffe9" +
    "\001\002\000\040\011\uffb7\027\uffb7\030\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\051\uffb7\063\uffb7\125\uffb7" +
    "\126\uffb7\130\uffb7\142\uffb7\144\uffb7\001\002\000\004\060" +
    "\374\001\002\000\004\060\357\001\002\000\040\011\uffce" +
    "\027\uffce\030\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\051\uffce\063\uffce\125\uffce\126\uffce\130\uffce\142\uffce" +
    "\144\uffce\001\002\000\004\026\354\001\002\000\004\062" +
    "\344\001\002\000\040\011\uffd5\027\uffd5\030\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\051\uffd5\063\uffd5\125" +
    "\uffd5\126\uffd5\130\uffd5\142\uffd5\144\uffd5\001\002\000\040" +
    "\011\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\051\uffcc\063\uffcc\125\uffcc\126\uffcc\130\uffcc" +
    "\142\uffcc\144\uffcc\001\002\000\004\064\343\001\002\000" +
    "\040\011\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\051\uffd6\063\uffd6\125\uffd6\126\uffd6\130" +
    "\uffd6\142\uffd6\144\uffd6\001\002\000\004\060\340\001\002" +
    "\000\004\074\332\001\002\000\004\060\315\001\002\000" +
    "\040\011\uffb6\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\051\uffb6\063\uffb6\125\uffb6\126\uffb6\130" +
    "\uffb6\142\uffb6\144\uffb6\001\002\000\004\060\312\001\002" +
    "\000\004\074\302\001\002\000\004\060\256\001\002\000" +
    "\004\060\225\001\002\000\040\011\uffd4\027\uffd4\030\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\051\uffd4\063" +
    "\uffd4\125\uffd4\126\uffd4\130\uffd4\142\uffd4\144\uffd4\001\002" +
    "\000\004\002\uffee\001\002\000\040\011\uffd2\027\uffd2\030" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\051\uffd2" +
    "\063\uffd2\125\uffd2\126\uffd2\130\uffd2\142\uffd2\144\uffd2\001" +
    "\002\000\040\011\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\051\uffcd\063\uffcd\125\uffcd\126" +
    "\uffcd\130\uffcd\142\uffcd\144\uffcd\001\002\000\012\136\230" +
    "\137\231\140\227\141\226\001\002\000\004\072\251\001" +
    "\002\000\004\072\244\001\002\000\004\072\237\001\002" +
    "\000\004\072\232\001\002\000\004\143\233\001\002\000" +
    "\004\011\234\001\002\000\004\061\235\001\002\000\004" +
    "\064\236\001\002\000\040\011\uffdd\027\uffdd\030\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\051\uffdd\063\uffdd" +
    "\125\uffdd\126\uffdd\130\uffdd\142\uffdd\144\uffdd\001\002\000" +
    "\004\143\240\001\002\000\004\011\241\001\002\000\004" +
    "\061\242\001\002\000\004\064\243\001\002\000\040\011" +
    "\uffde\027\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\051\uffde\063\uffde\125\uffde\126\uffde\130\uffde\142" +
    "\uffde\144\uffde\001\002\000\004\143\245\001\002\000\004" +
    "\011\246\001\002\000\004\061\247\001\002\000\004\064" +
    "\250\001\002\000\040\011\uffdc\027\uffdc\030\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\051\uffdc\063\uffdc\125" +
    "\uffdc\126\uffdc\130\uffdc\142\uffdc\144\uffdc\001\002\000\004" +
    "\143\252\001\002\000\004\011\253\001\002\000\004\061" +
    "\254\001\002\000\004\064\255\001\002\000\040\011\uffdb" +
    "\027\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\051\uffdb\063\uffdb\125\uffdb\126\uffdb\130\uffdb\142\uffdb" +
    "\144\uffdb\001\002\000\014\011\203\052\032\053\037\055" +
    "\043\056\036\001\002\000\030\004\050\006\056\007\055" +
    "\010\052\011\060\013\051\043\063\060\054\125\064\126" +
    "\053\130\057\001\002\000\030\004\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\013\uffad\043\uffad\060\uffad\125\uffad\126" +
    "\uffad\130\uffad\001\002\000\004\011\262\001\002\000\004" +
    "\026\263\001\002\000\030\004\050\006\056\007\055\010" +
    "\052\011\060\013\051\043\063\060\054\125\064\126\053" +
    "\130\057\001\002\000\040\012\100\013\074\014\105\015" +
    "\102\016\101\017\075\020\076\021\104\022\103\023\106" +
    "\024\107\025\077\040\110\041\073\064\265\001\002\000" +
    "\030\004\uffac\006\uffac\007\uffac\010\uffac\011\uffac\013\uffac" +
    "\043\uffac\060\uffac\125\uffac\126\uffac\130\uffac\001\002\000" +
    "\040\012\100\013\074\014\105\015\102\016\101\017\075" +
    "\020\076\021\104\022\103\023\106\024\107\025\077\040" +
    "\110\041\073\064\267\001\002\000\004\011\271\001\002" +
    "\000\004\061\276\001\002\000\010\026\272\046\274\047" +
    "\273\001\002\000\030\004\050\006\056\007\055\010\052" +
    "\011\060\013\051\043\063\060\054\125\064\126\053\130" +
    "\057\001\002\000\004\061\uffaf\001\002\000\004\061\uffb0" +
    "\001\002\000\040\012\100\013\074\014\105\015\102\016" +
    "\101\017\075\020\076\021\104\022\103\023\106\024\107" +
    "\025\077\040\110\041\073\061\uffae\001\002\000\004\062" +
    "\277\001\002\000\042\003\170\011\uffe7\027\uffe7\030\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\051\uffe7\063" +
    "\uffe7\125\uffe7\126\uffe7\130\uffe7\142\uffe7\144\uffe7\001\002" +
    "\000\040\011\203\027\204\030\201\032\217\033\207\034" +
    "\200\035\175\036\172\051\213\063\301\125\212\126\216" +
    "\130\215\142\220\144\211\001\002\000\040\011\uffb1\027" +
    "\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\051\uffb1\063\uffb1\125\uffb1\126\uffb1\130\uffb1\142\uffb1\144" +
    "\uffb1\001\002\000\004\011\303\001\002\000\004\074\304" +
    "\001\002\000\004\011\305\001\002\000\004\060\306\001" +
    "\002\000\032\004\050\006\056\007\055\010\052\011\060" +
    "\013\051\043\063\060\054\061\uffa3\125\064\126\053\130" +
    "\057\001\002\000\004\061\310\001\002\000\004\064\311" +
    "\001\002\000\040\011\uffa1\027\uffa1\030\uffa1\032\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\051\uffa1\063\uffa1\125\uffa1" +
    "\126\uffa1\130\uffa1\142\uffa1\144\uffa1\001\002\000\004\061" +
    "\313\001\002\000\004\064\314\001\002\000\040\011\uffd7" +
    "\027\uffd7\030\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\051\uffd7\063\uffd7\125\uffd7\126\uffd7\130\uffd7\142\uffd7" +
    "\144\uffd7\001\002\000\006\004\317\061\316\001\002\000" +
    "\004\064\331\001\002\000\006\061\322\072\321\001\002" +
    "\000\006\061\326\072\325\001\002\000\004\011\324\001" +
    "\002\000\004\064\323\001\002\000\040\011\uffe2\027\uffe2" +
    "\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\051" +
    "\uffe2\063\uffe2\125\uffe2\126\uffe2\130\uffe2\142\uffe2\144\uffe2" +
    "\001\002\000\006\061\uffe0\072\uffe0\001\002\000\004\011" +
    "\330\001\002\000\004\064\327\001\002\000\040\011\uffe1" +
    "\027\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\051\uffe1\063\uffe1\125\uffe1\126\uffe1\130\uffe1\142\uffe1" +
    "\144\uffe1\001\002\000\006\061\uffdf\072\uffdf\001\002\000" +
    "\040\011\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\051\uffd9\063\uffd9\125\uffd9\126\uffd9\130" +
    "\uffd9\142\uffd9\144\uffd9\001\002\000\004\011\333\001\002" +
    "\000\004\060\334\001\002\000\032\004\050\006\056\007" +
    "\055\010\052\011\060\013\051\043\063\060\054\061\uffa3" +
    "\125\064\126\053\130\057\001\002\000\004\061\336\001" +
    "\002\000\004\064\337\001\002\000\040\011\uffa2\027\uffa2" +
    "\030\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\051" +
    "\uffa2\063\uffa2\125\uffa2\126\uffa2\130\uffa2\142\uffa2\144\uffa2" +
    "\001\002\000\004\061\341\001\002\000\004\064\342\001" +
    "\002\000\040\011\uffd8\027\uffd8\030\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\051\uffd8\063\uffd8\125\uffd8\126" +
    "\uffd8\130\uffd8\142\uffd8\144\uffd8\001\002\000\040\011\uffd0" +
    "\027\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\051\uffd0\063\uffd0\125\uffd0\126\uffd0\130\uffd0\142\uffd0" +
    "\144\uffd0\001\002\000\042\003\170\011\uffe7\027\uffe7\030" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\051\uffe7" +
    "\063\uffe7\125\uffe7\126\uffe7\130\uffe7\142\uffe7\144\uffe7\001" +
    "\002\000\040\011\203\027\204\030\201\032\217\033\207" +
    "\034\200\035\175\036\172\051\213\063\346\125\212\126" +
    "\216\130\215\142\220\144\211\001\002\000\004\035\347" +
    "\001\002\000\004\060\350\001\002\000\030\004\050\006" +
    "\056\007\055\010\052\011\060\013\051\043\063\060\054" +
    "\125\064\126\053\130\057\001\002\000\040\012\100\013" +
    "\074\014\105\015\102\016\101\017\075\020\076\021\104" +
    "\022\103\023\106\024\107\025\077\040\110\041\073\061" +
    "\352\001\002\000\004\064\353\001\002\000\040\011\uffb9" +
    "\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\051\uffb9\063\uffb9\125\uffb9\126\uffb9\130\uffb9\142\uffb9" +
    "\144\uffb9\001\002\000\030\004\050\006\056\007\055\010" +
    "\052\011\060\013\051\043\063\060\054\125\064\126\053" +
    "\130\057\001\002\000\040\012\100\013\074\014\105\015" +
    "\102\016\101\017\075\020\076\021\104\022\103\023\106" +
    "\024\107\025\077\040\110\041\073\064\356\001\002\000" +
    "\056\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda" +
    "\027\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\043\uffda\051\uffda\060\uffda\063\uffda\125\uffda\126\uffda" +
    "\130\uffda\142\uffda\144\uffda\001\002\000\030\004\050\006" +
    "\056\007\055\010\052\011\060\013\051\043\063\060\054" +
    "\125\064\126\053\130\057\001\002\000\040\012\100\013" +
    "\074\014\105\015\102\016\101\017\075\020\076\021\104" +
    "\022\103\023\106\024\107\025\077\040\110\041\073\061" +
    "\361\001\002\000\004\062\362\001\002\000\042\003\170" +
    "\011\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\051\uffe7\063\uffe7\125\uffe7\126\uffe7\130\uffe7" +
    "\142\uffe7\144\uffe7\001\002\000\040\011\203\027\204\030" +
    "\201\032\217\033\207\034\200\035\175\036\172\051\213" +
    "\063\364\125\212\126\216\130\215\142\220\144\211\001" +
    "\002\000\042\011\uffb3\027\uffb3\030\uffb3\031\365\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\051\uffb3\063\uffb3\125" +
    "\uffb3\126\uffb3\130\uffb3\142\uffb3\144\uffb3\001\002\000\006" +
    "\030\201\062\367\001\002\000\040\011\uffb2\027\uffb2\030" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\051\uffb2" +
    "\063\uffb2\125\uffb2\126\uffb2\130\uffb2\142\uffb2\144\uffb2\001" +
    "\002\000\042\003\170\011\uffe7\027\uffe7\030\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\051\uffe7\063\uffe7\125" +
    "\uffe7\126\uffe7\130\uffe7\142\uffe7\144\uffe7\001\002\000\040" +
    "\011\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\051\uffb8\063\uffb8\125\uffb8\126\uffb8\130\uffb8" +
    "\142\uffb8\144\uffb8\001\002\000\040\011\203\027\204\030" +
    "\201\032\217\033\207\034\200\035\175\036\172\051\213" +
    "\063\uffb5\125\212\126\216\130\215\142\220\144\211\001" +
    "\002\000\004\063\373\001\002\000\040\011\uffb4\027\uffb4" +
    "\030\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\051" +
    "\uffb4\063\uffb4\125\uffb4\126\uffb4\130\uffb4\142\uffb4\144\uffb4" +
    "\001\002\000\004\011\375\001\002\000\004\061\376\001" +
    "\002\000\004\062\377\001\002\000\010\037\uffa9\063\uffa9" +
    "\127\uffa9\001\002\000\010\037\u0101\063\u0102\127\u0103\001" +
    "\002\000\004\065\u0121\001\002\000\040\011\uffab\027\uffab" +
    "\030\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\051" +
    "\uffab\063\uffab\125\uffab\126\uffab\130\uffab\142\uffab\144\uffab" +
    "\001\002\000\030\004\050\006\056\007\055\010\052\011" +
    "\060\013\051\043\063\060\054\125\064\126\053\130\057" +
    "\001\002\000\010\037\uffaa\063\uffaa\127\uffaa\001\002\000" +
    "\040\012\100\013\074\014\105\015\102\016\101\017\075" +
    "\020\076\021\104\022\103\023\106\024\107\025\077\040" +
    "\110\041\073\065\u0106\001\002\000\034\011\203\027\204" +
    "\030\201\032\217\033\uffbe\034\200\035\175\051\u010f\125" +
    "\212\126\216\130\u0110\142\220\144\u010e\001\002\000\034" +
    "\011\uffc3\027\uffc3\030\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\051\uffc3\125\uffc3\126\uffc3\130\uffc3\142\uffc3\144\uffc3" +
    "\001\002\000\034\011\uffc5\027\uffc5\030\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\051\uffc5\125\uffc5\126\uffc5\130\uffc5" +
    "\142\uffc5\144\uffc5\001\002\000\034\011\203\027\204\030" +
    "\201\032\217\033\uffbe\034\200\035\175\051\u010f\125\212" +
    "\126\216\130\u0110\142\220\144\u010e\001\002\000\034\011" +
    "\uffc2\027\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\051\uffc2\125\uffc2\126\uffc2\130\uffc2\142\uffc2\144\uffc2\001" +
    "\002\000\034\011\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\051\uffc7\125\uffc7\126\uffc7\130\uffc7\142" +
    "\uffc7\144\uffc7\001\002\000\034\011\uffc0\027\uffc0\030\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\051\uffc0\125\uffc0\126" +
    "\uffc0\130\uffc0\142\uffc0\144\uffc0\001\002\000\034\011\uffc8" +
    "\027\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\051" +
    "\uffc8\125\uffc8\126\uffc8\130\uffc8\142\uffc8\144\uffc8\001\002" +
    "\000\004\060\u011d\001\002\000\004\060\u011a\001\002\000" +
    "\004\060\u0117\001\002\000\004\033\u0115\001\002\000\034" +
    "\011\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\051\uffc6\125\uffc6\126\uffc6\130\uffc6\142\uffc6\144\uffc6" +
    "\001\002\000\034\011\uffc4\027\uffc4\030\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\051\uffc4\125\uffc4\126\uffc4\130\uffc4" +
    "\142\uffc4\144\uffc4\001\002\000\034\011\uffc1\027\uffc1\030" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\051\uffc1\125\uffc1" +
    "\126\uffc1\130\uffc1\142\uffc1\144\uffc1\001\002\000\004\064" +
    "\u0116\001\002\000\010\037\uffa8\063\uffa8\127\uffa8\001\002" +
    "\000\004\061\u0118\001\002\000\004\064\u0119\001\002\000" +
    "\034\011\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\051\uffc9\125\uffc9\126\uffc9\130\uffc9\142\uffc9\144" +
    "\uffc9\001\002\000\006\004\317\061\u011b\001\002\000\004" +
    "\064\u011c\001\002\000\034\011\uffcb\027\uffcb\030\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\051\uffcb\125\uffcb\126\uffcb" +
    "\130\uffcb\142\uffcb\144\uffcb\001\002\000\004\061\u011e\001" +
    "\002\000\004\064\u011f\001\002\000\034\011\uffca\027\uffca" +
    "\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\051\uffca\125" +
    "\uffca\126\uffca\130\uffca\142\uffca\144\uffca\001\002\000\004" +
    "\033\uffbf\001\002\000\034\011\203\027\204\030\201\032" +
    "\217\033\uffbe\034\200\035\175\051\u010f\125\212\126\216" +
    "\130\u0110\142\220\144\u010e\001\002\000\004\033\u0123\001" +
    "\002\000\004\064\u0124\001\002\000\010\037\uffa7\063\uffa7" +
    "\127\uffa7\001\002\000\030\004\050\006\056\007\055\010" +
    "\052\011\060\013\051\043\063\060\054\125\064\126\053" +
    "\130\057\001\002\000\040\012\100\013\074\014\105\015" +
    "\102\016\101\017\075\020\076\021\104\022\103\023\106" +
    "\024\107\025\077\040\110\041\073\061\u0127\001\002\000" +
    "\004\062\u0128\001\002\000\042\003\170\011\uffe7\027\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\051" +
    "\uffe7\063\uffe7\125\uffe7\126\uffe7\130\uffe7\142\uffe7\144\uffe7" +
    "\001\002\000\040\011\203\027\204\030\201\032\217\033" +
    "\207\034\200\035\175\036\172\051\213\063\u012a\125\212" +
    "\126\216\130\215\142\220\144\211\001\002\000\040\011" +
    "\uffba\027\uffba\030\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\036\uffba\051\uffba\063\uffba\125\uffba\126\uffba\130\uffba\142" +
    "\uffba\144\uffba\001\002\000\040\011\uffcf\027\uffcf\030\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\051\uffcf\063" +
    "\uffcf\125\uffcf\126\uffcf\130\uffcf\142\uffcf\144\uffcf\001\002" +
    "\000\040\011\uffe8\027\uffe8\030\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\051\uffe8\063\uffe8\125\uffe8\126\uffe8" +
    "\130\uffe8\142\uffe8\144\uffe8\001\002\000\004\011\u012e\001" +
    "\002\000\004\011\u012f\001\002\000\004\060\u0131\001\002" +
    "\000\020\052\uffbd\053\uffbd\055\uffbd\056\uffbd\057\uffbd\071" +
    "\uffbd\126\uffbd\001\002\000\032\004\050\006\056\007\055" +
    "\010\052\011\060\013\051\043\063\060\054\061\uffa3\125" +
    "\064\126\053\130\057\001\002\000\004\061\u0133\001\002" +
    "\000\006\064\u0135\072\u0134\001\002\000\004\011\u012f\001" +
    "\002\000\020\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\071\uffbb\126\uffbb\001\002\000\020\052\uffbc\053\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\071\uffbc\126\uffbc\001\002\000\020" +
    "\052\ufff7\053\ufff7\055\ufff7\056\ufff7\057\ufff7\071\ufff7\126" +
    "\ufff7\001\002\000\004\002\ufffd\001\002\000\030\002\uff83" +
    "\052\uff83\053\uff83\055\uff83\056\uff83\057\uff83\071\uff83\100" +
    "\uff83\104\uff83\126\uff83\135\uff83\001\002\000\020\052\ufff8" +
    "\053\ufff8\055\ufff8\056\ufff8\057\ufff8\071\ufff8\126\ufff8\001" +
    "\002\000\004\011\u013c\001\002\000\006\062\u013d\101\u013e" +
    "\001\002\000\030\011\u014b\052\u0141\053\u014a\054\u0146\055" +
    "\u0151\056\u0149\057\u0147\063\uff74\076\u0148\077\u014c\100\u0143" +
    "\001\002\000\004\011\u013f\001\002\000\004\062\u0140\001" +
    "\002\000\026\011\u014b\052\u0141\053\u014a\054\u0146\055\u0151" +
    "\056\u0149\057\u0147\076\u0148\077\u014c\100\u0143\001\002\000" +
    "\006\011\ufeec\066\ufeec\001\002\000\030\011\u014b\052\u0141" +
    "\053\u014a\054\u0146\055\u0151\056\u0149\057\u0147\063\u02da\076" +
    "\u0148\077\u014c\100\u0143\001\002\000\020\011\uff7c\052\uff7c" +
    "\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\001\002\000" +
    "\030\011\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70" +
    "\057\uff70\063\uff70\076\uff70\077\uff70\100\uff70\001\002\000" +
    "\030\011\uff3a\052\uff3a\053\uff3a\054\uff3a\055\uff3a\056\uff3a" +
    "\057\uff3a\063\uff3a\076\uff3a\077\uff3a\100\uff3a\001\002\000" +
    "\006\011\ufee9\066\ufee9\001\002\000\004\011\u02cf\001\002" +
    "\000\020\011\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056" +
    "\uff7b\057\uff7b\001\002\000\006\011\ufeed\066\ufeed\001\002" +
    "\000\006\011\ufeeb\066\ufeeb\001\002\000\006\011\ufee8\060" +
    "\u02c5\001\002\000\020\011\uff7a\052\uff7a\053\uff7a\054\uff7a" +
    "\055\uff7a\056\uff7a\057\uff7a\001\002\000\030\011\uff73\052" +
    "\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\063\uff73" +
    "\076\uff73\077\uff73\100\uff73\001\002\000\020\011\u029e\052" +
    "\u0141\053\u014a\054\u0146\055\u0151\056\u0149\057\u02a0\001\002" +
    "\000\030\011\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056" +
    "\uff71\057\uff71\063\uff71\076\uff71\077\uff71\100\uff71\001\002" +
    "\000\004\011\u0152\001\002\000\006\011\ufeea\066\ufeea\001" +
    "\002\000\010\026\u0153\060\u0154\064\u0155\001\002\000\032" +
    "\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013" +
    "\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001\002" +
    "\000\020\011\u0158\052\u0141\053\u014a\054\u0146\055\u0151\056" +
    "\u0149\061\u0157\001\002\000\030\011\uff05\052\uff05\053\uff05" +
    "\054\uff05\055\uff05\056\uff05\057\uff05\063\uff05\076\uff05\077" +
    "\uff05\100\uff05\001\002\000\006\061\u0296\072\u0295\001\002" +
    "\000\004\062\u015b\001\002\000\006\011\ufee8\066\ufee8\001" +
    "\002\000\004\011\u015a\001\002\000\006\061\uff38\072\uff38" +
    "\001\002\000\052\003\uff81\011\uff81\027\uff81\030\uff81\032" +
    "\uff81\034\uff81\035\uff81\036\uff81\051\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\063\uff81\070\uff81\071\uff81\075" +
    "\uff81\102\uff81\105\uff81\001\002\000\052\003\u016d\011\u016b" +
    "\027\u017d\030\u0168\032\u0166\034\u0171\035\u0176\036\u0163\051" +
    "\u017c\052\u0141\053\u014a\054\u0146\055\u0151\056\u0149\063\u0160" +
    "\070\u017b\071\u015e\075\u016c\102\u016a\105\u0165\001\002\000" +
    "\054\003\uff63\011\uff63\027\uff63\030\uff63\032\uff63\033\uff63" +
    "\034\uff63\035\uff63\036\uff63\051\uff63\052\uff63\053\uff63\054" +
    "\uff63\055\uff63\056\uff63\063\uff63\070\uff63\071\uff63\075\uff63" +
    "\102\uff63\105\uff63\001\002\000\004\011\ufeee\001\002\000" +
    "\054\003\uff6b\011\uff6b\027\uff6b\030\uff6b\032\uff6b\033\uff6b" +
    "\034\uff6b\035\uff6b\036\uff6b\051\uff6b\052\uff6b\053\uff6b\054" +
    "\uff6b\055\uff6b\056\uff6b\063\uff6b\070\uff6b\071\uff6b\075\uff6b" +
    "\102\uff6b\105\uff6b\001\002\000\030\011\uff3b\052\uff3b\053" +
    "\uff3b\054\uff3b\055\uff3b\056\uff3b\057\uff3b\063\uff3b\076\uff3b" +
    "\077\uff3b\100\uff3b\001\002\000\054\003\uff67\011\uff67\027" +
    "\uff67\030\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036\uff67" +
    "\051\uff67\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67\063" +
    "\uff67\070\uff67\071\uff67\075\uff67\102\uff67\105\uff67\001\002" +
    "\000\054\003\uff65\011\uff65\027\uff65\030\uff65\032\uff65\033" +
    "\uff65\034\uff65\035\uff65\036\uff65\051\uff65\052\uff65\053\uff65" +
    "\054\uff65\055\uff65\056\uff65\063\uff65\070\uff65\071\uff65\075" +
    "\uff65\102\uff65\105\uff65\001\002\000\004\064\u0294\001\002" +
    "\000\054\003\uff68\011\uff68\027\uff68\030\uff68\032\uff68\033" +
    "\uff68\034\uff68\035\uff68\036\uff68\051\uff68\052\uff68\053\uff68" +
    "\054\uff68\055\uff68\056\uff68\063\uff68\070\uff68\071\uff68\075" +
    "\uff68\102\uff68\105\uff68\001\002\000\004\060\u0290\001\002" +
    "\000\004\060\u0274\001\002\000\054\003\uff66\011\uff66\027" +
    "\uff66\030\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66" +
    "\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66\056\uff66\063" +
    "\uff66\070\uff66\071\uff66\075\uff66\102\uff66\105\uff66\001\002" +
    "\000\004\060\u0262\001\002\000\054\003\uff82\011\uff82\027" +
    "\uff82\030\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82" +
    "\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\063" +
    "\uff82\070\uff82\071\uff82\075\uff82\102\uff82\105\uff82\001\002" +
    "\000\004\074\u025d\001\002\000\020\011\ufee8\026\u021d\046" +
    "\u0220\047\u021f\060\u021e\066\u0221\074\u0222\001\002\000\034" +
    "\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013" +
    "\u0184\043\u018e\050\u018a\060\u0188\064\u021a\073\u0187\102\u018d" +
    "\001\002\000\056\003\uff61\011\uff61\027\uff61\030\uff61\032" +
    "\uff61\033\uff61\034\uff61\035\uff61\036\uff61\051\uff61\052\uff61" +
    "\053\uff61\054\uff61\055\uff61\056\uff61\063\uff61\064\u0219\070" +
    "\uff61\071\uff61\075\uff61\102\uff61\105\uff61\001\002\000\054" +
    "\003\uff64\011\uff64\027\uff64\030\uff64\032\uff64\033\uff64\034" +
    "\uff64\035\uff64\036\uff64\051\uff64\052\uff64\053\uff64\054\uff64" +
    "\055\uff64\056\uff64\063\uff64\070\uff64\071\uff64\075\uff64\102" +
    "\uff64\105\uff64\001\002\000\054\003\uff20\011\uff20\027\uff20" +
    "\030\uff20\032\uff20\033\uff20\034\uff20\035\uff20\036\uff20\051" +
    "\uff20\052\uff20\053\uff20\054\uff20\055\uff20\056\uff20\063\uff20" +
    "\070\uff20\071\uff20\075\uff20\102\uff20\105\uff20\001\002\000" +
    "\004\011\u01fe\001\002\000\032\004\u0183\005\u0186\006\u018b" +
    "\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060" +
    "\u0188\073\u0187\102\u018d\001\002\000\054\003\uff6c\011\uff6c" +
    "\027\uff6c\030\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036" +
    "\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c" +
    "\063\uff6c\070\uff6c\071\uff6c\075\uff6c\102\uff6c\105\uff6c\001" +
    "\002\000\054\003\uff69\011\uff69\027\uff69\030\uff69\032\uff69" +
    "\033\uff69\034\uff69\035\uff69\036\uff69\051\uff69\052\uff69\053" +
    "\uff69\054\uff69\055\uff69\056\uff69\063\uff69\070\uff69\071\uff69" +
    "\075\uff69\102\uff69\105\uff69\001\002\000\004\011\u01dd\001" +
    "\002\000\054\003\uff6a\011\uff6a\027\uff6a\030\uff6a\032\uff6a" +
    "\033\uff6a\034\uff6a\035\uff6a\036\uff6a\051\uff6a\052\uff6a\053" +
    "\uff6a\054\uff6a\055\uff6a\056\uff6a\063\uff6a\070\uff6a\071\uff6a" +
    "\075\uff6a\102\uff6a\105\uff6a\001\002\000\004\060\u01d7\001" +
    "\002\000\054\003\uff6d\011\uff6d\027\uff6d\030\uff6d\032\uff6d" +
    "\033\uff6d\034\uff6d\035\uff6d\036\uff6d\051\uff6d\052\uff6d\053" +
    "\uff6d\054\uff6d\055\uff6d\056\uff6d\063\uff6d\070\uff6d\071\uff6d" +
    "\075\uff6d\102\uff6d\105\uff6d\001\002\000\054\003\uff21\011" +
    "\uff21\027\uff21\030\uff21\032\uff21\033\uff21\034\uff21\035\uff21" +
    "\036\uff21\051\uff21\052\uff21\053\uff21\054\uff21\055\uff21\056" +
    "\uff21\063\uff21\070\uff21\071\uff21\075\uff21\102\uff21\105\uff21" +
    "\001\002\000\054\003\uff6f\011\uff6f\027\uff6f\030\uff6f\032" +
    "\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\051\uff6f\052\uff6f" +
    "\053\uff6f\054\uff6f\055\uff6f\056\uff6f\063\uff6f\070\uff6f\071" +
    "\uff6f\075\uff6f\102\uff6f\105\uff6f\001\002\000\054\003\uff6e" +
    "\011\uff6e\027\uff6e\030\uff6e\032\uff6e\033\uff6e\034\uff6e\035" +
    "\uff6e\036\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e" +
    "\056\uff6e\063\uff6e\070\uff6e\071\uff6e\075\uff6e\102\uff6e\105" +
    "\uff6e\001\002\000\004\011\ufeef\001\002\000\004\060\u01d3" +
    "\001\002\000\004\062\u017e\001\002\000\052\003\uff81\011" +
    "\uff81\027\uff81\030\uff81\032\uff81\034\uff81\035\uff81\036\uff81" +
    "\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\063" +
    "\uff81\070\uff81\071\uff81\075\uff81\102\uff81\105\uff81\001\002" +
    "\000\052\003\u016d\011\u016b\027\u017d\030\u0168\032\u0166\034" +
    "\u0171\035\u0176\036\u0163\051\u017c\052\u0141\053\u014a\054\u0146" +
    "\055\u0151\056\u0149\063\u0180\070\u017b\071\u015e\075\u016c\102" +
    "\u016a\105\u0165\001\002\000\004\035\u0181\001\002\000\004" +
    "\060\u0182\001\002\000\032\004\u0183\005\u0186\006\u018b\007" +
    "\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188" +
    "\073\u0187\102\u018d\001\002\000\052\012\uff4d\013\uff4d\014" +
    "\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d" +
    "\023\uff4d\024\uff4d\025\uff4d\040\uff4d\041\uff4d\061\uff4d\062" +
    "\uff4d\064\uff4d\065\uff4d\067\uff4d\072\uff4d\001\002\000\032" +
    "\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013" +
    "\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001\002" +
    "\000\052\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e\017" +
    "\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e\024\uff4e\025\uff4e" +
    "\040\uff4e\041\uff4e\061\uff4e\062\uff4e\064\uff4e\065\uff4e\067" +
    "\uff4e\072\uff4e\001\002\000\052\012\uff4b\013\uff4b\014\uff4b" +
    "\015\uff4b\016\uff4b\017\uff4b\020\uff4b\021\uff4b\022\uff4b\023" +
    "\uff4b\024\uff4b\025\uff4b\040\uff4b\041\uff4b\061\uff4b\062\uff4b" +
    "\064\uff4b\065\uff4b\067\uff4b\072\uff4b\001\002\000\004\011" +
    "\u01cd\001\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189" +
    "\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073" +
    "\u0187\102\u018d\001\002\000\052\012\uff4f\013\uff4f\014\uff4f" +
    "\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023" +
    "\uff4f\024\uff4f\025\uff4f\040\uff4f\041\uff4f\061\uff4f\062\uff4f" +
    "\064\uff4f\065\uff4f\067\uff4f\072\uff4f\001\002\000\052\012" +
    "\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a" +
    "\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\040\uff4a\041" +
    "\uff4a\061\uff4a\062\uff4a\064\uff4a\065\uff4a\067\uff4a\072\uff4a" +
    "\001\002\000\052\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016" +
    "\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c\024\uff4c" +
    "\025\uff4c\040\uff4c\041\uff4c\061\uff4c\062\uff4c\064\uff4c\065" +
    "\uff4c\067\uff4c\072\uff4c\001\002\000\060\012\uff49\013\uff49" +
    "\014\uff49\015\uff49\016\uff49\017\uff49\020\uff49\021\uff49\022" +
    "\uff49\023\uff49\024\uff49\025\uff49\040\uff49\041\uff49\060\u01b2" +
    "\061\uff49\062\uff49\064\uff49\065\uff49\066\u01b3\067\uff49\072" +
    "\uff49\074\u01b4\001\002\000\004\074\u01b0\001\002\000\032" +
    "\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013" +
    "\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001\002" +
    "\000\052\012\uff45\013\uff45\014\uff45\015\uff45\016\uff45\017" +
    "\uff45\020\uff45\021\uff45\022\uff45\023\uff45\024\uff45\025\uff45" +
    "\040\uff45\041\uff45\061\uff45\062\uff45\064\uff45\065\uff45\067" +
    "\uff45\072\uff45\001\002\000\040\012\u0196\013\u0191\014\u019c" +
    "\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023" +
    "\u019d\024\u019e\025\u0195\040\u019f\041\u0192\061\u0198\001\002" +
    "\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011" +
    "\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d" +
    "\001\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010" +
    "\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187" +
    "\102\u018d\001\002\000\032\004\u0183\005\u0186\006\u018b\007" +
    "\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188" +
    "\073\u0187\102\u018d\001\002\000\032\004\u0183\005\u0186\006" +
    "\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a" +
    "\060\u0188\073\u0187\102\u018d\001\002\000\032\004\u0183\005" +
    "\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e" +
    "\050\u018a\060\u0188\073\u0187\102\u018d\001\002\000\032\004" +
    "\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184" +
    "\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001\002\000" +
    "\032\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c" +
    "\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001" +
    "\002\000\004\064\u01a7\001\002\000\032\004\u0183\005\u0186" +
    "\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050" +
    "\u018a\060\u0188\073\u0187\102\u018d\001\002\000\032\004\u0183" +
    "\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043" +
    "\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001\002\000\032" +
    "\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013" +
    "\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001\002" +
    "\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011" +
    "\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d" +
    "\001\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010" +
    "\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187" +
    "\102\u018d\001\002\000\032\004\u0183\005\u0186\006\u018b\007" +
    "\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188" +
    "\073\u0187\102\u018d\001\002\000\032\004\u0183\005\u0186\006" +
    "\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a" +
    "\060\u0188\073\u0187\102\u018d\001\002\000\052\012\u0196\013" +
    "\u0191\014\u019c\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a" +
    "\022\u019b\023\u019d\024\u019e\025\u0195\040\uff51\041\u0192\061" +
    "\uff51\062\uff51\064\uff51\065\uff51\067\uff51\072\uff51\001\002" +
    "\000\052\012\u0196\013\u0191\014\u019c\015\u0199\016\u0197\017" +
    "\u0193\020\uff58\021\uff58\022\uff58\023\uff58\024\uff58\025\uff58" +
    "\040\uff58\041\uff58\061\uff58\062\uff58\064\uff58\065\uff58\067" +
    "\uff58\072\uff58\001\002\000\052\012\u0196\013\u0191\014\u019c" +
    "\015\u0199\016\u0197\017\u0193\020\uff55\021\uff55\022\uff55\023" +
    "\uff55\024\uff55\025\uff55\040\uff55\041\uff55\061\uff55\062\uff55" +
    "\064\uff55\065\uff55\067\uff55\072\uff55\001\002\000\052\012" +
    "\uff5b\013\uff5b\014\uff5b\015\uff5b\016\u0197\017\uff5b\020\uff5b" +
    "\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\040\uff5b\041" +
    "\uff5b\061\uff5b\062\uff5b\064\uff5b\065\uff5b\067\uff5b\072\uff5b" +
    "\001\002\000\052\012\u0196\013\u0191\014\u019c\015\u0199\016" +
    "\u0197\017\u0193\020\uff53\021\uff53\022\uff53\023\uff53\024\uff53" +
    "\025\uff53\040\uff53\041\uff53\061\uff53\062\uff53\064\uff53\065" +
    "\uff53\067\uff53\072\uff53\001\002\000\052\012\u0196\013\u0191" +
    "\014\u019c\015\u0199\016\u0197\017\u0193\020\uff56\021\uff56\022" +
    "\uff56\023\uff56\024\uff56\025\uff56\040\uff56\041\uff56\061\uff56" +
    "\062\uff56\064\uff56\065\uff56\067\uff56\072\uff56\001\002\000" +
    "\052\012\uff5c\013\uff5c\014\uff5c\015\uff5c\016\u0197\017\uff5c" +
    "\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\040" +
    "\uff5c\041\uff5c\061\uff5c\062\uff5c\064\uff5c\065\uff5c\067\uff5c" +
    "\072\uff5c\001\002\000\054\003\uff1a\011\uff1a\027\uff1a\030" +
    "\uff1a\032\uff1a\033\uff1a\034\uff1a\035\uff1a\036\uff1a\051\uff1a" +
    "\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a\063\uff1a\070" +
    "\uff1a\071\uff1a\075\uff1a\102\uff1a\105\uff1a\001\002\000\050" +
    "\012\uff59\013\uff59\014\uff59\015\uff59\017\uff59\020\uff59\021" +
    "\uff59\022\uff59\023\uff59\024\uff59\025\uff59\040\uff59\041\uff59" +
    "\061\uff59\062\uff59\064\uff59\065\uff59\067\uff59\072\uff59\001" +
    "\002\000\052\012\uff5e\013\uff5e\014\u019c\015\u0199\016\u0197" +
    "\017\u0193\020\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025" +
    "\uff5e\040\uff5e\041\uff5e\061\uff5e\062\uff5e\064\uff5e\065\uff5e" +
    "\067\uff5e\072\uff5e\001\002\000\052\012\u0196\013\u0191\014" +
    "\u019c\015\u0199\016\u0197\017\u0193\020\uff57\021\uff57\022\uff57" +
    "\023\uff57\024\uff57\025\uff57\040\uff57\041\uff57\061\uff57\062" +
    "\uff57\064\uff57\065\uff57\067\uff57\072\uff57\001\002\000\052" +
    "\012\u0196\013\u0191\014\u019c\015\u0199\016\u0197\017\u0193\020" +
    "\uff54\021\uff54\022\uff54\023\uff54\024\uff54\025\uff54\040\uff54" +
    "\041\uff54\061\uff54\062\uff54\064\uff54\065\uff54\067\uff54\072" +
    "\uff54\001\002\000\052\012\uff5a\013\uff5a\014\uff5a\015\uff5a" +
    "\016\u0197\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024" +
    "\uff5a\025\uff5a\040\uff5a\041\uff5a\061\uff5a\062\uff5a\064\uff5a" +
    "\065\uff5a\067\uff5a\072\uff5a\001\002\000\052\012\u0196\013" +
    "\u0191\014\u019c\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a" +
    "\022\u019b\023\u019d\024\u019e\025\u0195\040\uff52\041\uff52\061" +
    "\uff52\062\uff52\064\uff52\065\uff52\067\uff52\072\uff52\001\002" +
    "\000\052\012\uff5d\013\uff5d\014\u019c\015\u0199\016\u0197\017" +
    "\u0193\020\uff5d\021\uff5d\022\uff5d\023\uff5d\024\uff5d\025\uff5d" +
    "\040\uff5d\041\uff5d\061\uff5d\062\uff5d\064\uff5d\065\uff5d\067" +
    "\uff5d\072\uff5d\001\002\000\052\012\u0196\013\u0191\014\u019c" +
    "\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023" +
    "\u019d\024\u019e\025\u0195\040\uff5f\041\uff5f\061\uff5f\062\uff5f" +
    "\064\uff5f\065\uff5f\067\uff5f\072\uff5f\001\002\000\004\011" +
    "\u01b1\001\002\000\052\012\uff48\013\uff48\014\uff48\015\uff48" +
    "\016\uff48\017\uff48\020\uff48\021\uff48\022\uff48\023\uff48\024" +
    "\uff48\025\uff48\040\uff48\041\uff48\061\uff48\062\uff48\064\uff48" +
    "\065\uff48\067\uff48\072\uff48\001\002\000\034\004\u0183\005" +
    "\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e" +
    "\050\u018a\060\u0188\061\uff36\073\u0187\102\u018d\001\002\000" +
    "\032\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c" +
    "\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001" +
    "\002\000\004\011\u01b5\001\002\000\056\012\uff2f\013\uff2f" +
    "\014\uff2f\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f\022" +
    "\uff2f\023\uff2f\024\uff2f\025\uff2f\040\uff2f\041\uff2f\060\u01b7" +
    "\061\uff2f\062\uff2f\064\uff2f\065\uff2f\067\uff2f\072\uff2f\074" +
    "\u01b8\001\002\000\052\012\uff35\013\uff35\014\uff35\015\uff35" +
    "\016\uff35\017\uff35\020\uff35\021\uff35\022\uff35\023\uff35\024" +
    "\uff35\025\uff35\040\uff35\041\uff35\061\uff35\062\uff35\064\uff35" +
    "\065\uff35\067\uff35\072\uff35\001\002\000\034\004\u0183\005" +
    "\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e" +
    "\050\u018a\060\u0188\061\uff36\073\u0187\102\u018d\001\002\000" +
    "\004\011\u01b5\001\002\000\052\012\uff30\013\uff30\014\uff30" +
    "\015\uff30\016\uff30\017\uff30\020\uff30\021\uff30\022\uff30\023" +
    "\uff30\024\uff30\025\uff30\040\uff30\041\uff30\061\uff30\062\uff30" +
    "\064\uff30\065\uff30\067\uff30\072\uff30\001\002\000\006\061" +
    "\uff37\072\u01c0\001\002\000\042\012\u0196\013\u0191\014\u019c" +
    "\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023" +
    "\u019d\024\u019e\025\u0195\040\u019f\041\u0192\061\uff27\072\uff27" +
    "\001\002\000\004\061\u01bd\001\002\000\054\012\uff31\013" +
    "\uff31\014\uff31\015\uff31\016\uff31\017\uff31\020\uff31\021\uff31" +
    "\022\uff31\023\uff31\024\uff31\025\uff31\040\uff31\041\uff31\061" +
    "\uff31\062\uff31\064\uff31\065\uff31\067\uff31\072\uff31\074\u01be" +
    "\001\002\000\004\011\u01b5\001\002\000\052\012\uff32\013" +
    "\uff32\014\uff32\015\uff32\016\uff32\017\uff32\020\uff32\021\uff32" +
    "\022\uff32\023\uff32\024\uff32\025\uff32\040\uff32\041\uff32\061" +
    "\uff32\062\uff32\064\uff32\065\uff32\067\uff32\072\uff32\001\002" +
    "\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011" +
    "\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d" +
    "\001\002\000\042\012\u0196\013\u0191\014\u019c\015\u0199\016" +
    "\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d\024\u019e" +
    "\025\u0195\040\u019f\041\u0192\061\uff28\072\uff28\001\002\000" +
    "\040\012\u0196\013\u0191\014\u019c\015\u0199\016\u0197\017\u0193" +
    "\020\u0194\021\u019a\022\u019b\023\u019d\024\u019e\025\u0195\040" +
    "\u019f\041\u0192\067\u01c3\001\002\000\054\012\uff47\013\uff47" +
    "\014\uff47\015\uff47\016\uff47\017\uff47\020\uff47\021\uff47\022" +
    "\uff47\023\uff47\024\uff47\025\uff47\040\uff47\041\uff47\061\uff47" +
    "\062\uff47\064\uff47\065\uff47\066\u01c4\067\uff47\072\uff47\001" +
    "\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185" +
    "\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102" +
    "\u018d\001\002\000\040\012\u0196\013\u0191\014\u019c\015\u0199" +
    "\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d\024" +
    "\u019e\025\u0195\040\u019f\041\u0192\067\u01c6\001\002\000\052" +
    "\012\uff46\013\uff46\014\uff46\015\uff46\016\uff46\017\uff46\020" +
    "\uff46\021\uff46\022\uff46\023\uff46\024\uff46\025\uff46\040\uff46" +
    "\041\uff46\061\uff46\062\uff46\064\uff46\065\uff46\067\uff46\072" +
    "\uff46\001\002\000\004\061\u01c8\001\002\000\054\012\uff33" +
    "\013\uff33\014\uff33\015\uff33\016\uff33\017\uff33\020\uff33\021" +
    "\uff33\022\uff33\023\uff33\024\uff33\025\uff33\040\uff33\041\uff33" +
    "\061\uff33\062\uff33\064\uff33\065\uff33\067\uff33\072\uff33\074" +
    "\u01c9\001\002\000\004\011\u01b5\001\002\000\052\012\uff34" +
    "\013\uff34\014\uff34\015\uff34\016\uff34\017\uff34\020\uff34\021" +
    "\uff34\022\uff34\023\uff34\024\uff34\025\uff34\040\uff34\041\uff34" +
    "\061\uff34\062\uff34\064\uff34\065\uff34\067\uff34\072\uff34\001" +
    "\002\000\040\012\u0196\013\u0191\014\u019c\015\u0199\016\u0197" +
    "\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d\024\u019e\025" +
    "\u0195\040\u019f\041\u0192\061\u01cc\001\002\000\052\012\uff50" +
    "\013\uff50\014\uff50\015\uff50\016\uff50\017\uff50\020\uff50\021" +
    "\uff50\022\uff50\023\uff50\024\uff50\025\uff50\040\uff50\041\uff50" +
    "\061\uff50\062\uff50\064\uff50\065\uff50\067\uff50\072\uff50\001" +
    "\002\000\004\060\u01ce\001\002\000\034\004\u0183\005\u0186" +
    "\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050" +
    "\u018a\060\u0188\061\u01d0\073\u0187\102\u018d\001\002\000\006" +
    "\061\u01d1\072\u01c0\001\002\000\052\012\uff43\013\uff43\014" +
    "\uff43\015\uff43\016\uff43\017\uff43\020\uff43\021\uff43\022\uff43" +
    "\023\uff43\024\uff43\025\uff43\040\uff43\041\uff43\061\uff43\062" +
    "\uff43\064\uff43\065\uff43\067\uff43\072\uff43\001\002\000\052" +
    "\012\uff44\013\uff44\014\uff44\015\uff44\016\uff44\017\uff44\020" +
    "\uff44\021\uff44\022\uff44\023\uff44\024\uff44\025\uff44\040\uff44" +
    "\041\uff44\061\uff44\062\uff44\064\uff44\065\uff44\067\uff44\072" +
    "\uff44\001\002\000\052\012\uff60\013\uff60\014\uff60\015\uff60" +
    "\016\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024" +
    "\uff60\025\uff60\040\uff60\041\uff60\061\uff60\062\uff60\064\uff60" +
    "\065\uff60\067\uff60\072\uff60\001\002\000\034\004\u0183\005" +
    "\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e" +
    "\050\u018a\060\u0188\061\uff36\073\u0187\102\u018d\001\002\000" +
    "\004\061\u01d5\001\002\000\004\064\u01d6\001\002\000\054" +
    "\003\uff0e\011\uff0e\027\uff0e\030\uff0e\032\uff0e\033\uff0e\034" +
    "\uff0e\035\uff0e\036\uff0e\051\uff0e\052\uff0e\053\uff0e\054\uff0e" +
    "\055\uff0e\056\uff0e\063\uff0e\070\uff0e\071\uff0e\075\uff0e\102" +
    "\uff0e\105\uff0e\001\002\000\032\004\u0183\005\u0186\006\u018b" +
    "\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060" +
    "\u0188\073\u0187\102\u018d\001\002\000\040\012\u0196\013\u0191" +
    "\014\u019c\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022" +
    "\u019b\023\u019d\024\u019e\025\u0195\040\u019f\041\u0192\061\u01d9" +
    "\001\002\000\004\062\u01da\001\002\000\052\003\uff81\011" +
    "\uff81\027\uff81\030\uff81\032\uff81\034\uff81\035\uff81\036\uff81" +
    "\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\063" +
    "\uff81\070\uff81\071\uff81\075\uff81\102\uff81\105\uff81\001\002" +
    "\000\052\003\u016d\011\u016b\027\u017d\030\u0168\032\u0166\034" +
    "\u0171\035\u0176\036\u0163\051\u017c\052\u0141\053\u014a\054\u0146" +
    "\055\u0151\056\u0149\063\u01dc\070\u017b\071\u015e\075\u016c\102" +
    "\u016a\105\u0165\001\002\000\054\003\uff1b\011\uff1b\027\uff1b" +
    "\030\uff1b\032\uff1b\033\uff1b\034\uff1b\035\uff1b\036\uff1b\051" +
    "\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056\uff1b\063\uff1b" +
    "\070\uff1b\071\uff1b\075\uff1b\102\uff1b\105\uff1b\001\002\000" +
    "\006\026\u01de\064\u01df\001\002\000\040\004\u0183\005\u0186" +
    "\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050" +
    "\u018a\060\u0188\073\u0187\102\u018d\106\u01e1\107\u01e2\110\u01e0" +
    "\001\002\000\100\003\uff0c\004\uff0c\005\uff0c\006\uff0c\007" +
    "\uff0c\010\uff0c\011\uff0c\013\uff0c\027\uff0c\030\uff0c\032\uff0c" +
    "\033\uff0c\034\uff0c\035\uff0c\036\uff0c\043\uff0c\050\uff0c\051" +
    "\uff0c\052\uff0c\053\uff0c\054\uff0c\055\uff0c\056\uff0c\060\uff0c" +
    "\063\uff0c\070\uff0c\071\uff0c\073\uff0c\075\uff0c\102\uff0c\105" +
    "\uff0c\001\002\000\004\060\u01eb\001\002\000\004\060\u01e8" +
    "\001\002\000\004\060\u01e5\001\002\000\040\012\u0196\013" +
    "\u0191\014\u019c\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a" +
    "\022\u019b\023\u019d\024\u019e\025\u0195\040\u019f\041\u0192\064" +
    "\u01e4\001\002\000\100\003\uff0b\004\uff0b\005\uff0b\006\uff0b" +
    "\007\uff0b\010\uff0b\011\uff0b\013\uff0b\027\uff0b\030\uff0b\032" +
    "\uff0b\033\uff0b\034\uff0b\035\uff0b\036\uff0b\043\uff0b\050\uff0b" +
    "\051\uff0b\052\uff0b\053\uff0b\054\uff0b\055\uff0b\056\uff0b\060" +
    "\uff0b\063\uff0b\070\uff0b\071\uff0b\073\uff0b\075\uff0b\102\uff0b" +
    "\105\uff0b\001\002\000\004\061\u01e6\001\002\000\004\064" +
    "\u01e7\001\002\000\100\003\uff0a\004\uff0a\005\uff0a\006\uff0a" +
    "\007\uff0a\010\uff0a\011\uff0a\013\uff0a\027\uff0a\030\uff0a\032" +
    "\uff0a\033\uff0a\034\uff0a\035\uff0a\036\uff0a\043\uff0a\050\uff0a" +
    "\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\056\uff0a\060" +
    "\uff0a\063\uff0a\070\uff0a\071\uff0a\073\uff0a\075\uff0a\102\uff0a" +
    "\105\uff0a\001\002\000\004\061\u01e9\001\002\000\004\064" +
    "\u01ea\001\002\000\100\003\uff09\004\uff09\005\uff09\006\uff09" +
    "\007\uff09\010\uff09\011\uff09\013\uff09\027\uff09\030\uff09\032" +
    "\uff09\033\uff09\034\uff09\035\uff09\036\uff09\043\uff09\050\uff09" +
    "\051\uff09\052\uff09\053\uff09\054\uff09\055\uff09\056\uff09\060" +
    "\uff09\063\uff09\070\uff09\071\uff09\073\uff09\075\uff09\102\uff09" +
    "\105\uff09\001\002\000\004\061\u01ec\001\002\000\004\064" +
    "\u01ed\001\002\000\100\003\uff08\004\uff08\005\uff08\006\uff08" +
    "\007\uff08\010\uff08\011\uff08\013\uff08\027\uff08\030\uff08\032" +
    "\uff08\033\uff08\034\uff08\035\uff08\036\uff08\043\uff08\050\uff08" +
    "\051\uff08\052\uff08\053\uff08\054\uff08\055\uff08\056\uff08\060" +
    "\uff08\063\uff08\070\uff08\071\uff08\073\uff08\075\uff08\102\uff08" +
    "\105\uff08\001\002\000\040\012\u0196\013\u0191\014\u019c\015" +
    "\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d" +
    "\024\u019e\025\u0195\040\u019f\041\u0192\062\u01ef\001\002\000" +
    "\010\037\uff17\063\uff17\127\uff17\001\002\000\010\037\u01f1" +
    "\063\u01f2\127\u01f4\001\002\000\004\065\u01fa\001\002\000" +
    "\054\003\uff19\011\uff19\027\uff19\030\uff19\032\uff19\033\uff19" +
    "\034\uff19\035\uff19\036\uff19\051\uff19\052\uff19\053\uff19\054" +
    "\uff19\055\uff19\056\uff19\063\uff19\070\uff19\071\uff19\075\uff19" +
    "\102\uff19\105\uff19\001\002\000\010\037\uff18\063\uff18\127" +
    "\uff18\001\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189" +
    "\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073" +
    "\u0187\102\u018d\001\002\000\040\012\u0196\013\u0191\014\u019c" +
    "\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023" +
    "\u019d\024\u019e\025\u0195\040\u019f\041\u0192\065\u01f6\001\002" +
    "\000\052\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81\033" +
    "\uff81\034\uff81\035\uff81\036\uff81\051\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\070\uff81\071\uff81\075\uff81\102" +
    "\uff81\105\uff81\001\002\000\052\003\u016d\011\u016b\027\u017d" +
    "\030\u0168\032\u0166\033\u01f8\034\u0171\035\u0176\036\u0163\051" +
    "\u017c\052\u0141\053\u014a\054\u0146\055\u0151\056\u0149\070\u017b" +
    "\071\u015e\075\u016c\102\u016a\105\u0165\001\002\000\004\064" +
    "\u01f9\001\002\000\010\037\uff16\063\uff16\127\uff16\001\002" +
    "\000\052\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81\033" +
    "\uff81\034\uff81\035\uff81\036\uff81\051\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\070\uff81\071\uff81\075\uff81\102" +
    "\uff81\105\uff81\001\002\000\052\003\u016d\011\u016b\027\u017d" +
    "\030\u0168\032\u0166\033\u01fc\034\u0171\035\u0176\036\u0163\051" +
    "\u017c\052\u0141\053\u014a\054\u0146\055\u0151\056\u0149\070\u017b" +
    "\071\u015e\075\u016c\102\u016a\105\u0165\001\002\000\004\064" +
    "\u01fd\001\002\000\010\037\uff15\063\uff15\127\uff15\001\002" +
    "\000\004\065\u01ff\001\002\000\016\011\u0158\052\u0141\053" +
    "\u014a\054\u0146\055\u0151\056\u0149\001\002\000\004\066\u0201" +
    "\001\002\000\004\067\u0202\001\002\000\006\026\u0203\066" +
    "\u0204\001\002\000\004\066\u0215\001\002\000\004\067\u0205" +
    "\001\002\000\004\026\u0206\001\002\000\004\066\u0207\001" +
    "\002\000\004\066\u0209\001\002\000\006\067\u020f\072\u0210" +
    "\001\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010" +
    "\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187" +
    "\102\u018d\001\002\000\006\067\u020c\072\u020d\001\002\000" +
    "\042\012\u0196\013\u0191\014\u019c\015\u0199\016\u0197\017\u0193" +
    "\020\u0194\021\u019a\022\u019b\023\u019d\024\u019e\025\u0195\040" +
    "\u019f\041\u0192\067\ufeff\072\ufeff\001\002\000\006\067\uff01" +
    "\072\uff01\001\002\000\032\004\u0183\005\u0186\006\u018b\007" +
    "\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188" +
    "\073\u0187\102\u018d\001\002\000\042\012\u0196\013\u0191\014" +
    "\u019c\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b" +
    "\023\u019d\024\u019e\025\u0195\040\u019f\041\u0192\067\ufefe\072" +
    "\ufefe\001\002\000\004\064\u0214\001\002\000\004\066\u0211" +
    "\001\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010" +
    "\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187" +
    "\102\u018d\001\002\000\006\067\u0213\072\u020d\001\002\000" +
    "\006\067\uff00\072\uff00\001\002\000\054\003\uff02\011\uff02" +
    "\027\uff02\030\uff02\032\uff02\033\uff02\034\uff02\035\uff02\036" +
    "\uff02\051\uff02\052\uff02\053\uff02\054\uff02\055\uff02\056\uff02" +
    "\063\uff02\070\uff02\071\uff02\075\uff02\102\uff02\105\uff02\001" +
    "\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185" +
    "\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102" +
    "\u018d\001\002\000\006\067\u0217\072\u020d\001\002\000\004" +
    "\064\u0218\001\002\000\054\003\uff03\011\uff03\027\uff03\030" +
    "\uff03\032\uff03\033\uff03\034\uff03\035\uff03\036\uff03\051\uff03" +
    "\052\uff03\053\uff03\054\uff03\055\uff03\056\uff03\063\uff03\070" +
    "\uff03\071\uff03\075\uff03\102\uff03\105\uff03\001\002\000\054" +
    "\003\uff62\011\uff62\027\uff62\030\uff62\032\uff62\033\uff62\034" +
    "\uff62\035\uff62\036\uff62\051\uff62\052\uff62\053\uff62\054\uff62" +
    "\055\uff62\056\uff62\063\uff62\070\uff62\071\uff62\075\uff62\102" +
    "\uff62\105\uff62\001\002\000\054\003\ufee5\011\ufee5\027\ufee5" +
    "\030\ufee5\032\ufee5\033\ufee5\034\ufee5\035\ufee5\036\ufee5\051" +
    "\ufee5\052\ufee5\053\ufee5\054\ufee5\055\ufee5\056\ufee5\063\ufee5" +
    "\070\ufee5\071\ufee5\075\ufee5\102\ufee5\105\ufee5\001\002\000" +
    "\040\012\u0196\013\u0191\014\u019c\015\u0199\016\u0197\017\u0193" +
    "\020\u0194\021\u019a\022\u019b\023\u019d\024\u019e\025\u0195\040" +
    "\u019f\041\u0192\064\u021c\001\002\000\054\003\ufee4\011\ufee4" +
    "\027\ufee4\030\ufee4\032\ufee4\033\ufee4\034\ufee4\035\ufee4\036" +
    "\ufee4\051\ufee4\052\ufee4\053\ufee4\054\ufee4\055\ufee4\056\ufee4" +
    "\063\ufee4\070\ufee4\071\ufee4\075\ufee4\102\ufee4\105\ufee4\001" +
    "\002\000\040\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185" +
    "\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102" +
    "\u018d\106\u0250\107\u0252\110\u024f\001\002\000\034\004\u0183" +
    "\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043" +
    "\u018e\050\u018a\060\u0188\061\uff36\073\u0187\102\u018d\001\002" +
    "\000\004\064\u0247\001\002\000\004\064\u0246\001\002\000" +
    "\032\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c" +
    "\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001" +
    "\002\000\004\011\u0223\001\002\000\010\026\ufefb\060\u0229" +
    "\074\u022a\001\002\000\054\003\uff2e\011\uff2e\027\uff2e\030" +
    "\uff2e\032\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\051\uff2e" +
    "\052\uff2e\053\uff2e\054\uff2e\055\uff2e\056\uff2e\063\uff2e\070" +
    "\uff2e\071\uff2e\075\uff2e\102\uff2e\105\uff2e\001\002\000\004" +
    "\026\u0226\001\002\000\032\004\u0183\005\u0186\006\u018b\007" +
    "\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188" +
    "\073\u0187\102\u018d\001\002\000\040\012\u0196\013\u0191\014" +
    "\u019c\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b" +
    "\023\u019d\024\u019e\025\u0195\040\u019f\041\u0192\064\u0228\001" +
    "\002\000\100\003\ufef8\004\ufef8\005\ufef8\006\ufef8\007\ufef8" +
    "\010\ufef8\011\ufef8\013\ufef8\027\ufef8\030\ufef8\032\ufef8\033" +
    "\ufef8\034\ufef8\035\ufef8\036\ufef8\043\ufef8\050\ufef8\051\ufef8" +
    "\052\ufef8\053\ufef8\054\ufef8\055\ufef8\056\ufef8\060\ufef8\063" +
    "\ufef8\070\ufef8\071\ufef8\073\ufef8\075\ufef8\102\ufef8\105\ufef8" +
    "\001\002\000\034\004\u0183\005\u0186\006\u018b\007\u0189\010" +
    "\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\061\uff36" +
    "\073\u0187\102\u018d\001\002\000\004\011\u022b\001\002\000" +
    "\010\026\ufefb\060\u022e\074\u022f\001\002\000\054\003\uff2a" +
    "\011\uff2a\027\uff2a\030\uff2a\032\uff2a\033\uff2a\034\uff2a\035" +
    "\uff2a\036\uff2a\051\uff2a\052\uff2a\053\uff2a\054\uff2a\055\uff2a" +
    "\056\uff2a\063\uff2a\070\uff2a\071\uff2a\075\uff2a\102\uff2a\105" +
    "\uff2a\001\002\000\004\026\ufefc\001\002\000\034\004\u0183" +
    "\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043" +
    "\u018e\050\u018a\060\u0188\061\uff36\073\u0187\102\u018d\001\002" +
    "\000\004\011\u0223\001\002\000\004\061\u0231\001\002\000" +
    "\006\064\u0232\074\u0233\001\002\000\054\003\uff2c\011\uff2c" +
    "\027\uff2c\030\uff2c\032\uff2c\033\uff2c\034\uff2c\035\uff2c\036" +
    "\uff2c\051\uff2c\052\uff2c\053\uff2c\054\uff2c\055\uff2c\056\uff2c" +
    "\063\uff2c\070\uff2c\071\uff2c\075\uff2c\102\uff2c\105\uff2c\001" +
    "\002\000\004\011\u0223\001\002\000\054\003\uff2d\011\uff2d" +
    "\027\uff2d\030\uff2d\032\uff2d\033\uff2d\034\uff2d\035\uff2d\036" +
    "\uff2d\051\uff2d\052\uff2d\053\uff2d\054\uff2d\055\uff2d\056\uff2d" +
    "\063\uff2d\070\uff2d\071\uff2d\075\uff2d\102\uff2d\105\uff2d\001" +
    "\002\000\004\026\ufefd\001\002\000\004\061\u0237\001\002" +
    "\000\006\064\u0238\074\u0239\001\002\000\054\003\uff29\011" +
    "\uff29\027\uff29\030\uff29\032\uff29\033\uff29\034\uff29\035\uff29" +
    "\036\uff29\051\uff29\052\uff29\053\uff29\054\uff29\055\uff29\056" +
    "\uff29\063\uff29\070\uff29\071\uff29\075\uff29\102\uff29\105\uff29" +
    "\001\002\000\004\011\u022b\001\002\000\054\003\uff2b\011" +
    "\uff2b\027\uff2b\030\uff2b\032\uff2b\033\uff2b\034\uff2b\035\uff2b" +
    "\036\uff2b\051\uff2b\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056" +
    "\uff2b\063\uff2b\070\uff2b\071\uff2b\075\uff2b\102\uff2b\105\uff2b" +
    "\001\002\000\040\012\u0196\013\u0191\014\u019c\015\u0199\016" +
    "\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d\024\u019e" +
    "\025\u0195\040\u019f\041\u0192\067\u023c\001\002\000\006\026" +
    "\u023d\066\u023e\001\002\000\032\004\u0183\005\u0186\006\u018b" +
    "\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060" +
    "\u0188\073\u0187\102\u018d\001\002\000\032\004\u0183\005\u0186" +
    "\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050" +
    "\u018a\060\u0188\073\u0187\102\u018d\001\002\000\040\012\u0196" +
    "\013\u0191\014\u019c\015\u0199\016\u0197\017\u0193\020\u0194\021" +
    "\u019a\022\u019b\023\u019d\024\u019e\025\u0195\040\u019f\041\u0192" +
    "\067\u0240\001\002\000\004\026\u0241\001\002\000\032\004" +
    "\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184" +
    "\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001\002\000" +
    "\040\012\u0196\013\u0191\014\u019c\015\u0199\016\u0197\017\u0193" +
    "\020\u0194\021\u019a\022\u019b\023\u019d\024\u019e\025\u0195\040" +
    "\u019f\041\u0192\064\u0243\001\002\000\100\003\ufef5\004\ufef5" +
    "\005\ufef5\006\ufef5\007\ufef5\010\ufef5\011\ufef5\013\ufef5\027" +
    "\ufef5\030\ufef5\032\ufef5\033\ufef5\034\ufef5\035\ufef5\036\ufef5" +
    "\043\ufef5\050\ufef5\051\ufef5\052\ufef5\053\ufef5\054\ufef5\055" +
    "\ufef5\056\ufef5\060\ufef5\063\ufef5\070\ufef5\071\ufef5\073\ufef5" +
    "\075\ufef5\102\ufef5\105\ufef5\001\002\000\040\012\u0196\013" +
    "\u0191\014\u019c\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a" +
    "\022\u019b\023\u019d\024\u019e\025\u0195\040\u019f\041\u0192\064" +
    "\u0245\001\002\000\100\003\ufef6\004\ufef6\005\ufef6\006\ufef6" +
    "\007\ufef6\010\ufef6\011\ufef6\013\ufef6\027\ufef6\030\ufef6\032" +
    "\ufef6\033\ufef6\034\ufef6\035\ufef6\036\ufef6\043\ufef6\050\ufef6" +
    "\051\ufef6\052\ufef6\053\ufef6\054\ufef6\055\ufef6\056\ufef6\060" +
    "\ufef6\063\ufef6\070\ufef6\071\ufef6\073\ufef6\075\ufef6\102\ufef6" +
    "\105\ufef6\001\002\000\054\003\ufef1\011\ufef1\027\ufef1\030" +
    "\ufef1\032\ufef1\033\ufef1\034\ufef1\035\ufef1\036\ufef1\051\ufef1" +
    "\052\ufef1\053\ufef1\054\ufef1\055\ufef1\056\ufef1\063\ufef1\070" +
    "\ufef1\071\ufef1\075\ufef1\102\ufef1\105\ufef1\001\002\000\054" +
    "\003\ufef0\011\ufef0\027\ufef0\030\ufef0\032\ufef0\033\ufef0\034" +
    "\ufef0\035\ufef0\036\ufef0\051\ufef0\052\ufef0\053\ufef0\054\ufef0" +
    "\055\ufef0\056\ufef0\063\ufef0\070\ufef0\071\ufef0\075\ufef0\102" +
    "\ufef0\105\ufef0\001\002\000\004\061\u0249\001\002\000\006" +
    "\064\u0232\074\u024a\001\002\000\004\011\u0223\001\002\000" +
    "\004\026\u024c\001\002\000\032\004\u0183\005\u0186\006\u018b" +
    "\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060" +
    "\u0188\073\u0187\102\u018d\001\002\000\040\012\u0196\013\u0191" +
    "\014\u019c\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022" +
    "\u019b\023\u019d\024\u019e\025\u0195\040\u019f\041\u0192\064\u024e" +
    "\001\002\000\100\003\ufef7\004\ufef7\005\ufef7\006\ufef7\007" +
    "\ufef7\010\ufef7\011\ufef7\013\ufef7\027\ufef7\030\ufef7\032\ufef7" +
    "\033\ufef7\034\ufef7\035\ufef7\036\ufef7\043\ufef7\050\ufef7\051" +
    "\ufef7\052\ufef7\053\ufef7\054\ufef7\055\ufef7\056\ufef7\060\ufef7" +
    "\063\ufef7\070\ufef7\071\ufef7\073\ufef7\075\ufef7\102\ufef7\105" +
    "\ufef7\001\002\000\004\060\u025a\001\002\000\004\060\u0257" +
    "\001\002\000\040\012\u0196\013\u0191\014\u019c\015\u0199\016" +
    "\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d\024\u019e" +
    "\025\u0195\040\u019f\041\u0192\064\u0256\001\002\000\004\060" +
    "\u0253\001\002\000\004\061\u0254\001\002\000\004\064\u0255" +
    "\001\002\000\100\003\ufef4\004\ufef4\005\ufef4\006\ufef4\007" +
    "\ufef4\010\ufef4\011\ufef4\013\ufef4\027\ufef4\030\ufef4\032\ufef4" +
    "\033\ufef4\034\ufef4\035\ufef4\036\ufef4\043\ufef4\050\ufef4\051" +
    "\ufef4\052\ufef4\053\ufef4\054\ufef4\055\ufef4\056\ufef4\060\ufef4" +
    "\063\ufef4\070\ufef4\071\ufef4\073\ufef4\075\ufef4\102\ufef4\105" +
    "\ufef4\001\002\000\100\003\ufef9\004\ufef9\005\ufef9\006\ufef9" +
    "\007\ufef9\010\ufef9\011\ufef9\013\ufef9\027\ufef9\030\ufef9\032" +
    "\ufef9\033\ufef9\034\ufef9\035\ufef9\036\ufef9\043\ufef9\050\ufef9" +
    "\051\ufef9\052\ufef9\053\ufef9\054\ufef9\055\ufef9\056\ufef9\060" +
    "\ufef9\063\ufef9\070\ufef9\071\ufef9\073\ufef9\075\ufef9\102\ufef9" +
    "\105\ufef9\001\002\000\004\061\u0258\001\002\000\004\064" +
    "\u0259\001\002\000\100\003\ufef3\004\ufef3\005\ufef3\006\ufef3" +
    "\007\ufef3\010\ufef3\011\ufef3\013\ufef3\027\ufef3\030\ufef3\032" +
    "\ufef3\033\ufef3\034\ufef3\035\ufef3\036\ufef3\043\ufef3\050\ufef3" +
    "\051\ufef3\052\ufef3\053\ufef3\054\ufef3\055\ufef3\056\ufef3\060" +
    "\ufef3\063\ufef3\070\ufef3\071\ufef3\073\ufef3\075\ufef3\102\ufef3" +
    "\105\ufef3\001\002\000\004\061\u025b\001\002\000\004\064" +
    "\u025c\001\002\000\100\003\ufef2\004\ufef2\005\ufef2\006\ufef2" +
    "\007\ufef2\010\ufef2\011\ufef2\013\ufef2\027\ufef2\030\ufef2\032" +
    "\ufef2\033\ufef2\034\ufef2\035\ufef2\036\ufef2\043\ufef2\050\ufef2" +
    "\051\ufef2\052\ufef2\053\ufef2\054\ufef2\055\ufef2\056\ufef2\060" +
    "\ufef2\063\ufef2\070\ufef2\071\ufef2\073\ufef2\075\ufef2\102\ufef2" +
    "\105\ufef2\001\002\000\004\011\u025e\001\002\000\004\026" +
    "\u025f\001\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189" +
    "\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073" +
    "\u0187\102\u018d\001\002\000\040\012\u0196\013\u0191\014\u019c" +
    "\015\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023" +
    "\u019d\024\u019e\025\u0195\040\u019f\041\u0192\064\u0261\001\002" +
    "\000\100\003\ufefa\004\ufefa\005\ufefa\006\ufefa\007\ufefa\010" +
    "\ufefa\011\ufefa\013\ufefa\027\ufefa\030\ufefa\032\ufefa\033\ufefa" +
    "\034\ufefa\035\ufefa\036\ufefa\043\ufefa\050\ufefa\051\ufefa\052" +
    "\ufefa\053\ufefa\054\ufefa\055\ufefa\056\ufefa\060\ufefa\063\ufefa" +
    "\070\ufefa\071\ufefa\073\ufefa\075\ufefa\102\ufefa\105\ufefa\001" +
    "\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185" +
    "\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102" +
    "\u018d\001\002\000\040\012\u0196\013\u0191\014\u019c\015\u0199" +
    "\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d\024" +
    "\u019e\025\u0195\040\u019f\041\u0192\061\u0264\001\002\000\004" +
    "\062\u0265\001\002\000\054\003\uff23\011\uff23\027\uff23\030" +
    "\uff23\032\uff23\033\uff23\034\uff23\035\uff23\036\uff23\051\uff23" +
    "\052\uff23\053\uff23\054\uff23\055\uff23\056\uff23\063\uff23\070" +
    "\uff23\071\uff23\075\uff23\102\uff23\105\uff23\001\002\000\054" +
    "\003\u016d\011\u016b\027\u017d\030\u0168\032\u0166\033\u026b\034" +
    "\u0171\035\u0176\036\u0163\051\u017c\052\u0141\053\u014a\054\u0146" +
    "\055\u0151\056\u0149\063\u0267\070\u017b\071\u015e\075\u016c\102" +
    "\u016a\105\u0165\001\002\000\056\003\uff10\011\uff10\027\uff10" +
    "\030\uff10\031\u026e\032\uff10\033\uff10\034\uff10\035\uff10\036" +
    "\uff10\051\uff10\052\uff10\053\uff10\054\uff10\055\uff10\056\uff10" +
    "\063\uff10\070\uff10\071\uff10\075\uff10\102\uff10\105\uff10\001" +
    "\002\000\054\003\uff26\011\uff26\027\uff26\030\uff26\032\uff26" +
    "\033\uff26\034\uff26\035\uff26\036\uff26\051\uff26\052\uff26\053" +
    "\uff26\054\uff26\055\uff26\056\uff26\063\uff26\070\uff26\071\uff26" +
    "\075\uff26\102\uff26\105\uff26\001\002\000\054\003\uff25\011" +
    "\uff25\027\uff25\030\uff25\032\uff25\033\uff25\034\uff25\035\uff25" +
    "\036\uff25\051\uff25\052\uff25\053\uff25\054\uff25\055\uff25\056" +
    "\uff25\063\uff25\070\uff25\071\uff25\075\uff25\102\uff25\105\uff25" +
    "\001\002\000\054\003\uff24\011\uff24\027\uff24\030\uff24\032" +
    "\uff24\033\uff24\034\uff24\035\uff24\036\uff24\051\uff24\052\uff24" +
    "\053\uff24\054\uff24\055\uff24\056\uff24\063\uff24\070\uff24\071" +
    "\uff24\075\uff24\102\uff24\105\uff24\001\002\000\004\064\u026c" +
    "\001\002\000\054\003\ufee7\011\ufee7\027\ufee7\030\ufee7\032" +
    "\ufee7\033\ufee7\034\ufee7\035\ufee7\036\ufee7\051\ufee7\052\ufee7" +
    "\053\ufee7\054\ufee7\055\ufee7\056\ufee7\063\ufee7\070\ufee7\071" +
    "\ufee7\075\ufee7\102\ufee7\105\ufee7\001\002\000\054\003\uff0f" +
    "\011\uff0f\027\uff0f\030\uff0f\032\uff0f\033\uff0f\034\uff0f\035" +
    "\uff0f\036\uff0f\051\uff0f\052\uff0f\053\uff0f\054\uff0f\055\uff0f" +
    "\056\uff0f\063\uff0f\070\uff0f\071\uff0f\075\uff0f\102\uff0f\105" +
    "\uff0f\001\002\000\006\030\u0168\062\u026f\001\002\000\052" +
    "\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81\034\uff81\035" +
    "\uff81\036\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81" +
    "\056\uff81\063\uff81\070\uff81\071\uff81\075\uff81\102\uff81\105" +
    "\uff81\001\002\000\054\003\uff22\011\uff22\027\uff22\030\uff22" +
    "\032\uff22\033\uff22\034\uff22\035\uff22\036\uff22\051\uff22\052" +
    "\uff22\053\uff22\054\uff22\055\uff22\056\uff22\063\uff22\070\uff22" +
    "\071\uff22\075\uff22\102\uff22\105\uff22\001\002\000\052\003" +
    "\u016d\011\u016b\027\u017d\030\u0168\032\u0166\034\u0171\035\u0176" +
    "\036\u0163\051\u017c\052\u0141\053\u014a\054\u0146\055\u0151\056" +
    "\u0149\063\uff12\070\u017b\071\u015e\075\u016c\102\u016a\105\u0165" +
    "\001\002\000\004\063\u0273\001\002\000\054\003\uff11\011" +
    "\uff11\027\uff11\030\uff11\032\uff11\033\uff11\034\uff11\035\uff11" +
    "\036\uff11\051\uff11\052\uff11\053\uff11\054\uff11\055\uff11\056" +
    "\uff11\063\uff11\070\uff11\071\uff11\075\uff11\102\uff11\105\uff11" +
    "\001\002\000\020\011\u0278\052\u0141\053\u014a\054\u0146\055" +
    "\u0151\056\u0149\102\u016a\001\002\000\032\004\uff13\005\uff13" +
    "\006\uff13\007\uff13\010\uff13\011\uff13\013\uff13\043\uff13\050" +
    "\uff13\060\uff13\073\uff13\102\uff13\001\002\000\032\004\uff14" +
    "\005\uff14\006\uff14\007\uff14\010\uff14\011\uff14\013\uff14\043" +
    "\uff14\050\uff14\060\uff14\073\uff14\102\uff14\001\002\000\032" +
    "\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013" +
    "\u0184\043\u018e\050\u018a\060\u0188\073\u0187\102\u018d\001\002" +
    "\000\014\011\ufee8\026\u021d\060\u0279\066\u0221\074\u027a\001" +
    "\002\000\034\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185" +
    "\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\061\uff36\073" +
    "\u0187\102\u018d\001\002\000\004\011\u027b\001\002\000\010" +
    "\026\ufefb\060\u027c\074\u027d\001\002\000\034\004\u0183\005" +
    "\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e" +
    "\050\u018a\060\u0188\061\uff36\073\u0187\102\u018d\001\002\000" +
    "\004\011\u027b\001\002\000\004\061\u027f\001\002\000\004" +
    "\074\u0280\001\002\000\004\011\u027b\001\002\000\004\061" +
    "\u0282\001\002\000\004\074\u0283\001\002\000\004\011\u027b" +
    "\001\002\000\040\012\u0196\013\u0191\014\u019c\015\u0199\016" +
    "\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d\024\u019e" +
    "\025\u0195\040\u019f\041\u0192\064\u0285\001\002\000\004\011" +
    "\u0286\001\002\000\010\026\u028c\046\u028e\047\u028d\001\002" +
    "\000\004\061\u0288\001\002\000\004\062\u0289\001\002\000" +
    "\052\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81\034\uff81" +
    "\035\uff81\036\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055" +
    "\uff81\056\uff81\063\uff81\070\uff81\071\uff81\075\uff81\102\uff81" +
    "\105\uff81\001\002\000\052\003\u016d\011\u016b\027\u017d\030" +
    "\u0168\032\u0166\034\u0171\035\u0176\036\u0163\051\u017c\052\u0141" +
    "\053\u014a\054\u0146\055\u0151\056\u0149\063\u028b\070\u017b\071" +
    "\u015e\075\u016c\102\u016a\105\u0165\001\002\000\054\003\uff1f" +
    "\011\uff1f\027\uff1f\030\uff1f\032\uff1f\033\uff1f\034\uff1f\035" +
    "\uff1f\036\uff1f\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055\uff1f" +
    "\056\uff1f\063\uff1f\070\uff1f\071\uff1f\075\uff1f\102\uff1f\105" +
    "\uff1f\001\002\000\032\004\u0183\005\u0186\006\u018b\007\u0189" +
    "\010\u0185\011\u018c\013\u0184\043\u018e\050\u018a\060\u0188\073" +
    "\u0187\102\u018d\001\002\000\004\061\uff1d\001\002\000\004" +
    "\061\uff1e\001\002\000\040\012\u0196\013\u0191\014\u019c\015" +
    "\u0199\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d" +
    "\024\u019e\025\u0195\040\u019f\041\u0192\061\uff1c\001\002\000" +
    "\034\004\u0183\005\u0186\006\u018b\007\u0189\010\u0185\011\u018c" +
    "\013\u0184\043\u018e\050\u018a\060\u0188\061\uff36\073\u0187\102" +
    "\u018d\001\002\000\004\061\u0292\001\002\000\004\064\u0293" +
    "\001\002\000\054\003\uff0d\011\uff0d\027\uff0d\030\uff0d\032" +
    "\uff0d\033\uff0d\034\uff0d\035\uff0d\036\uff0d\051\uff0d\052\uff0d" +
    "\053\uff0d\054\uff0d\055\uff0d\056\uff0d\063\uff0d\070\uff0d\071" +
    "\uff0d\075\uff0d\102\uff0d\105\uff0d\001\002\000\054\003\ufee6" +
    "\011\ufee6\027\ufee6\030\ufee6\032\ufee6\033\ufee6\034\ufee6\035" +
    "\ufee6\036\ufee6\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6" +
    "\056\ufee6\063\ufee6\070\ufee6\071\ufee6\075\ufee6\102\ufee6\105" +
    "\ufee6\001\002\000\016\011\u0158\052\u0141\053\u014a\054\u0146" +
    "\055\u0151\056\u0149\001\002\000\004\062\u0297\001\002\000" +
    "\052\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81\034\uff81" +
    "\035\uff81\036\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055" +
    "\uff81\056\uff81\063\uff81\070\uff81\071\uff81\075\uff81\102\uff81" +
    "\105\uff81\001\002\000\052\003\u016d\011\u016b\027\u017d\030" +
    "\u0168\032\u0166\034\u0171\035\u0176\036\u0163\051\u017c\052\u0141" +
    "\053\u014a\054\u0146\055\u0151\056\u0149\063\u0299\070\u017b\071" +
    "\u015e\075\u016c\102\u016a\105\u0165\001\002\000\030\011\uff3c" +
    "\052\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c\063" +
    "\uff3c\076\uff3c\077\uff3c\100\uff3c\001\002\000\004\011\u029b" +
    "\001\002\000\006\061\uff39\072\uff39\001\002\000\040\012" +
    "\u0196\013\u0191\014\u019c\015\u0199\016\u0197\017\u0193\020\u0194" +
    "\021\u019a\022\u019b\023\u019d\024\u019e\025\u0195\040\u019f\041" +
    "\u0192\064\u029d\001\002\000\030\011\uff04\052\uff04\053\uff04" +
    "\054\uff04\055\uff04\056\uff04\057\uff04\063\uff04\076\uff04\077" +
    "\uff04\100\uff04\001\002\000\006\011\ufee8\060\u02bb\001\002" +
    "\000\004\011\u02ac\001\002\000\004\011\u02a1\001\002\000" +
    "\004\060\u02a2\001\002\000\020\011\u0158\052\u0141\053\u014a" +
    "\054\u0146\055\u0151\056\u0149\061\u02a4\001\002\000\006\061" +
    "\u02a8\072\u0295\001\002\000\004\062\u02a5\001\002\000\052" +
    "\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81\034\uff81\035" +
    "\uff81\036\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81" +
    "\056\uff81\063\uff81\070\uff81\071\uff81\075\uff81\102\uff81\105" +
    "\uff81\001\002\000\052\003\u016d\011\u016b\027\u017d\030\u0168" +
    "\032\u0166\034\u0171\035\u0176\036\u0163\051\u017c\052\u0141\053" +
    "\u014a\054\u0146\055\u0151\056\u0149\063\u02a7\070\u017b\071\u015e" +
    "\075\u016c\102\u016a\105\u0165\001\002\000\030\011\uff41\052" +
    "\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057\uff41\063\uff41" +
    "\076\uff41\077\uff41\100\uff41\001\002\000\004\062\u02a9\001" +
    "\002\000\052\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81" +
    "\034\uff81\035\uff81\036\uff81\051\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\056\uff81\063\uff81\070\uff81\071\uff81\075\uff81" +
    "\102\uff81\105\uff81\001\002\000\052\003\u016d\011\u016b\027" +
    "\u017d\030\u0168\032\u0166\034\u0171\035\u0176\036\u0163\051\u017c" +
    "\052\u0141\053\u014a\054\u0146\055\u0151\056\u0149\063\u02ab\070" +
    "\u017b\071\u015e\075\u016c\102\u016a\105\u0165\001\002\000\030" +
    "\011\uff42\052\uff42\053\uff42\054\uff42\055\uff42\056\uff42\057" +
    "\uff42\063\uff42\076\uff42\077\uff42\100\uff42\001\002\000\010" +
    "\026\u02ad\060\u02ae\064\u02af\001\002\000\032\004\u0183\005" +
    "\u0186\006\u018b\007\u0189\010\u0185\011\u018c\013\u0184\043\u018e" +
    "\050\u018a\060\u0188\073\u0187\102\u018d\001\002\000\020\011" +
    "\u0158\052\u0141\053\u014a\054\u0146\055\u0151\056\u0149\061\u02b1" +
    "\001\002\000\030\011\uff07\052\uff07\053\uff07\054\uff07\055" +
    "\uff07\056\uff07\057\uff07\063\uff07\076\uff07\077\uff07\100\uff07" +
    "\001\002\000\006\061\u02b5\072\u0295\001\002\000\004\062" +
    "\u02b2\001\002\000\052\003\uff81\011\uff81\027\uff81\030\uff81" +
    "\032\uff81\034\uff81\035\uff81\036\uff81\051\uff81\052\uff81\053" +
    "\uff81\054\uff81\055\uff81\056\uff81\063\uff81\070\uff81\071\uff81" +
    "\075\uff81\102\uff81\105\uff81\001\002\000\052\003\u016d\011" +
    "\u016b\027\u017d\030\u0168\032\u0166\034\u0171\035\u0176\036\u0163" +
    "\051\u017c\052\u0141\053\u014a\054\u0146\055\u0151\056\u0149\063" +
    "\u02b4\070\u017b\071\u015e\075\u016c\102\u016a\105\u0165\001\002" +
    "\000\030\011\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f\056" +
    "\uff3f\057\uff3f\063\uff3f\076\uff3f\077\uff3f\100\uff3f\001\002" +
    "\000\004\062\u02b6\001\002\000\052\003\uff81\011\uff81\027" +
    "\uff81\030\uff81\032\uff81\034\uff81\035\uff81\036\uff81\051\uff81" +
    "\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\063\uff81\070" +
    "\uff81\071\uff81\075\uff81\102\uff81\105\uff81\001\002\000\052" +
    "\003\u016d\011\u016b\027\u017d\030\u0168\032\u0166\034\u0171\035" +
    "\u0176\036\u0163\051\u017c\052\u0141\053\u014a\054\u0146\055\u0151" +
    "\056\u0149\063\u02b8\070\u017b\071\u015e\075\u016c\102\u016a\105" +
    "\u0165\001\002\000\030\011\uff40\052\uff40\053\uff40\054\uff40" +
    "\055\uff40\056\uff40\057\uff40\063\uff40\076\uff40\077\uff40\100" +
    "\uff40\001\002\000\040\012\u0196\013\u0191\014\u019c\015\u0199" +
    "\016\u0197\017\u0193\020\u0194\021\u019a\022\u019b\023\u019d\024" +
    "\u019e\025\u0195\040\u019f\041\u0192\064\u02ba\001\002\000\030" +
    "\011\uff06\052\uff06\053\uff06\054\uff06\055\uff06\056\uff06\057" +
    "\uff06\063\uff06\076\uff06\077\uff06\100\uff06\001\002\000\020" +
    "\011\u0158\052\u0141\053\u014a\054\u0146\055\u0151\056\u0149\061" +
    "\u02bd\001\002\000\006\061\u02c1\072\u0295\001\002\000\004" +
    "\062\u02be\001\002\000\052\003\uff81\011\uff81\027\uff81\030" +
    "\uff81\032\uff81\034\uff81\035\uff81\036\uff81\051\uff81\052\uff81" +
    "\053\uff81\054\uff81\055\uff81\056\uff81\063\uff81\070\uff81\071" +
    "\uff81\075\uff81\102\uff81\105\uff81\001\002\000\052\003\u016d" +
    "\011\u016b\027\u017d\030\u0168\032\u0166\034\u0171\035\u0176\036" +
    "\u0163\051\u017c\052\u0141\053\u014a\054\u0146\055\u0151\056\u0149" +
    "\063\u02c0\070\u017b\071\u015e\075\u016c\102\u016a\105\u0165\001" +
    "\002\000\030\011\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d" +
    "\056\uff7d\057\uff7d\063\uff7d\076\uff7d\077\uff7d\100\uff7d\001" +
    "\002\000\004\062\u02c2\001\002\000\052\003\uff81\011\uff81" +
    "\027\uff81\030\uff81\032\uff81\034\uff81\035\uff81\036\uff81\051" +
    "\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\063\uff81" +
    "\070\uff81\071\uff81\075\uff81\102\uff81\105\uff81\001\002\000" +
    "\052\003\u016d\011\u016b\027\u017d\030\u0168\032\u0166\034\u0171" +
    "\035\u0176\036\u0163\051\u017c\052\u0141\053\u014a\054\u0146\055" +
    "\u0151\056\u0149\063\u02c4\070\u017b\071\u015e\075\u016c\102\u016a" +
    "\105\u0165\001\002\000\030\011\uff7e\052\uff7e\053\uff7e\054" +
    "\uff7e\055\uff7e\056\uff7e\057\uff7e\063\uff7e\076\uff7e\077\uff7e" +
    "\100\uff7e\001\002\000\020\011\u0158\052\u0141\053\u014a\054" +
    "\u0146\055\u0151\056\u0149\061\u02c7\001\002\000\006\061\u02cb" +
    "\072\u0295\001\002\000\004\062\u02c8\001\002\000\052\003" +
    "\uff81\011\uff81\027\uff81\030\uff81\032\uff81\034\uff81\035\uff81" +
    "\036\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056" +
    "\uff81\063\uff81\070\uff81\071\uff81\075\uff81\102\uff81\105\uff81" +
    "\001\002\000\052\003\u016d\011\u016b\027\u017d\030\u0168\032" +
    "\u0166\034\u0171\035\u0176\036\u0163\051\u017c\052\u0141\053\u014a" +
    "\054\u0146\055\u0151\056\u0149\063\u02ca\070\u017b\071\u015e\075" +
    "\u016c\102\u016a\105\u0165\001\002\000\030\011\uff7f\052\uff7f" +
    "\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\063\uff7f\076" +
    "\uff7f\077\uff7f\100\uff7f\001\002\000\004\062\u02cc\001\002" +
    "\000\052\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81\034" +
    "\uff81\035\uff81\036\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\055\uff81\056\uff81\063\uff81\070\uff81\071\uff81\075\uff81\102" +
    "\uff81\105\uff81\001\002\000\052\003\u016d\011\u016b\027\u017d" +
    "\030\u0168\032\u0166\034\u0171\035\u0176\036\u0163\051\u017c\052" +
    "\u0141\053\u014a\054\u0146\055\u0151\056\u0149\063\u02ce\070\u017b" +
    "\071\u015e\075\u016c\102\u016a\105\u0165\001\002\000\030\011" +
    "\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80" +
    "\063\uff80\076\uff80\077\uff80\100\uff80\001\002\000\004\060" +
    "\u02d0\001\002\000\020\011\u0158\052\u0141\053\u014a\054\u0146" +
    "\055\u0151\056\u0149\061\u02d2\001\002\000\006\061\u02d6\072" +
    "\u0295\001\002\000\004\062\u02d3\001\002\000\052\003\uff81" +
    "\011\uff81\027\uff81\030\uff81\032\uff81\034\uff81\035\uff81\036" +
    "\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81" +
    "\063\uff81\070\uff81\071\uff81\075\uff81\102\uff81\105\uff81\001" +
    "\002\000\052\003\u016d\011\u016b\027\u017d\030\u0168\032\u0166" +
    "\034\u0171\035\u0176\036\u0163\051\u017c\052\u0141\053\u014a\054" +
    "\u0146\055\u0151\056\u0149\063\u02d5\070\u017b\071\u015e\075\u016c" +
    "\102\u016a\105\u0165\001\002\000\030\011\uff3d\052\uff3d\053" +
    "\uff3d\054\uff3d\055\uff3d\056\uff3d\057\uff3d\063\uff3d\076\uff3d" +
    "\077\uff3d\100\uff3d\001\002\000\004\062\u02d7\001\002\000" +
    "\052\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81\034\uff81" +
    "\035\uff81\036\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055" +
    "\uff81\056\uff81\063\uff81\070\uff81\071\uff81\075\uff81\102\uff81" +
    "\105\uff81\001\002\000\052\003\u016d\011\u016b\027\u017d\030" +
    "\u0168\032\u0166\034\u0171\035\u0176\036\u0163\051\u017c\052\u0141" +
    "\053\u014a\054\u0146\055\u0151\056\u0149\063\u02d9\070\u017b\071" +
    "\u015e\075\u016c\102\u016a\105\u0165\001\002\000\030\011\uff3e" +
    "\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\057\uff3e\063" +
    "\uff3e\076\uff3e\077\uff3e\100\uff3e\001\002\000\030\002\uff76" +
    "\052\uff76\053\uff76\055\uff76\056\uff76\057\uff76\071\uff76\100" +
    "\uff76\104\uff76\126\uff76\135\uff76\001\002\000\030\011\uff72" +
    "\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\063" +
    "\uff72\076\uff72\077\uff72\100\uff72\001\002\000\004\063\u02de" +
    "\001\002\000\030\011\u014b\052\u0141\053\u014a\054\u0146\055" +
    "\u0151\056\u0149\057\u0147\063\uff75\076\u0148\077\u014c\100\u0143" +
    "\001\002\000\030\002\uff78\052\uff78\053\uff78\055\uff78\056" +
    "\uff78\057\uff78\071\uff78\100\uff78\104\uff78\126\uff78\135\uff78" +
    "\001\002\000\004\060\u02e0\001\002\000\006\011\u02e1\061" +
    "\u02e4\001\002\000\006\065\ufeba\072\ufeba\001\002\000\006" +
    "\061\u03a5\064\u03a4\001\002\000\006\065\u03a2\072\u030e\001" +
    "\002\000\004\065\u02e6\001\002\000\006\061\ufe86\064\ufe86" +
    "\001\002\000\014\052\u02ec\054\u02ea\055\u02eb\056\u02e7\123" +
    "\u02e9\001\002\000\006\061\ufeb8\064\ufeb8\001\002\000\004" +
    "\064\u02ed\001\002\000\006\061\ufeb6\064\ufeb6\001\002\000" +
    "\006\061\ufeb4\064\ufeb4\001\002\000\006\061\ufeb5\064\ufeb5" +
    "\001\002\000\006\061\ufeb7\064\ufeb7\001\002\000\006\070" +
    "\u02ee\116\ufe8a\001\002\000\006\003\u038c\011\u038b\001\002" +
    "\000\004\116\ufe8b\001\002\000\004\116\u02f2\001\002\000" +
    "\036\002\ufe8e\003\ufe8e\052\ufe8e\053\ufe8e\055\ufe8e\056\ufe8e" +
    "\057\ufe8e\071\ufe8e\100\ufe8e\104\ufe8e\111\ufe8e\124\ufe8e\126" +
    "\ufe8e\135\ufe8e\001\002\000\030\003\u0302\011\u02f9\030\u02f6" +
    "\032\u0308\033\u02ff\035\u02f5\036\u02f4\105\u02fd\112\u0309\121" +
    "\u030a\127\u0301\001\002\000\004\064\u038a\001\002\000\006" +
    "\031\ufe92\064\ufe92\001\002\000\004\060\u0385\001\002\000" +
    "\004\060\u0373\001\002\000\004\064\u0372\001\002\000\004" +
    "\064\u0371\001\002\000\006\026\u036a\066\u036b\001\002\000" +
    "\004\064\u0369\001\002\000\034\003\ufedf\011\ufedf\030\ufedf" +
    "\032\ufedf\033\ufedf\035\ufedf\036\ufedf\105\ufedf\112\ufedf\117" +
    "\ufedf\120\ufedf\121\ufedf\127\ufedf\001\002\000\052\003\ufed8" +
    "\004\ufed8\006\ufed8\007\ufed8\010\ufed8\011\ufed8\030\ufed8\031" +
    "\ufed8\032\ufed8\033\ufed8\035\ufed8\036\ufed8\043\ufed8\060\ufed8" +
    "\105\ufed8\112\ufed8\117\ufed8\120\ufed8\121\ufed8\127\ufed8\001" +
    "\002\000\004\060\u0366\001\002\000\004\064\u0365\001\002" +
    "\000\006\031\ufe93\064\ufe93\001\002\000\032\003\u0302\011" +
    "\u02f9\030\u02f6\032\u0308\033\u02ff\035\u02f5\036\u02f4\105\u02fd" +
    "\112\u0309\120\u0363\121\u030a\127\u0301\001\002\000\004\060" +
    "\u0353\001\002\000\054\003\ufed2\004\ufed2\006\ufed2\007\ufed2" +
    "\010\ufed2\011\ufed2\030\ufed2\031\ufed2\032\ufed2\033\ufed2\035" +
    "\ufed2\036\ufed2\043\ufed2\060\ufed2\064\u0352\105\ufed2\112\ufed2" +
    "\117\ufed2\120\ufed2\121\ufed2\127\ufed2\001\002\000\052\003" +
    "\ufed9\004\ufed9\006\ufed9\007\ufed9\010\ufed9\011\ufed9\030\ufed9" +
    "\031\ufed9\032\ufed9\033\ufed9\035\ufed9\036\ufed9\043\ufed9\060" +
    "\ufed9\105\ufed9\112\ufed9\117\ufed9\120\ufed9\121\ufed9\127\ufed9" +
    "\001\002\000\004\064\u0351\001\002\000\004\064\u0350\001" +
    "\002\000\004\064\u034f\001\002\000\052\003\ufed7\004\ufed7" +
    "\006\ufed7\007\ufed7\010\ufed7\011\ufed7\030\ufed7\031\ufed7\032" +
    "\ufed7\033\ufed7\035\ufed7\036\ufed7\043\ufed7\060\ufed7\105\ufed7" +
    "\112\ufed7\117\ufed7\120\ufed7\121\ufed7\127\ufed7\001\002\000" +
    "\004\011\u0343\001\002\000\030\003\u0302\011\u02f9\030\u02f6" +
    "\032\u0308\033\u02ff\035\u02f5\036\u02f4\105\u02fd\112\u0309\121" +
    "\u030a\127\u0301\001\002\000\004\060\u030b\001\002\000\004" +
    "\011\u030c\001\002\000\006\061\ufeba\072\ufeba\001\002\000" +
    "\006\061\u030f\072\u030e\001\002\000\004\011\u0310\001\002" +
    "\000\006\031\ufec5\064\ufec5\001\002\000\010\061\ufebb\065" +
    "\ufebb\072\ufebb\001\002\000\032\003\u0302\011\u02f9\030\u02f6" +
    "\032\u0308\033\u02ff\035\u02f5\036\u02f4\105\u02fd\112\u0309\117" +
    "\u0313\121\u030a\127\u0301\001\002\000\034\003\ufee0\011\ufee0" +
    "\030\ufee0\032\ufee0\033\ufee0\035\ufee0\036\ufee0\105\ufee0\112" +
    "\ufee0\117\ufee0\120\ufee0\121\ufee0\127\ufee0\001\002\000\004" +
    "\060\u0314\001\002\000\020\004\u031a\006\u0317\007\u031b\010" +
    "\u0319\011\u0315\043\u0316\060\u0318\001\002\000\056\012\ufeaa" +
    "\013\ufeaa\014\ufeaa\015\ufeaa\017\ufeaa\020\ufeaa\021\ufeaa\022" +
    "\ufeaa\023\ufeaa\024\ufeaa\025\ufeaa\027\ufeaa\031\ufeaa\040\ufeaa" +
    "\041\ufeaa\061\ufeaa\064\ufeaa\065\ufeaa\066\u0340\067\ufeaa\072" +
    "\ufeaa\114\ufeaa\001\002\000\020\004\u031a\006\u0317\007\u031b" +
    "\010\u0319\011\u0315\043\u0316\060\u0318\001\002\000\054\012" +
    "\ufeab\013\ufeab\014\ufeab\015\ufeab\017\ufeab\020\ufeab\021\ufeab" +
    "\022\ufeab\023\ufeab\024\ufeab\025\ufeab\027\ufeab\031\ufeab\040" +
    "\ufeab\041\ufeab\061\ufeab\064\ufeab\065\ufeab\067\ufeab\072\ufeab" +
    "\114\ufeab\001\002\000\020\004\u031a\006\u0317\007\u031b\010" +
    "\u0319\011\u0315\043\u0316\060\u0318\001\002\000\054\012\ufeac" +
    "\013\ufeac\014\ufeac\015\ufeac\017\ufeac\020\ufeac\021\ufeac\022" +
    "\ufeac\023\ufeac\024\ufeac\025\ufeac\027\ufeac\031\ufeac\040\ufeac" +
    "\041\ufeac\061\ufeac\064\ufeac\065\ufeac\067\ufeac\072\ufeac\114" +
    "\ufeac\001\002\000\054\012\ufead\013\ufead\014\ufead\015\ufead" +
    "\017\ufead\020\ufead\021\ufead\022\ufead\023\ufead\024\ufead\025" +
    "\ufead\027\ufead\031\ufead\040\ufead\041\ufead\061\ufead\064\ufead" +
    "\065\ufead\067\ufead\072\ufead\114\ufead\001\002\000\054\012" +
    "\ufeae\013\ufeae\014\ufeae\015\ufeae\017\ufeae\020\ufeae\021\ufeae" +
    "\022\ufeae\023\ufeae\024\ufeae\025\ufeae\027\ufeae\031\ufeae\040" +
    "\ufeae\041\ufeae\061\ufeae\064\ufeae\065\ufeae\067\ufeae\072\ufeae" +
    "\114\ufeae\001\002\000\036\012\u0322\013\u031e\014\u0327\015" +
    "\u0324\017\u031f\020\u0320\021\u0325\022\u0326\023\u0328\024\u0329" +
    "\025\u0321\040\u032a\041\u031d\061\u0323\001\002\000\022\004" +
    "\u031a\006\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318" +
    "\113\u033a\001\002\000\020\004\u031a\006\u0317\007\u031b\010" +
    "\u0319\011\u0315\043\u0316\060\u0318\001\002\000\020\004\u031a" +
    "\006\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001" +
    "\002\000\020\004\u031a\006\u0317\007\u031b\010\u0319\011\u0315" +
    "\043\u0316\060\u0318\001\002\000\020\004\u031a\006\u0317\007" +
    "\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001\002\000\020" +
    "\004\u031a\006\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060" +
    "\u0318\001\002\000\004\064\u0334\001\002\000\020\004\u031a" +
    "\006\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001" +
    "\002\000\020\004\u031a\006\u0317\007\u031b\010\u0319\011\u0315" +
    "\043\u0316\060\u0318\001\002\000\020\004\u031a\006\u0317\007" +
    "\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001\002\000\020" +
    "\004\u031a\006\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060" +
    "\u0318\001\002\000\020\004\u031a\006\u0317\007\u031b\010\u0319" +
    "\011\u0315\043\u0316\060\u0318\001\002\000\020\004\u031a\006" +
    "\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001\002" +
    "\000\022\004\u031a\006\u0317\007\u031b\010\u0319\011\u0315\031" +
    "\u032b\043\u0316\060\u0318\001\002\000\020\004\u031a\006\u0317" +
    "\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001\002\000" +
    "\054\012\u0322\013\u031e\014\u0327\015\u0324\017\u031f\020\u0320" +
    "\021\u0325\022\u0326\023\u0328\024\u0329\025\u0321\027\ufea1\031" +
    "\ufea1\040\ufea1\041\u031d\061\ufea1\064\ufea1\065\ufea1\067\ufea1" +
    "\072\ufea1\114\ufea1\001\002\000\054\012\ufe9e\013\ufe9e\014" +
    "\ufe9e\015\ufe9e\017\ufe9e\020\ufe9e\021\ufe9e\022\ufe9e\023\ufe9e" +
    "\024\ufe9e\025\ufe9e\027\ufe9e\031\ufe9e\040\ufe9e\041\ufe9e\061" +
    "\ufe9e\064\ufe9e\065\ufe9e\067\ufe9e\072\ufe9e\114\ufe9e\001\002" +
    "\000\054\012\u0322\013\u031e\014\u0327\015\u0324\017\u031f\020" +
    "\ufea9\021\ufea9\022\ufea9\023\ufea9\024\ufea9\025\ufea9\027\ufea9" +
    "\031\ufea9\040\ufea9\041\ufea9\061\ufea9\064\ufea9\065\ufea9\067" +
    "\ufea9\072\ufea9\114\ufea9\001\002\000\054\012\u0322\013\u031e" +
    "\014\u0327\015\u0324\017\u031f\020\ufea6\021\ufea6\022\ufea6\023" +
    "\ufea6\024\ufea6\025\ufea6\027\ufea6\031\ufea6\040\ufea6\041\ufea6" +
    "\061\ufea6\064\ufea6\065\ufea6\067\ufea6\072\ufea6\114\ufea6\001" +
    "\002\000\054\012\ufeb0\013\ufeb0\014\ufeb0\015\ufeb0\017\ufeb0" +
    "\020\ufeb0\021\ufeb0\022\ufeb0\023\ufeb0\024\ufeb0\025\ufeb0\027" +
    "\ufeb0\031\ufeb0\040\ufeb0\041\ufeb0\061\ufeb0\064\ufeb0\065\ufeb0" +
    "\067\ufeb0\072\ufeb0\114\ufeb0\001\002\000\054\012\u0322\013" +
    "\u031e\014\u0327\015\u0324\017\u031f\020\ufea4\021\ufea4\022\ufea4" +
    "\023\ufea4\024\ufea4\025\ufea4\027\ufea4\031\ufea4\040\ufea4\041" +
    "\ufea4\061\ufea4\064\ufea4\065\ufea4\067\ufea4\072\ufea4\114\ufea4" +
    "\001\002\000\054\012\u0322\013\u031e\014\u0327\015\u0324\017" +
    "\u031f\020\ufea7\021\ufea7\022\ufea7\023\ufea7\024\ufea7\025\ufea7" +
    "\027\ufea7\031\ufea7\040\ufea7\041\ufea7\061\ufea7\064\ufea7\065" +
    "\ufea7\067\ufea7\072\ufea7\114\ufea7\001\002\000\054\012\ufeb1" +
    "\013\ufeb1\014\ufeb1\015\ufeb1\017\ufeb1\020\ufeb1\021\ufeb1\022" +
    "\ufeb1\023\ufeb1\024\ufeb1\025\ufeb1\027\ufeb1\031\ufeb1\040\ufeb1" +
    "\041\ufeb1\061\ufeb1\064\ufeb1\065\ufeb1\067\ufeb1\072\ufeb1\114" +
    "\ufeb1\001\002\000\052\003\ufe94\004\ufe94\006\ufe94\007\ufe94" +
    "\010\ufe94\011\ufe94\030\ufe94\031\ufe94\032\ufe94\033\ufe94\035" +
    "\ufe94\036\ufe94\043\ufe94\060\ufe94\105\ufe94\112\ufe94\117\ufe94" +
    "\120\ufe94\121\ufe94\127\ufe94\001\002\000\054\012\ufeb3\013" +
    "\ufeb3\014\u0327\015\u0324\017\u031f\020\ufeb3\021\ufeb3\022\ufeb3" +
    "\023\ufeb3\024\ufeb3\025\ufeb3\027\ufeb3\031\ufeb3\040\ufeb3\041" +
    "\ufeb3\061\ufeb3\064\ufeb3\065\ufeb3\067\ufeb3\072\ufeb3\114\ufeb3" +
    "\001\002\000\054\012\u0322\013\u031e\014\u0327\015\u0324\017" +
    "\u031f\020\ufea8\021\ufea8\022\ufea8\023\ufea8\024\ufea8\025\ufea8" +
    "\027\ufea8\031\ufea8\040\ufea8\041\ufea8\061\ufea8\064\ufea8\065" +
    "\ufea8\067\ufea8\072\ufea8\114\ufea8\001\002\000\054\012\u0322" +
    "\013\u031e\014\u0327\015\u0324\017\u031f\020\ufea5\021\ufea5\022" +
    "\ufea5\023\ufea5\024\ufea5\025\ufea5\027\ufea5\031\ufea5\040\ufea5" +
    "\041\ufea5\061\ufea5\064\ufea5\065\ufea5\067\ufea5\072\ufea5\114" +
    "\ufea5\001\002\000\054\012\ufeaf\013\ufeaf\014\ufeaf\015\ufeaf" +
    "\017\ufeaf\020\ufeaf\021\ufeaf\022\ufeaf\023\ufeaf\024\ufeaf\025" +
    "\ufeaf\027\ufeaf\031\ufeaf\040\ufeaf\041\ufeaf\061\ufeaf\064\ufeaf" +
    "\065\ufeaf\067\ufeaf\072\ufeaf\114\ufeaf\001\002\000\054\012" +
    "\ufeb2\013\ufeb2\014\u0327\015\u0324\017\u031f\020\ufeb2\021\ufeb2" +
    "\022\ufeb2\023\ufeb2\024\ufeb2\025\ufeb2\027\ufeb2\031\ufeb2\040" +
    "\ufeb2\041\ufeb2\061\ufeb2\064\ufeb2\065\ufeb2\067\ufeb2\072\ufeb2" +
    "\114\ufeb2\001\002\000\020\004\u031a\006\u0317\007\u031b\010" +
    "\u0319\011\u0315\043\u0316\060\u0318\001\002\000\054\012\u0322" +
    "\013\u031e\014\u0327\015\u0324\017\u031f\020\u0320\021\u0325\022" +
    "\u0326\023\u0328\024\u0329\025\u0321\027\ufea2\031\ufea2\040\ufea2" +
    "\041\ufea2\061\ufea2\064\ufea2\065\ufea2\067\ufea2\072\ufea2\114" +
    "\ufea2\001\002\000\054\012\u0322\013\u031e\014\u0327\015\u0324" +
    "\017\u031f\020\u0320\021\u0325\022\u0326\023\u0328\024\u0329\025" +
    "\u0321\027\ufe9f\031\ufe9f\040\u032a\041\u031d\061\ufe9f\064\ufe9f" +
    "\065\ufe9f\067\ufe9f\072\ufe9f\114\ufe9f\001\002\000\036\012" +
    "\u0322\013\u031e\014\u0327\015\u0324\017\u031f\020\u0320\021\u0325" +
    "\022\u0326\023\u0328\024\u0329\025\u0321\040\u032a\041\u031d\061" +
    "\u033e\001\002\000\054\012\ufea3\013\ufea3\014\ufea3\015\ufea3" +
    "\017\ufea3\020\ufea3\021\ufea3\022\ufea3\023\ufea3\024\ufea3\025" +
    "\ufea3\027\ufea3\031\ufea3\040\ufea3\041\ufea3\061\ufea3\064\ufea3" +
    "\065\ufea3\067\ufea3\072\ufea3\114\ufea3\001\002\000\054\012" +
    "\u0322\013\u031e\014\u0327\015\u0324\017\u031f\020\u0320\021\u0325" +
    "\022\u0326\023\u0328\024\u0329\025\u0321\027\ufea0\031\ufea0\040" +
    "\ufea0\041\ufea0\061\ufea0\064\ufea0\065\ufea0\067\ufea0\072\ufea0" +
    "\114\ufea0\001\002\000\020\004\u031a\006\u0317\007\u031b\010" +
    "\u0319\011\u0315\043\u0316\060\u0318\001\002\000\036\012\u0322" +
    "\013\u031e\014\u0327\015\u0324\017\u031f\020\u0320\021\u0325\022" +
    "\u0326\023\u0328\024\u0329\025\u0321\040\u032a\041\u031d\067\u0342" +
    "\001\002\000\054\012\ufe9d\013\ufe9d\014\ufe9d\015\ufe9d\017" +
    "\ufe9d\020\ufe9d\021\ufe9d\022\ufe9d\023\ufe9d\024\ufe9d\025\ufe9d" +
    "\027\ufe9d\031\ufe9d\040\ufe9d\041\ufe9d\061\ufe9d\064\ufe9d\065" +
    "\ufe9d\067\ufe9d\072\ufe9d\114\ufe9d\001\002\000\004\026\u0344" +
    "\001\002\000\020\004\u031a\006\u0317\007\u031b\010\u0319\011" +
    "\u0315\043\u0316\060\u0318\001\002\000\036\012\u0322\013\u031e" +
    "\014\u0327\015\u0324\017\u031f\020\u0320\021\u0325\022\u0326\023" +
    "\u0328\024\u0329\025\u0321\040\u032a\041\u031d\114\u0346\001\002" +
    "\000\020\004\u031a\006\u0317\007\u031b\010\u0319\011\u0315\043" +
    "\u0316\060\u0318\001\002\000\036\012\u0322\013\u031e\014\u0327" +
    "\015\u0324\017\u031f\020\u0320\021\u0325\022\u0326\023\u0328\024" +
    "\u0329\025\u0321\027\u0348\040\u032a\041\u031d\001\002\000\032" +
    "\003\u0302\011\u02f9\030\u02f6\032\u0308\033\u02ff\035\u02f5\036" +
    "\u02f4\105\u02fd\112\u0309\116\u0349\121\u030a\127\u0301\001\002" +
    "\000\030\003\u0302\011\u02f9\030\u02f6\032\u0308\033\u02ff\035" +
    "\u02f5\036\u02f4\105\u02fd\112\u0309\121\u030a\127\u0301\001\002" +
    "\000\052\003\ufe96\004\ufe96\006\ufe96\007\ufe96\010\ufe96\011" +
    "\ufe96\030\ufe96\031\ufe96\032\ufe96\033\ufe96\035\ufe96\036\ufe96" +
    "\043\ufe96\060\ufe96\105\ufe96\112\ufe96\117\ufe96\120\ufe96\121" +
    "\ufe96\127\ufe96\001\002\000\052\003\ufe98\004\ufe98\006\ufe98" +
    "\007\ufe98\010\ufe98\011\ufe98\030\ufe98\031\ufe98\032\ufe98\033" +
    "\ufe98\035\ufe98\036\ufe98\043\ufe98\060\ufe98\105\ufe98\112\ufe98" +
    "\117\ufe98\120\ufe98\121\ufe98\127\ufe98\001\002\000\032\003" +
    "\u0302\011\u02f9\030\u02f6\032\u0308\033\u02ff\035\u02f5\036\u02f4" +
    "\105\u02fd\112\u0309\120\u034d\121\u030a\127\u0301\001\002\000" +
    "\004\064\u034e\001\002\000\052\003\ufe97\004\ufe97\006\ufe97" +
    "\007\ufe97\010\ufe97\011\ufe97\030\ufe97\031\ufe97\032\ufe97\033" +
    "\ufe97\035\ufe97\036\ufe97\043\ufe97\060\ufe97\105\ufe97\112\ufe97" +
    "\117\ufe97\120\ufe97\121\ufe97\127\ufe97\001\002\000\052\003" +
    "\ufedb\004\ufedb\006\ufedb\007\ufedb\010\ufedb\011\ufedb\030\ufedb" +
    "\031\ufedb\032\ufedb\033\ufedb\035\ufedb\036\ufedb\043\ufedb\060" +
    "\ufedb\105\ufedb\112\ufedb\117\ufedb\120\ufedb\121\ufedb\127\ufedb" +
    "\001\002\000\052\003\ufedc\004\ufedc\006\ufedc\007\ufedc\010" +
    "\ufedc\011\ufedc\030\ufedc\031\ufedc\032\ufedc\033\ufedc\035\ufedc" +
    "\036\ufedc\043\ufedc\060\ufedc\105\ufedc\112\ufedc\117\ufedc\120" +
    "\ufedc\121\ufedc\127\ufedc\001\002\000\052\003\ufeda\004\ufeda" +
    "\006\ufeda\007\ufeda\010\ufeda\011\ufeda\030\ufeda\031\ufeda\032" +
    "\ufeda\033\ufeda\035\ufeda\036\ufeda\043\ufeda\060\ufeda\105\ufeda" +
    "\112\ufeda\117\ufeda\120\ufeda\121\ufeda\127\ufeda\001\002\000" +
    "\052\003\ufed3\004\ufed3\006\ufed3\007\ufed3\010\ufed3\011\ufed3" +
    "\030\ufed3\031\ufed3\032\ufed3\033\ufed3\035\ufed3\036\ufed3\043" +
    "\ufed3\060\ufed3\105\ufed3\112\ufed3\117\ufed3\120\ufed3\121\ufed3" +
    "\127\ufed3\001\002\000\020\004\u031a\006\u0317\007\u031b\010" +
    "\u0319\011\u0315\043\u0316\060\u0318\001\002\000\036\012\u0322" +
    "\013\u031e\014\u0327\015\u0324\017\u031f\020\u0320\021\u0325\022" +
    "\u0326\023\u0328\024\u0329\025\u0321\040\u032a\041\u031d\061\u0355" +
    "\001\002\000\004\122\u0356\001\002\000\020\004\u031a\006" +
    "\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001\002" +
    "\000\022\004\u031a\006\u0317\007\u031b\010\u0319\011\u0315\031" +
    "\u0360\043\u0316\060\u0318\001\002\000\022\004\ufe9a\006\ufe9a" +
    "\007\ufe9a\010\ufe9a\011\ufe9a\031\ufe9a\043\ufe9a\060\ufe9a\001" +
    "\002\000\006\065\u035b\072\u035c\001\002\000\042\012\u0322" +
    "\013\u031e\014\u0327\015\u0324\017\u031f\020\u0320\021\u0325\022" +
    "\u0326\023\u0328\024\u0329\025\u0321\040\u032a\041\u031d\061\ufec3" +
    "\065\ufec3\072\ufec3\001\002\000\030\003\u0302\011\u02f9\030" +
    "\u02f6\032\u0308\033\u02ff\035\u02f5\036\u02f4\105\u02fd\112\u0309" +
    "\121\u030a\127\u0301\001\002\000\020\004\u031a\006\u0317\007" +
    "\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001\002\000\042" +
    "\012\u0322\013\u031e\014\u0327\015\u0324\017\u031f\020\u0320\021" +
    "\u0325\022\u0326\023\u0328\024\u0329\025\u0321\040\u032a\041\u031d" +
    "\061\ufec4\065\ufec4\072\ufec4\001\002\000\022\004\ufe99\006" +
    "\ufe99\007\ufe99\010\ufe99\011\ufe99\031\ufe99\043\ufe99\060\ufe99" +
    "\001\002\000\022\004\ufe9b\006\ufe9b\007\ufe9b\010\ufe9b\011" +
    "\ufe9b\031\ufe9b\043\ufe9b\060\ufe9b\001\002\000\030\003\u0302" +
    "\011\u02f9\030\u02f6\032\u0308\033\u02ff\035\u02f5\036\u02f4\105" +
    "\u02fd\112\u0309\121\u030a\127\u0301\001\002\000\032\003\u0302" +
    "\011\u02f9\030\u02f6\032\u0308\033\u02ff\035\u02f5\036\u02f4\105" +
    "\u02fd\112\u0309\120\u0362\121\u030a\127\u0301\001\002\000\004" +
    "\064\ufe9c\001\002\000\004\064\u0364\001\002\000\036\002" +
    "\ufe88\003\ufe88\052\ufe88\053\ufe88\055\ufe88\056\ufe88\057\ufe88" +
    "\071\ufe88\100\ufe88\104\ufe88\111\ufe88\124\ufe88\126\ufe88\135" +
    "\ufe88\001\002\000\052\003\ufed5\004\ufed5\006\ufed5\007\ufed5" +
    "\010\ufed5\011\ufed5\030\ufed5\031\ufed5\032\ufed5\033\ufed5\035" +
    "\ufed5\036\ufed5\043\ufed5\060\ufed5\105\ufed5\112\ufed5\117\ufed5" +
    "\120\ufed5\121\ufed5\127\ufed5\001\002\000\020\004\u031a\006" +
    "\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001\002" +
    "\000\006\061\u0368\072\u035c\001\002\000\006\031\ufec6\064" +
    "\ufec6\001\002\000\052\003\ufed4\004\ufed4\006\ufed4\007\ufed4" +
    "\010\ufed4\011\ufed4\030\ufed4\031\ufed4\032\ufed4\033\ufed4\035" +
    "\ufed4\036\ufed4\043\ufed4\060\ufed4\105\ufed4\112\ufed4\117\ufed4" +
    "\120\ufed4\121\ufed4\127\ufed4\001\002\000\020\004\u031a\006" +
    "\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001\002" +
    "\000\020\004\u031a\006\u0317\007\u031b\010\u0319\011\u0315\043" +
    "\u0316\060\u0318\001\002\000\036\012\u0322\013\u031e\014\u0327" +
    "\015\u0324\017\u031f\020\u0320\021\u0325\022\u0326\023\u0328\024" +
    "\u0329\025\u0321\040\u032a\041\u031d\067\u036d\001\002\000\004" +
    "\026\u036e\001\002\000\020\004\u031a\006\u0317\007\u031b\010" +
    "\u0319\011\u0315\043\u0316\060\u0318\001\002\000\040\012\u0322" +
    "\013\u031e\014\u0327\015\u0324\017\u031f\020\u0320\021\u0325\022" +
    "\u0326\023\u0328\024\u0329\025\u0321\031\ufe90\040\u032a\041\u031d" +
    "\064\ufe90\001\002\000\040\012\u0322\013\u031e\014\u0327\015" +
    "\u0324\017\u031f\020\u0320\021\u0325\022\u0326\023\u0328\024\u0329" +
    "\025\u0321\031\ufeb9\040\u032a\041\u031d\064\ufeb9\001\002\000" +
    "\052\003\ufede\004\ufede\006\ufede\007\ufede\010\ufede\011\ufede" +
    "\030\ufede\031\ufede\032\ufede\033\ufede\035\ufede\036\ufede\043" +
    "\ufede\060\ufede\105\ufede\112\ufede\117\ufede\120\ufede\121\ufede" +
    "\127\ufede\001\002\000\052\003\ufedd\004\ufedd\006\ufedd\007" +
    "\ufedd\010\ufedd\011\ufedd\030\ufedd\031\ufedd\032\ufedd\033\ufedd" +
    "\035\ufedd\036\ufedd\043\ufedd\060\ufedd\105\ufedd\112\ufedd\117" +
    "\ufedd\120\ufedd\121\ufedd\127\ufedd\001\002\000\020\004\u031a" +
    "\006\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001" +
    "\002\000\036\012\u0322\013\u031e\014\u0327\015\u0324\017\u031f" +
    "\020\u0320\021\u0325\022\u0326\023\u0328\024\u0329\025\u0321\040" +
    "\u032a\041\u031d\061\u0375\001\002\000\004\113\u0376\001\002" +
    "\000\020\011\u02f9\030\u02f6\033\u02ff\036\u02f4\105\u02fd\116" +
    "\u037f\121\u030a\001\002\000\006\031\ufecb\064\ufecb\001\002" +
    "\000\006\031\ufec7\064\ufec7\001\002\000\006\031\ufec9\064" +
    "\ufec9\001\002\000\006\031\ufeca\064\ufeca\001\002\000\006" +
    "\031\ufecc\064\ufecc\001\002\000\006\031\u0383\064\ufed1\001" +
    "\002\000\006\031\ufecf\064\ufecf\001\002\000\006\031\ufecd" +
    "\064\ufecd\001\002\000\030\003\u0302\011\u02f9\030\u02f6\032" +
    "\u0308\033\u02ff\035\u02f5\036\u02f4\105\u02fd\112\u0309\121\u030a" +
    "\127\u0301\001\002\000\006\031\ufece\064\ufece\001\002\000" +
    "\032\003\u0302\011\u02f9\030\u02f6\032\u0308\033\u02ff\035\u02f5" +
    "\036\u02f4\105\u02fd\112\u0309\120\u0382\121\u030a\127\u0301\001" +
    "\002\000\006\031\ufec8\064\ufec8\001\002\000\020\011\u02f9" +
    "\030\u02f6\033\u02ff\036\u02f4\105\u02fd\116\u037f\121\u030a\001" +
    "\002\000\006\031\ufed0\064\ufed0\001\002\000\020\004\u031a" +
    "\006\u0317\007\u031b\010\u0319\011\u0315\043\u0316\060\u0318\001" +
    "\002\000\036\012\u0322\013\u031e\014\u0327\015\u0324\017\u031f" +
    "\020\u0320\021\u0325\022\u0326\023\u0328\024\u0329\025\u0321\040" +
    "\u032a\041\u031d\061\u0387\001\002\000\004\027\u0388\001\002" +
    "\000\032\003\u0302\011\u02f9\030\u02f6\032\u0308\033\u02ff\035" +
    "\u02f5\036\u02f4\105\u02fd\112\u0309\116\u0349\121\u030a\127\u0301" +
    "\001\002\000\052\003\ufe95\004\ufe95\006\ufe95\007\ufe95\010" +
    "\ufe95\011\ufe95\030\ufe95\031\ufe95\032\ufe95\033\ufe95\035\ufe95" +
    "\036\ufe95\043\ufe95\060\ufe95\105\ufe95\112\ufe95\117\ufe95\120" +
    "\ufe95\121\ufe95\127\ufe95\001\002\000\052\003\ufed6\004\ufed6" +
    "\006\ufed6\007\ufed6\010\ufed6\011\ufed6\030\ufed6\031\ufed6\032" +
    "\ufed6\033\ufed6\035\ufed6\036\ufed6\043\ufed6\060\ufed6\105\ufed6" +
    "\112\ufed6\117\ufed6\120\ufed6\121\ufed6\127\ufed6\001\002\000" +
    "\006\065\ufeba\072\ufeba\001\002\000\012\003\ufebc\011\ufebc" +
    "\064\u0394\116\ufebc\001\002\000\010\003\ufec1\011\ufec1\116" +
    "\ufec1\001\002\000\006\065\u0391\072\u030e\001\002\000\010" +
    "\003\u038c\011\u038b\116\ufe89\001\002\000\010\003\ufec2\011" +
    "\ufec2\116\ufec2\001\002\000\014\052\u02ec\054\u02ea\055\u02eb" +
    "\056\u02e7\123\u02e9\001\002\000\004\064\u0393\001\002\000" +
    "\010\003\ufec0\011\ufec0\116\ufec0\001\002\000\010\003\ufebd" +
    "\011\ufebd\116\ufebd\001\002\000\016\052\u02ec\054\u02ea\055" +
    "\u02eb\056\u02e7\115\u0397\123\u02e9\001\002\000\004\064\u03a1" +
    "\001\002\000\004\066\u0398\001\002\000\004\007\u0399\001" +
    "\002\000\004\074\u039a\001\002\000\004\074\u039b\001\002" +
    "\000\004\007\u039c\001\002\000\004\067\u039d\001\002\000" +
    "\004\122\u039e\001\002\000\014\052\u02ec\054\u02ea\055\u02eb" +
    "\056\u02e7\123\u02e9\001\002\000\004\064\u03a0\001\002\000" +
    "\010\003\ufebe\011\ufebe\116\ufebe\001\002\000\010\003\ufebf" +
    "\011\ufebf\116\ufebf\001\002\000\014\052\u02ec\054\u02ea\055" +
    "\u02eb\056\u02e7\123\u02e9\001\002\000\006\061\ufe85\064\ufe85" +
    "\001\002\000\004\011\u02e1\001\002\000\004\065\u03a6\001" +
    "\002\000\014\052\u02ec\054\u02ea\055\u02eb\056\u02e7\123\u02e9" +
    "\001\002\000\004\064\u03a8\001\002\000\006\070\u02ee\116" +
    "\ufe8a\001\002\000\004\116\u02f2\001\002\000\036\002\ufe8f" +
    "\003\ufe8f\052\ufe8f\053\ufe8f\055\ufe8f\056\ufe8f\057\ufe8f\071" +
    "\ufe8f\100\ufe8f\104\ufe8f\111\ufe8f\124\ufe8f\126\ufe8f\135\ufe8f" +
    "\001\002\000\006\061\ufe87\064\ufe87\001\002\000\014\052" +
    "\u02ec\054\u02ea\055\u02eb\056\u02e7\123\u02e9\001\002\000\006" +
    "\061\ufe84\064\ufe84\001\002\000\004\002\uffff\001\002\000" +
    "\006\062\u03b0\101\u03b1\001\002\000\026\011\u014b\052\u0141" +
    "\053\u014a\054\u0146\055\u0151\056\u0149\057\u0147\076\u0148\077" +
    "\u014c\100\u0143\001\002\000\004\011\u03b2\001\002\000\004" +
    "\062\u03b3\001\002\000\026\011\u014b\052\u0141\053\u014a\054" +
    "\u0146\055\u0151\056\u0149\057\u0147\076\u0148\077\u014c\100\u0143" +
    "\001\002\000\030\011\u014b\052\u0141\053\u014a\054\u0146\055" +
    "\u0151\056\u0149\057\u0147\063\u03b5\076\u0148\077\u014c\100\u0143" +
    "\001\002\000\030\002\uff77\052\uff77\053\uff77\055\uff77\056" +
    "\uff77\057\uff77\071\uff77\100\uff77\104\uff77\126\uff77\135\uff77" +
    "\001\002\000\030\011\u014b\052\u0141\053\u014a\054\u0146\055" +
    "\u0151\056\u0149\057\u0147\063\u03b7\076\u0148\077\u014c\100\u0143" +
    "\001\002\000\030\002\uff79\052\uff79\053\uff79\055\uff79\056" +
    "\uff79\057\uff79\071\uff79\100\uff79\104\uff79\126\uff79\135\uff79" +
    "\001\002\000\022\052\ufff4\053\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\071\ufff4\126\ufff4\135\ufff4\001\002\000\022\052\ufff3" +
    "\053\ufff3\055\ufff3\056\ufff3\057\ufff3\071\ufff3\126\ufff3\135" +
    "\ufff3\001\002\000\022\052\ufff2\053\ufff2\055\ufff2\056\ufff2" +
    "\057\ufff2\071\ufff2\126\ufff2\135\ufff2\001\002\000\022\052" +
    "\ufff5\053\ufff5\055\ufff5\056\ufff5\057\ufff5\071\ufff5\126\ufff5" +
    "\135\ufff5\001\002\000\004\060\u03bd\001\002\000\006\011" +
    "\u02e1\061\u03bf\001\002\000\006\061\u03c3\064\u03a4\001\002" +
    "\000\004\064\u03c0\001\002\000\006\070\u02ee\116\ufe8a\001" +
    "\002\000\004\116\u02f2\001\002\000\036\002\ufe8c\003\ufe8c" +
    "\052\ufe8c\053\ufe8c\055\ufe8c\056\ufe8c\057\ufe8c\071\ufe8c\100" +
    "\ufe8c\104\ufe8c\111\ufe8c\124\ufe8c\126\ufe8c\135\ufe8c\001\002" +
    "\000\004\064\u03c4\001\002\000\006\070\u02ee\116\ufe8a\001" +
    "\002\000\004\116\u02f2\001\002\000\036\002\ufe8d\003\ufe8d" +
    "\052\ufe8d\053\ufe8d\055\ufe8d\056\ufe8d\057\ufe8d\071\ufe8d\100" +
    "\ufe8d\104\ufe8d\111\ufe8d\124\ufe8d\126\ufe8d\135\ufe8d\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03c4\000\032\002\023\055\015\057\013\062\006\063" +
    "\022\065\024\113\007\125\017\126\016\127\014\165\010" +
    "\167\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\055\015\057\013" +
    "\063\u03ad\065\024\125\017\126\016\127\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\125\u0139\126\016\127\014\001\001\000" +
    "\014\057\u0138\065\u0137\125\017\126\016\127\014\001\001" +
    "\000\010\125\u0136\126\016\127\014\001\001\000\004\121" +
    "\027\001\001\000\002\001\001\000\004\165\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\066\040\067\033" +
    "\070\041\103\030\124\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\124\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\071\061\110\060\001\001\000\002\001\001" +
    "\000\006\071\155\110\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\071\144\110\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\071\131" +
    "\110\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\071\071\110\060\114\067\117\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\071\125\110\060\001\001\000\006\071\124" +
    "\110\060\001\001\000\006\071\123\110\060\001\001\000" +
    "\006\071\122\110\060\001\001\000\006\071\121\110\060" +
    "\001\001\000\006\071\120\110\060\001\001\000\006\071" +
    "\117\110\060\001\001\000\006\071\116\110\060\001\001" +
    "\000\006\071\115\110\060\001\001\000\006\071\114\110" +
    "\060\001\001\000\006\071\113\110\060\001\001\000\006" +
    "\071\112\110\060\001\001\000\006\071\111\110\060\001" +
    "\001\000\006\071\110\110\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\071\130\110\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\071\134\110\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\071\137\110\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\071\071\110\060\114\067\117\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\071\161\110\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\170" +
    "\001\001\000\002\001\001\000\032\072\220\073\207\074" +
    "\204\075\173\076\222\077\172\100\201\101\223\102\205" +
    "\104\176\105\213\112\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\074\257\106" +
    "\256\124\260\001\001\000\006\071\265\110\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\071\263\110\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\274\110\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\277\001\001\000\032" +
    "\072\220\073\207\074\204\075\173\076\222\077\172\100" +
    "\201\101\223\102\205\104\176\105\213\112\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\071\071\110\060" +
    "\114\067\117\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\130\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\071\071\110\060\114\067\117\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\344\001\001\000\032\072\220\073" +
    "\207\074\204\075\173\076\222\077\172\100\201\101\223" +
    "\102\205\104\176\105\213\112\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\071\350\110\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\071\354\110\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\071\357\110\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\362\001\001\000\032" +
    "\072\220\073\207\074\204\075\173\076\222\077\172\100" +
    "\201\101\223\102\205\104\176\105\213\112\175\001\001" +
    "\000\004\116\365\001\001\000\010\100\367\104\176\105" +
    "\213\001\001\000\002\001\001\000\004\064\370\001\001" +
    "\000\002\001\001\000\034\072\220\073\207\074\204\075" +
    "\173\076\222\077\172\100\201\101\223\102\205\104\176" +
    "\105\213\112\175\172\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\377\001\001\000\004\123\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\071\u0104" +
    "\110\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\072\u0111\073\u010c\074\u010a\075\u0107\076\u0112\077\u0106" +
    "\100\u0109\101\u0113\102\u010b\104\176\105\213\111\u0108\120" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\072\u0111\073\u010c\074\u010a\075\u0107\076\u0112\077\u0106\100" +
    "\u0109\101\u0113\102\u010b\104\176\105\213\111\u0108\120\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\072\u0111\073\u010c\074\u010a\075\u0107" +
    "\076\u0112\077\u0106\100\u0109\101\u0113\102\u010b\104\176\105" +
    "\213\111\u0108\120\u0121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\071\u0125\110\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\u0128" +
    "\001\001\000\032\072\220\073\207\074\204\075\173\076" +
    "\222\077\172\100\201\101\223\102\205\104\176\105\213" +
    "\112\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\115\u012f\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\071\071\110" +
    "\060\114\067\117\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\u0135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\u0143\012\u014f\033\u014e\043\u014d\046\u014c" +
    "\051\u02dc\052\u02db\060\u0144\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\u0143\012\u014f\033\u014e\043\u014d" +
    "\046\u014c\051\u0141\060\u0144\001\001\000\002\001\001\000" +
    "\016\006\u0143\012\u014f\033\u014e\043\u014d\046\u02da\060\u0144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u029e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u029b\042\u018e\001\001\000\006" +
    "\012\u0158\036\u0155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u015b\001\001\000\046\004" +
    "\u0168\007\u0179\010\u015e\011\u016f\012\u0173\013\u0176\014\u0172" +
    "\015\u0163\016\u0174\017\u0160\020\u0171\021\u016e\022\u0177\031" +
    "\u0161\034\u016d\040\u015c\041\u0166\047\u0178\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u021a\042\u018e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u01ed\042\u018e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u017e\001" +
    "\001\000\046\004\u0168\007\u0179\010\u015e\011\u016f\012\u0173" +
    "\013\u0176\014\u0172\015\u0163\016\u0174\017\u0160\020\u0171\021" +
    "\u016e\022\u0177\031\u0161\034\u016d\040\u015c\041\u0166\047\u0178" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u018f\042\u018e\001\001\000\002\001\001\000\006\005\u01d1" +
    "\042\u018e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u01ca\042\u018e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\u01ae\042\u018e\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u01ad\042" +
    "\u018e\001\001\000\006\005\u01ac\042\u018e\001\001\000\006" +
    "\005\u01ab\042\u018e\001\001\000\006\005\u01aa\042\u018e\001" +
    "\001\000\006\005\u01a9\042\u018e\001\001\000\006\005\u01a8" +
    "\042\u018e\001\001\000\006\005\u01a7\042\u018e\001\001\000" +
    "\002\001\001\000\006\005\u01a5\042\u018e\001\001\000\006" +
    "\005\u01a4\042\u018e\001\001\000\006\005\u01a3\042\u018e\001" +
    "\001\000\006\005\u01a2\042\u018e\001\001\000\006\005\u01a1" +
    "\042\u018e\001\001\000\006\005\u01a0\042\u018e\001\001\000" +
    "\006\005\u019f\042\u018e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\u01ba\037\u01b9\042\u018e\054\u01c6\001\001" +
    "\000\006\005\u01c1\042\u018e\001\001\000\004\045\u01b5\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\u01ba" +
    "\037\u01b9\042\u018e\054\u01bb\001\001\000\004\045\u01b8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\u01be\001" +
    "\001\000\002\001\001\000\006\005\u01c0\042\u018e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u01c4\042\u018e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u01c9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\u01ba\037\u01ce\042" +
    "\u018e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\u01ba\037\u01b9\042" +
    "\u018e\054\u01d3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u01d7\042\u018e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u01da\001\001" +
    "\000\046\004\u0168\007\u0179\010\u015e\011\u016f\012\u0173\013" +
    "\u0176\014\u0172\015\u0163\016\u0174\017\u0160\020\u0171\021\u016e" +
    "\022\u0177\031\u0161\034\u016d\040\u015c\041\u0166\047\u0178\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\u01e2" +
    "\042\u018e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u01ef\001\001\000\004\030\u01f2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\u01f4\042\u018e\001\001\000\002\001\001" +
    "\000\004\003\u01f6\001\001\000\046\004\u0168\007\u0179\010" +
    "\u015e\011\u016f\012\u0173\013\u0176\014\u0172\015\u0163\016\u0174" +
    "\017\u0160\020\u0171\021\u016e\022\u0177\031\u0161\034\u016d\040" +
    "\u015c\041\u0166\047\u0178\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u01fa\001\001\000\046\004\u0168\007" +
    "\u0179\010\u015e\011\u016f\012\u0173\013\u0176\014\u0172\015\u0163" +
    "\016\u0174\017\u0160\020\u0171\021\u016e\022\u0177\031\u0161\034" +
    "\u016d\040\u015c\041\u0166\047\u0178\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u01ff\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u0207\001\001\000\002\001\001" +
    "\000\010\005\u020a\026\u0209\042\u018e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\u020d" +
    "\042\u018e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u020a\026\u0211\042\u018e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\u020a\026\u0215\042\u018e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\u0250\042\u018e\001\001\000\012\005\u01ba\037\u01b9\042" +
    "\u018e\054\u0247\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u023a\042\u018e\001\001\000\006\044\u0223\050" +
    "\u0224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u0226\042\u018e\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\u01ba\037\u01b9\042\u018e" +
    "\054\u0235\001\001\000\006\040\u022b\050\u022c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\u01ba\037\u01b9\042\u018e\054\u022f\001\001\000\006\044" +
    "\u0223\050\u022c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\u0233\050\u0234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\u0239\050\u0234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u0243\042\u018e\001\001\000\006\005\u023e\042" +
    "\u018e\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\u0241\042\u018e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\u0233\050\u024a\001\001\000\002\001\001\000\006" +
    "\005\u024c\042\u018e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u025f\042\u018e\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u0262\042\u018e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u0265\001\001\000" +
    "\052\004\u0267\007\u0179\010\u015e\011\u016f\012\u0173\013\u0176" +
    "\014\u0172\015\u0163\016\u0174\017\u0160\020\u0171\021\u016e\022" +
    "\u0177\031\u0161\032\u0268\034\u016d\040\u015c\041\u0166\047\u0178" +
    "\061\u0269\001\001\000\004\025\u026c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\u026f\021" +
    "\u016e\022\u0177\001\001\000\004\003\u0270\001\001\000\002" +
    "\001\001\000\050\004\u0168\007\u0179\010\u015e\011\u016f\012" +
    "\u0173\013\u0176\014\u0172\015\u0163\016\u0174\017\u0160\020\u0171" +
    "\021\u016e\022\u0177\031\u0161\034\u016d\040\u015c\041\u0166\047" +
    "\u0178\173\u0271\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\u0274\012\u0173\023\u0276\047\u0275\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u0283\042\u018e" +
    "\001\001\000\002\001\001\000\012\005\u01ba\037\u01b9\042" +
    "\u018e\054\u0280\001\001\000\004\050\u0224\001\001\000\002" +
    "\001\001\000\012\005\u01ba\037\u01b9\042\u018e\054\u027d\001" +
    "\001\000\004\050\u022c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u0234\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u024a\001\001\000\002\001\001" +
    "\000\004\024\u0286\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u0289\001\001\000\046" +
    "\004\u0168\007\u0179\010\u015e\011\u016f\012\u0173\013\u0176\014" +
    "\u0172\015\u0163\016\u0174\017\u0160\020\u0171\021\u016e\022\u0177" +
    "\031\u0161\034\u016d\040\u015c\041\u0166\047\u0178\001\001\000" +
    "\002\001\001\000\006\005\u028e\042\u018e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\u01ba\037\u01b9\042\u018e\054\u0290\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0299\001\001\000\002\001\001\000\004\003\u0297" +
    "\001\001\000\046\004\u0168\007\u0179\010\u015e\011\u016f\012" +
    "\u0173\013\u0176\014\u0172\015\u0163\016\u0174\017\u0160\020\u0171" +
    "\021\u016e\022\u0177\031\u0161\034\u016d\040\u015c\041\u0166\047" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u0158\036\u02a2\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u02a5\001\001\000\046\004\u0168" +
    "\007\u0179\010\u015e\011\u016f\012\u0173\013\u0176\014\u0172\015" +
    "\u0163\016\u0174\017\u0160\020\u0171\021\u016e\022\u0177\031\u0161" +
    "\034\u016d\040\u015c\041\u0166\047\u0178\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u02a9\001\001\000\046" +
    "\004\u0168\007\u0179\010\u015e\011\u016f\012\u0173\013\u0176\014" +
    "\u0172\015\u0163\016\u0174\017\u0160\020\u0171\021\u016e\022\u0177" +
    "\031\u0161\034\u016d\040\u015c\041\u0166\047\u0178\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u02b8\042\u018e" +
    "\001\001\000\006\012\u0158\036\u02af\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u02b2" +
    "\001\001\000\046\004\u0168\007\u0179\010\u015e\011\u016f\012" +
    "\u0173\013\u0176\014\u0172\015\u0163\016\u0174\017\u0160\020\u0171" +
    "\021\u016e\022\u0177\031\u0161\034\u016d\040\u015c\041\u0166\047" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u02b6\001\001\000\046\004\u0168\007\u0179\010\u015e\011" +
    "\u016f\012\u0173\013\u0176\014\u0172\015\u0163\016\u0174\017\u0160" +
    "\020\u0171\021\u016e\022\u0177\031\u0161\034\u016d\040\u015c\041" +
    "\u0166\047\u0178\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u0158\036\u02bb\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u02be\001\001" +
    "\000\046\004\u0168\007\u0179\010\u015e\011\u016f\012\u0173\013" +
    "\u0176\014\u0172\015\u0163\016\u0174\017\u0160\020\u0171\021\u016e" +
    "\022\u0177\031\u0161\034\u016d\040\u015c\041\u0166\047\u0178\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u02c2" +
    "\001\001\000\046\004\u0168\007\u0179\010\u015e\011\u016f\012" +
    "\u0173\013\u0176\014\u0172\015\u0163\016\u0174\017\u0160\020\u0171" +
    "\021\u016e\022\u0177\031\u0161\034\u016d\040\u015c\041\u0166\047" +
    "\u0178\001\001\000\002\001\001\000\006\012\u0158\036\u02c5" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u02c8\001\001\000\046\004\u0168\007\u0179\010\u015e\011\u016f" +
    "\012\u0173\013\u0176\014\u0172\015\u0163\016\u0174\017\u0160\020" +
    "\u0171\021\u016e\022\u0177\031\u0161\034\u016d\040\u015c\041\u0166" +
    "\047\u0178\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u02cc\001\001\000\046\004\u0168\007\u0179\010\u015e" +
    "\011\u016f\012\u0173\013\u0176\014\u0172\015\u0163\016\u0174\017" +
    "\u0160\020\u0171\021\u016e\022\u0177\031\u0161\034\u016d\040\u015c" +
    "\041\u0166\047\u0178\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\u0158\036\u02d0\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u02d3\001\001\000\046\004" +
    "\u0168\007\u0179\010\u015e\011\u016f\012\u0173\013\u0176\014\u0172" +
    "\015\u0163\016\u0174\017\u0160\020\u0171\021\u016e\022\u0177\031" +
    "\u0161\034\u016d\040\u015c\041\u0166\047\u0178\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u02d7\001\001\000" +
    "\046\004\u0168\007\u0179\010\u015e\011\u016f\012\u0173\013\u0176" +
    "\014\u0172\015\u0163\016\u0174\017\u0160\020\u0171\021\u016e\022" +
    "\u0177\031\u0161\034\u016d\040\u015c\041\u0166\047\u0178\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\u0143\012\u014f\033\u014e\043\u014d" +
    "\046\u02da\060\u0144\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\152\u02e1\153\u02e4\157\u02e2\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\141\u02e7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\166\u02ee" +
    "\170\u02ef\001\001\000\010\133\u038e\157\u038d\163\u038c\001" +
    "\001\000\002\001\001\000\004\171\u02f0\001\001\000\002" +
    "\001\001\000\034\132\u02ff\134\u02fa\136\u02f7\137\u0304\142" +
    "\u02fb\143\u0302\144\u0306\146\u02f6\147\u0305\150\u02fd\151\u02f2" +
    "\162\u0303\164\u02f9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\134\u0311\136\u02f7\137" +
    "\u0304\142\u02fb\143\u0302\144\u0306\146\u02f6\147\u0305\150\u02fd" +
    "\151\u02f2\162\u0303\164\u02f9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\132\u0310\134\u02fa\136\u02f7\137\u0304\142\u02fb" +
    "\143\u0302\144\u0306\146\u02f6\147\u0305\150\u02fd\151\u02f2\162" +
    "\u0303\164\u02f9\001\001\000\002\001\001\000\004\157\u030c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\134\u0311" +
    "\136\u02f7\137\u0304\142\u02fb\143\u0302\144\u0306\146\u02f6\147" +
    "\u0305\150\u02fd\151\u02f2\162\u0303\164\u02f9\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\135\u031b\001\001\000" +
    "\002\001\001\000\004\135\u033e\001\001\000\002\001\001" +
    "\000\004\135\u033c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\135\u033a" +
    "\001\001\000\004\135\u0338\001\001\000\004\135\u0337\001" +
    "\001\000\004\135\u0336\001\001\000\004\135\u0335\001\001" +
    "\000\004\135\u0334\001\001\000\002\001\001\000\004\135" +
    "\u0332\001\001\000\004\135\u0331\001\001\000\004\135\u0330" +
    "\001\001\000\004\135\u032f\001\001\000\004\135\u032e\001" +
    "\001\000\004\135\u032d\001\001\000\004\135\u032b\001\001" +
    "\000\004\135\u032c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\135" +
    "\u033b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\135" +
    "\u0340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\135\u0344\001\001\000\002\001\001\000" +
    "\004\135\u0346\001\001\000\002\001\001\000\034\134\u0349" +
    "\136\u02f7\137\u0304\142\u02fb\143\u0302\144\u0306\146\u02f6\147" +
    "\u0305\150\u02fd\151\u02f2\156\u034a\162\u0303\164\u02f9\001\001" +
    "\000\034\132\u034b\134\u02fa\136\u02f7\137\u0304\142\u02fb\143" +
    "\u0302\144\u0306\146\u02f6\147\u0305\150\u02fd\151\u02f2\162\u0303" +
    "\164\u02f9\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\134\u0311\136\u02f7\137\u0304\142\u02fb\143\u0302\144\u0306" +
    "\146\u02f6\147\u0305\150\u02fd\151\u02f2\162\u0303\164\u02f9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\135\u0353\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\135\u0359\154\u0358\160\u0356\161\u0357\001\001\000" +
    "\010\135\u0359\154\u0358\161\u035e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\134\u035d\136" +
    "\u02f7\137\u0304\142\u02fb\143\u0302\144\u0306\146\u02f6\147\u0305" +
    "\150\u02fd\151\u02f2\162\u0303\164\u02f9\001\001\000\004\135" +
    "\u035c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\132\u0360\134\u02fa\136\u02f7\137\u0304\142" +
    "\u02fb\143\u0302\144\u0306\146\u02f6\147\u0305\150\u02fd\151\u02f2" +
    "\162\u0303\164\u02f9\001\001\000\032\134\u0311\136\u02f7\137" +
    "\u0304\142\u02fb\143\u0302\144\u0306\146\u02f6\147\u0305\150\u02fd" +
    "\151\u02f2\162\u0303\164\u02f9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\135\u0359\154\u0366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\u036f\001\001\000\004" +
    "\135\u036b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\135\u036e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\135\u0373\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\136\u037c" +
    "\137\u037d\145\u0377\146\u0378\147\u037f\150\u0376\151\u037a\155" +
    "\u037b\164\u0379\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\132\u0380\134\u02fa\136\u02f7\137\u0304\142\u02fb\143\u0302\144" +
    "\u0306\146\u02f6\147\u0305\150\u02fd\151\u02f2\162\u0303\164\u02f9" +
    "\001\001\000\002\001\001\000\032\134\u0311\136\u02f7\137" +
    "\u0304\142\u02fb\143\u0302\144\u0306\146\u02f6\147\u0305\150\u02fd" +
    "\151\u02f2\162\u0303\164\u02f9\001\001\000\002\001\001\000" +
    "\024\136\u037c\137\u037d\145\u0377\146\u0378\147\u037f\150\u0376" +
    "\151\u037a\155\u0383\164\u0379\001\001\000\002\001\001\000" +
    "\004\135\u0385\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\134\u0349\136\u02f7\137\u0304\142\u02fb\143\u0302\144" +
    "\u0306\146\u02f6\147\u0305\150\u02fd\151\u02f2\156\u0388\162\u0303" +
    "\164\u02f9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\157\u038d\163\u038f\001\001\000\002\001" +
    "\001\000\004\141\u0391\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\141\u0395\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\141\u039e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\141" +
    "\u03a2\001\001\000\002\001\001\000\006\153\u03aa\157\u02e2" +
    "\001\001\000\002\001\001\000\004\141\u03a6\001\001\000" +
    "\002\001\001\000\006\166\u02ee\170\u03a8\001\001\000\004" +
    "\171\u03a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\141\u03ac\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\u0143\012\u014f\033\u014e\043" +
    "\u014d\046\u014c\051\u03b5\060\u0144\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\u0143\012\u014f\033\u014e\043" +
    "\u014d\046\u014c\051\u03b3\060\u0144\001\001\000\016\006\u0143" +
    "\012\u014f\033\u014e\043\u014d\046\u02da\060\u0144\001\001\000" +
    "\002\001\001\000\016\006\u0143\012\u014f\033\u014e\043\u014d" +
    "\046\u02da\060\u0144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\152\u03bd\153\u02e4\157\u02e2\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\166\u02ee" +
    "\170\u03c0\001\001\000\004\171\u03c1\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\166\u02ee\170\u03c4\001\001" +
    "\000\004\171\u03c5\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String currentAmbit;

    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    // public void syntax_error(Symbol s){
    //     System.out.println("Error Sintactico en la linea " +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }

    // public void unrecovered_syntax_error (Symbol s){
    //     System.out.println("Error Sintactico no recuperable en la linea" +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pascal 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pascal ::= pascalCode java_C 
            {
              LinkedList<Instruction> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c_Jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_Jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c_J = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();
        if(p!=null){
                 
                RESULT.add(p);
        }
        if(c_J!=null){
                RESULT.addAll(c_J);
        }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascal",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pascal ::= java_C 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascal",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // java_C ::= claass cPrincipal 
            {
              LinkedList<Instruction> RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> j = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = new LinkedList<>(); 
        if(j!=null){
        ClasesJava cl = new ClasesJava(j, jleft, jright);
                RESULT.add(cl);
        }
        if(c!=null){
                 RESULT.add(c); 
        } 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("java_C",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // java_C ::= cPrincipal 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); 
        if(c!=null){
                RESULT.add(c); 
        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("java_C",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // java_C ::= error 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("java_C",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cPrincipal ::= includes declaracionC mainC 
            {
              Instruction RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Includes in = (Includes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction main = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Programa(in, ins, main, inleft, inright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cPrincipal",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cPrincipal ::= 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cPrincipal",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // includes ::= includeP includes 
            {
              Includes RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Includes ins = (Includes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
           RESULT.addSubPPascal(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // includes ::= includeJ includes 
            {
              Includes RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Includes ins = (Includes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
         RESULT.addClaseJava(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // includes ::= 
            {
              Includes RESULT =null;
		 RESULT = new Includes(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // includeP ::= INCLUDE PASCALUNO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeP",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // includeP ::= INCLUDE PASCALSIMP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeP",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // includeJ ::= INCLUDE JAVAUNO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeJ",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // includeJ ::= INCLUDE JAVATODO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeJ",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decConstC ::= CONST typeC ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementC(id, exp, t, idleft, idright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decConstC",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decVarsC ::= typeC ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementC(id, exp, t, idleft, idright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVarsC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decVarsC ::= typeC ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementC(id, t, idleft, idright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVarsC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainC ::= VOID MAIN PAR_OP PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MainnC("MAIN", ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainC",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionC ::= declaracionC decConstC 
            {
              LinkedList<Instruction> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> decs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction dec = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; RESULT.add(dec);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionC ::= declaracionC decVarsC 
            {
              LinkedList<Instruction> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> decs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction dec = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; RESULT.add(dec);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionC ::= declaracionC decObjetos 
            {
              LinkedList<Instruction> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> decs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction dec = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; RESULT.add(dec);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionC ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instructionsC ::= instructionsC insC 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; RESULT.add(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instructionsC ::= error SEMIC 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instructionsC ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typeC ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typeC ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typeC ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typeC ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // printf ::= PRINT PAR_OP CADENA PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // printf ::= PRINT PAR_OP CADENA varsPrintf PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PrintsC(c, ids, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varsPrintf ::= COLON ID 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.add(id);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsPrintf",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varsPrintf ::= varsPrintf COLON ID 
            {
              LinkedList<String> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ids; RESULT.add(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsPrintf",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // scanf ::= SCAN PAR_OP MASK_D COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // scanf ::= SCAN PAR_OP MASK_C COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // scanf ::= SCAN PAR_OP MASK_F COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // scanf ::= SCAN PAR_OP MASK_S COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacionC ::= ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmenttC(id, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionC",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // insC ::= PRINT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // insC ::= CLRSCR PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // insC ::= GETCH PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // insC ::= scanf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // insC ::= asignacionC 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // insC ::= printf 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // insC ::= whileC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // insC ::= forC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // insC ::= DOC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // insC ::= BREAK SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // insC ::= CONTINUE SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // insC ::= ifC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // insC ::= switchC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // insC ::= callC 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inSwC ::= PRINT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inSwC ::= CLRSCR PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inSwC ::= GETCH PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inSwC ::= scanf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inSwC ::= asignacionC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inSwC ::= printf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inSwC ::= whileC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inSwC ::= forC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inSwC ::= DOC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // inSwC ::= ifC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // inSwC ::= switchC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inSwC ::= callC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // insSwC ::= inSwC insSwC 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insSwC",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // insSwC ::= 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insSwC",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decObjetos ::= JAVA DOT ID instancesC 
            {
              Instruction RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ReferenceC(cl,ins, clleft, clright);    
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decObjetos",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instancesC ::= ID PAR_OP paramssC PAR_CL COLON instancesC 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
        InstanceJava cl = new InstanceJava(id, p, idleft, idright); 
        RESULT.add(cl);

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instancesC",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instancesC ::= ID PAR_OP paramssC PAR_CL SEMIC 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new LinkedList<>();
          InstanceJava cl = new InstanceJava(id, p, idleft, idright); 
          RESULT.add(cl);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instancesC",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // whileC ::= WHILE PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileC",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DOC ::= DO K_OP instructionsC K_CL WHILE PAR_OP EXPRESIONCC PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOC",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ifC ::= IF PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL ELSE ifC 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction elif = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IFC(exp, ins, elif, expleft, expright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifC",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ifC ::= elseesC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifC",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ifC ::= simpleIfC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifC",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$0 ::= 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = ins;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cierreElseC ::= ELSE K_OP instructionsC NT$0 K_CL 
            {
              LinkedList<Instruction> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (LinkedList<Instruction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierreElseC",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simpleIfC ::= IF PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(a, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleIfC",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // elseesC ::= IF PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL cierreElseC 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insElsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insElsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> insEls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, insEls, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseesC",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // forC ::= FOR PAR_OP declaraAsignaC EXPRESIONCC SEMIC updateVarForC PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaFor(a, b, c, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forC",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // updateVarForC ::= ID PLUSPLUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarForC",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // updateVarForC ::= ID MINUSMINUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarForC",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // updateVarForC ::= ID ASSIGNMENT EXPRESIONCC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarForC",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaraAsignaC ::= asignacionC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsignaC",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaraAsignaC ::= typeC ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsignaC",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switchC ::= SWITCH PAR_OP ID PAR_CL K_OP listCasesC K_CL 
            {
              Instruction RESULT =null;
		int cazzozleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cazzozright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> cazzoz = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchC",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listCasesC ::= listCasesC caseC 
            {
              LinkedList<CaseMatch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCasesC",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listCasesC ::= 
            {
              LinkedList<CaseMatch> RESULT =null;
		  RESULT = new LinkedList<>();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCasesC",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // caseC ::= CASE EXPRESIONCC POINTS insSwC BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseC",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // caseC ::= DEFAULT POINTS insSwC BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(null, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseC",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // callsParametersC ::= callsParametersC COLON EXPRESIONCC 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParametersC",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // callsParametersC ::= EXPRESIONCC 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruction>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParametersC",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // paramssC ::= callsParametersC 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramssC",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // paramssC ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramssC",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // callC ::= PASCAL DOT ID PAR_OP paramssC PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new call_to_pas(id, p, idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // callC ::= JAVA DOT ID DOT ID PAR_OP paramssC PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new call_to_java(id, id1, p, idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // callExpC ::= PASCAL DOT ID PAR_OP paramssC PAR_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new call_to_pas(id, p, idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExpC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // callExpC ::= JAVA DOT ID DOT ID PAR_OP paramssC PAR_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new call_to_java(id, id1, p, idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExpC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESIONCC ::= MINUS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Negacion(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESIONCC ::= NOT EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESIONCC ::= EXPRESIONCC PLUS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESIONCC ::= EXPRESIONCC MINUS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESIONCC ::= EXPRESIONCC DIVIDED EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESIONCC ::= EXPRESIONCC TIMES EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESIONCC ::= EXPRESIONCC MOD EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESIONCC ::= EXPRESIONCC RAISED EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Raised(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESIONCC ::= EXPRESIONCC EQUALS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESIONCC ::= EXPRESIONCC DIFFERENT EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESIONCC ::= EXPRESIONCC LESS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESIONCC ::= EXPRESIONCC L_EQUALS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESIONCC ::= EXPRESIONCC GREATER EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESIONCC ::= EXPRESIONCC G_EQUALS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESIONCC ::= EXPRESIONCC AND EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESIONCC ::= EXPRESIONCC OR EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESIONCC ::= PAR_OP EXPRESIONCC PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESIONCC ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESIONCC ::= CHARAC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESIONCC ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESIONCC ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESIONCC ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccessC(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESIONCC ::= ID BRACK_L EXPRESIONCC BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESIONCC ::= ID BRACK_L EXPRESIONCC BRACK_R BRACK_L EXPRESIONCC BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indx1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indx1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction indx1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx1, indx2, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESIONCC ::= GETCH PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESIONCC ::= callExpC 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // claass ::= Oneclaass 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // claass ::= claass Oneclaass 
            {
              LinkedList<Instruction> RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> cls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cls; RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // InstructionES ::= InstructionES Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // InstructionES ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // constructor ::= ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, p, ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // constructor ::= ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, new LinkedList<HashMap>(), ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // constructor ::= modPriv ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, p, ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // constructor ::= modPriv ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, new LinkedList<HashMap>(), ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // modPriv ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // modPriv ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // modPriv ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Oneclaass ::= CLASS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Oneclaass ::= PUBLIC CLASS ID K_OP insClass K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Classs(id, ins, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Oneclaass ::= CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Oneclaass ::= PUBLIC CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // insClass ::= gInstructionss 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insClass",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // insClass ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insClass",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // gInstructionss ::= gIns 
            {
              LinkedList<Instruction> RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(in);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // gInstructionss ::= gInstructionss gIns 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; RESULT.add(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // gIns ::= methodd 
            {
              Instruction RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction m = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // gIns ::= globalDec 
            {
              Instruction RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction g = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = g; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Instruction ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Instruction ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Instruction ::= print 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Instruction ::= if 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Instruction ::= increaseDecrease 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Instruction ::= for 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Instruction ::= while 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Instruction ::= do 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Instruction ::= match 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Instruction ::= returnn 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Instruction ::= continue 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Instruction ::= declaracionEstructuraD 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Instruction ::= call 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Instruction ::= error SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Instruction ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Negacion(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESION ::= EXPRESION DIVIDED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESION ::= EXPRESION TIMES EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION ::= EXPRESION RAISED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Raised(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION ::= EXPRESION EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION ::= EXPRESION DIFFERENT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESION ::= EXPRESION L_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESION ::= EXPRESION G_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPRESION ::= PAR_OP EXPRESION PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXPRESION ::= CHARAC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPRESION ::= BOOL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPRESION ::= NULL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Null(new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Access(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPRESION ::= THIS DOT ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Access(a, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indx1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indx1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction indx1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx1, indx2, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPRESION ::= callEXP 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPRESION ::= NEW ID PAR_OP callsParameters PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Reference(t, p, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPRESION ::= NEW ID PAR_OP PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Reference(t, new LinkedList<>(), tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // methodd ::= modPriv VOID ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // methodd ::= modPriv VOID ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // methodd ::= modPriv typeVar ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // methodd ::= modPriv typeVar ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // methodd ::= VOID ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // methodd ::= VOID ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // methodd ::= typeVar ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // methodd ::= typeVar ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // methodd ::= constructor 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // parametersFuncts ::= parametersFuncts COLON typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var elseParam= new HashMap<String, Object>();
                                            elseParam.put("id", id);
                                            elseParam.put("tipo", b);
                                            RESULT.add(elseParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // parametersFuncts ::= typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var oneParam = new HashMap<String, Object>();
                                            oneParam.put("id",id);
                                            oneParam.put("tipo", a);
                                            RESULT.add(oneParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // paramss ::= callsParameters 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // paramss ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // callEXP ::= ID DOT callEXP2 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int call1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int call1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call call1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Call(id, call1, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // callEXP ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // callEXP ::= ID PAR_OP paramss PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // callEXP2 ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // callEXP2 ::= ID PAR_OP paramss PAR_CL 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // callEXP2 ::= ID DOT callEXP2 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // callEXP2 ::= ID 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // call ::= ID DOT call2 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int call1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int call1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call call1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Call(id, call1, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // call ::= ID PAR_OP paramss PAR_CL DOT call2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // call ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // call2 ::= ID PAR_OP paramss PAR_CL DOT call 
            {
              Call RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // call2 ::= ID DOT call 
            {
              Call RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // call2 ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // callsParameters ::= callsParameters COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // callsParameters ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruction>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // instructionIF ::= Instruction 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionIF",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // instructionIF ::= break 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionIF",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // instructionsIF ::= instructionsIF instructionIF 
            {
              LinkedList<Instruction> RESULT =null;
		int inssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> inss = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = inss; RESULT.add(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsIF",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // instructionsIF ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsIF",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // if ::= IF PAR_OP EXPRESION PAR_CL K_OP instructionsIF K_CL ELSE if 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction elif = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, elif, expleft, expright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // if ::= elsees 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // if ::= simpleIf 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // for ::= FOR PAR_OP declaraAsigna EXPRESION SEMIC updateVarFor PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaFor(a, b, c, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // updateVarFor ::= ID PLUSPLUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // updateVarFor ::= ID MINUSMINUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // updateVarFor ::= ID ASSIGNMENT EXPRESION 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // while ::= WHILE PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaWhile(a, ins, false,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // do ::= DO K_OP InstructionES K_CL WHILE PAR_OP EXPRESION PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CiclicaWhile(a, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // match ::= SWITCH EXPRESION K_OP listCases K_CL 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cazzozleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cazzozright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> cazzoz = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(exp, cazzoz, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("match",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // listCases ::= listCases case 
            {
              LinkedList<CaseMatch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // listCases ::= 
            {
              LinkedList<CaseMatch> RESULT =null;
		  RESULT = new LinkedList<>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // case ::= CASE EXPRESION POINTS InstructionES BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // case ::= DEFAULT POINTS InstructionES BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(null, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // declaraAsigna ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // declaraAsigna ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$1 ::= 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = ins;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",121, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // cierreElse ::= ELSE K_OP InstructionES NT$1 K_CL 
            {
              LinkedList<Instruction> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (LinkedList<Instruction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierreElse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // simpleIf ::= IF PAR_OP EXPRESION PAR_CL K_OP instructionsIF K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(a, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleIf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // elsees ::= IF PAR_OP EXPRESION PAR_CL K_OP instructionsIF K_CL cierreElse 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insElsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insElsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> insEls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, insEls, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsees",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // print ::= PRINT PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prints(a, false, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // print ::= PRINTLN PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prints(a, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // declaracion ::= typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // declaracion ::= typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // declaracion ::= typeVar ID ASSIGNMENT INP_INT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.ENTERO), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // declaracion ::= typeVar ID ASSIGNMENT INP_C PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.CARACTER), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // declaracion ::= typeVar ID ASSIGNMENT INP_F PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.DECIMAL), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // globalDec ::= modPriv typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // globalDec ::= modPriv typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // globalDec ::= typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // globalDec ::= typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVectorAlone BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, vals, null, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVector2D BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruction>> vals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, null, vals, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // valoresVector2D ::= BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // valoresVector2D ::= valoresVector2D COLON BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int listaValsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaValsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> listaVals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = listaVals; RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // valoresVectorAlone ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.add(exp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // valoresVectorAlone ::= valoresVectorAlone COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int valuessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valuessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> valuess = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = valuess; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // assig_to_acces ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // assig_to_acces ::= ID DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // assig_to_acces ::= ID 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // asignacion ::= THIS DOT ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(true, id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // asignacion ::= ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // asignacion ::= ID DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // asignacion ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // asignacion ::= ID BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // asignacion ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int index2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, index2, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // asignacion ::= ID ASSIGNMENT INP_INT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.ENTERO), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // asignacion ::= ID ASSIGNMENT INP_C PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.CARACTER), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // asignacion ::= ID ASSIGNMENT INP_F PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.DECIMAL), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // increaseDecrease ::= ID PLUSPLUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // increaseDecrease ::= ID MINUSMINUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // typeVar ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // typeVar ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // typeVar ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // typeVar ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // typeVar ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // typeVar ::= ID 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.OBJECT); RESULT.setIdObjeto(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // break ::= BREAK SEMIC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferBreak(wleft, wright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // continue ::= CONTINUE SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferContinue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // returnn ::= RETURN SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // returnn ::= RETURN EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(exp, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // pascalCode ::= funtionssPas 
            {
              Instruction RESULT =null;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> pas = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                Subprog_pascal subp = new Subprog_pascal(pas);
                RESULT = subp; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalCode",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // funtionssPas ::= funtionssPas function 
            {
              LinkedList<Instruction> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> fs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction fun = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fs; RESULT.add(fun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funtionssPas",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // funtionssPas ::= function 
            {
              LinkedList<Instruction> RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction fun = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(fun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funtionssPas",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // InstructionESPas ::= InstructionESPas InstructionPas 
            {
              LinkedList<Instruction> RESULT =null;
		int inssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> inss = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inss;  RESULT.add(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionESPas",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // InstructionESPas ::= InstructionPas 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionESPas",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // InstructionPas ::= printPas SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // InstructionPas ::= inputPas SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // InstructionPas ::= asignacionPas SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // InstructionPas ::= ifPas SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // InstructionPas ::= casePas SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementCasePas ins = (StatementCasePas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // InstructionPas ::= forPas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // InstructionPas ::= whilePas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // InstructionPas ::= repeatPas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // InstructionPas ::= breakPas SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // InstructionPas ::= continuePas SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // InstructionPas ::= AssignmentVectoresPas SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // InstructionPas ::= error SEMIC 
            {
              Instruction RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // InstructionPas ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionPas",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ifPas ::= IF PAR_OP expPas PAR_CL THEN insIfNoSemi 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IFpas(a, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifPas",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ifPas ::= IF PAR_OP expPas PAR_CL THEN insIfNoSemi ELSE insIfNoSemi 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins2 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IFpas(a, ins, ins2, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifPas",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // InstructionSinSemi ::= printPas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionSinSemi",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // InstructionSinSemi ::= ifPas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionSinSemi",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // InstructionSinSemi ::= asignacionPas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionSinSemi",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // InstructionSinSemi ::= breakPas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionSinSemi",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // InstructionSinSemi ::= continuePas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionSinSemi",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // InstructionSinSemi ::= AssignmentVectoresPas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionSinSemi",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // InstructionSinSemi ::= inputPas 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionSinSemi",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // insIfNoSemi ::= BEGIN InstructionESPas END 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIfNoSemi",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // insIfNoSemi ::= InstructionSinSemi 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new LinkedList<>(); RESULT.add(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIfNoSemi",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // printPas ::= PRINTLN PAR_OP expresionessPas PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new PrintPass(a, aleft, aright);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printPas",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // inputPas ::= READLN PAR_OP ids PAR_CL 
            {
              Instruction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> idss = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadlnPas(idss, rleft, rright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inputPas",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // expresionessPas ::= expresionessPas COLON expPas 
            {
              LinkedList<Instruction> RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> exps = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exps;  RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionessPas",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // expresionessPas ::= expPas 
            {
              LinkedList<Instruction> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionessPas",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // declaracionPas ::= declaracionPas unaDeclaracion 
            {
              LinkedList<Instruction> RESULT =null;
		int inssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> inss = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inss; RESULT.add(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPas",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // declaracionPas ::= unaDeclaracion 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPas",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // unaDeclaracion ::= ids POINTS typeVarPas SEMIC 
            {
              Instruction RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementPas(ids, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // unaDeclaracion ::= ID POINTS typeVarPas SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<String> temp = new LinkedList<>(); temp.add(id);  RESULT = new StatementPas(temp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // unaDeclaracion ::= ID POINTS ARRAY BRACK_L ENTERO DOT DOT ENTERO BRACK_R OF typeVarPas SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VectorsStatementPas(id, 
                 new Nativo(Integer.parseInt(i), new Tipo(tipoDato.ENTERO), ileft, fright ),
                  new Nativo(Integer.parseInt(f), new Tipo(tipoDato.ENTERO), ileft, fright ), t, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // unaDeclaracion ::= error SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // unaDeclaracion ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaDeclaracion",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ids ::= ids COLON ID 
            {
              LinkedList<String> RESULT =null;
		int idssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> idss = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = idss; RESULT.add(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ids ::= ID 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new LinkedList<>(); RESULT.add(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // asignacionPas ::= ID ASSIGNMENT expPas 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AssignmenttPas(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionPas",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // typeVarPas ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVarPas",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // typeVarPas ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVarPas",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // typeVarPas ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVarPas",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // typeVarPas ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVarPas",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // typeVarPas ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVarPas",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // expPas ::= expPas PLUS expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // expPas ::= expPas MINUS expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // expPas ::= expPas DIVIDED expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // expPas ::= expPas TIMES expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // expPas ::= expPas MOD expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // expPas ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // expPas ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // expPas ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // expPas ::= CHARAC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // expPas ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccessPas(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // expPas ::= expPas EQUALS expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // expPas ::= expPas DIFFERENT expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // expPas ::= expPas LESS expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // expPas ::= expPas L_EQUALS expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // expPas ::= expPas GREATER expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // expPas ::= expPas G_EQUALS expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // expPas ::= PAR_OP expPas PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // expPas ::= expPas AND expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // expPas ::= expPas OR expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // expPas ::= NOT expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // expPas ::= expPas AND THEN expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.ANDTHEN, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // expPas ::= expPas OR ELSE expPas 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.ORELSE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // expPas ::= ID BRACK_L expPas BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVectorPas(a, indx, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPas",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // casePas ::= CASE PAR_OP expPas PAR_CL OF listCasesPas ELSE InstructionESPas END 
            {
              StatementCasePas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int czleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int czright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<OneCasePas> cz = (LinkedList<OneCasePas>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementCasePas(a, cz, ins, aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casePas",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // listCasesPas ::= listCasesPas unCase 
            {
              LinkedList<OneCasePas> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<OneCasePas> b = (LinkedList<OneCasePas>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OneCasePas a = (OneCasePas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCasesPas",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // listCasesPas ::= unCase 
            {
              LinkedList<OneCasePas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OneCasePas a = (OneCasePas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>();   RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCasesPas",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // unCase ::= expresionessPas POINTS InstructionPas 
            {
              OneCasePas RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> exps = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OneCasePas(exps,ins, expsleft, expsright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unCase",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // forPas ::= FOR ID ASSIGNMENT expPas TO expPas DO bloqueIns 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fValsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fValsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction fVals = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CiclicaForPas(id, exp, fVals, ins, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forPas",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // bloqueIns ::= BEGIN InstructionESPas END SEMIC 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIns",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // bloqueIns ::= InstructionPas 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIns",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // whilePas ::= WHILE PAR_OP expPas PAR_CL DO bloqueIns 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CiclicaWhilePas(exp, ins, false, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilePas",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // repeatPas ::= REPEAT InstructionESPas UNTIL PAR_OP expPas PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CiclicaWhilePas(exp, ins, true, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeatPas",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // breakPas ::= BREAK 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new transferBreakPas(wleft, wright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakPas",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // continuePas ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new transferContinuePas(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuePas",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // declaraArr ::= ID POINTS ARRAY BRACK_L expPas DOT DOT expPas BRACK_R OF typeVarPas SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction f = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VectorsStatementPas(id, i, f, t, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArr",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AssignmentVectoresPas ::= ID BRACK_L expPas BRACK_R ASSIGNMENT expPas 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentVectoresPas(id, exp, val, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentVectoresPas",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // function ::= FUNCTION ID PAR_OP parametersFunctsPas PAR_CL POINTS typeVarPas SEMIC optionalLocalDc bodyFunction 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<HashMap> params = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vars = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionssPas(id, params, ins, vars, t, idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // function ::= FUNCTION ID PAR_OP PAR_CL POINTS typeVarPas SEMIC optionalLocalDc bodyFunction 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vars = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionssPas(id, new LinkedList<>(), ins,  vars, t, idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // function ::= PROCEDURE ID PAR_OP parametersFunctsPas PAR_CL SEMIC optionalLocalDc bodyFunction 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> params = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vars = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodPas(id, params, ins, vars, new Tipo(tipoDato.VOID), idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // function ::= PROCEDURE ID PAR_OP PAR_CL SEMIC optionalLocalDc bodyFunction 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vars = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodPas(id, new LinkedList<>(), ins,  vars, new Tipo(tipoDato.VOID), idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // optionalLocalDc ::= variablesFunct 
            {
              LinkedList<Instruction> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> vars = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalLocalDc",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // optionalLocalDc ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalLocalDc",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // variablesFunct ::= VAR declaracionPas 
            {
              LinkedList<Instruction> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> vars = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesFunct",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // bodyFunction ::= BEGIN InstructionESPas END SEMIC 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyFunction",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // parametersFunctsPas ::= parametersFunctsPas SEMIC paramFunction 
            {
              LinkedList<HashMap> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> params = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<HashMap> param = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = params; RESULT.addAll(param); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFunctsPas",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // parametersFunctsPas ::= paramFunction 
            {
              LinkedList<HashMap> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<HashMap> param = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); RESULT.addAll(param); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFunctsPas",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // paramFunction ::= ids POINTS typeVarPas 
            {
              LinkedList<HashMap> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo ty = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  LinkedList<HashMap>();
                for (String unIDDD : ids) {
                   var oneParam = new HashMap<String, Object>();
                   oneParam.put("id",unIDDD);
                   oneParam.put("tipo", ty);
                   RESULT.add(oneParam);
                    
                } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramFunction",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // paramFunction ::= ID POINTS typeVarPas 
            {
              LinkedList<HashMap> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo ty = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>();
                                         var oneParam = new HashMap<String, Object>();
                                            oneParam.put("id",id);
                                            oneParam.put("tipo", ty);
                                            RESULT.add(oneParam);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramFunction",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
