
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.wilsoncys.compi1.java.model.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.wilsoncys.compi1.java.model.asbtracto.Instruction;
import com.wilsoncys.compi1.java.model.excepciones.Errores;
import com.wilsoncys.compi1.java.model.simbolo.*;
import com.wilsoncys.compi1.java.model.instrucciones.*;
import com.wilsoncys.compi1.java.model.poo.*;
import com.wilsoncys.compi1.java.model.expresiones.*;
import com.wilsoncys.compi1.java.model.expresiones.Aritmeticas.*;
import com.wilsoncys.compi1.java.model.expresiones.Enums.*;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\277\000\002\002\004\000\002\002\003\000\002\104" +
    "\003\000\002\066\004\000\002\066\003\000\002\073\004" +
    "\000\002\073\003\000\002\075\005\000\002\075\002\000" +
    "\002\077\004\000\002\070\004\000\002\070\002\000\002" +
    "\071\004\000\002\071\004\000\002\071\004\000\002\071" +
    "\004\000\002\100\010\000\002\101\007\000\002\101\005" +
    "\000\002\102\011\000\002\103\004\000\002\103\004\000" +
    "\002\103\002\000\002\074\004\000\002\074\002\000\002" +
    "\076\006\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\003\004\000\002\003\003" +
    "\000\002\062\003\000\002\062\002\000\002\065\011\000" +
    "\002\065\012\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\057\003\000\002\057\004\000\002\064" +
    "\007\000\002\064\010\000\002\064\011\000\002\064\012" +
    "\000\002\061\003\000\002\061\002\000\002\060\003\000" +
    "\002\060\004\000\002\052\003\000\002\052\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\005\000\002\005" +
    "\006\000\002\005\011\000\002\005\006\000\002\005\003" +
    "\000\002\005\007\000\002\005\006\000\002\034\013\000" +
    "\002\034\012\000\002\034\013\000\002\034\012\000\002" +
    "\034\012\000\002\034\011\000\002\034\012\000\002\034" +
    "\011\000\002\034\003\000\002\037\006\000\002\037\004" +
    "\000\002\063\003\000\002\063\002\000\002\046\005\000" +
    "\002\046\010\000\002\046\006\000\002\055\002\000\002" +
    "\055\010\000\002\055\006\000\002\055\005\000\002\055" +
    "\003\000\002\044\005\000\002\044\010\000\002\044\007" +
    "\000\002\054\010\000\002\054\005\000\002\054\007\000" +
    "\002\042\005\000\002\042\003\000\002\020\013\000\002" +
    "\020\003\000\002\020\003\000\002\016\014\000\002\024" +
    "\004\000\002\024\004\000\002\024\005\000\002\014\011" +
    "\000\002\015\013\000\002\017\007\000\002\027\004\000" +
    "\002\027\003\000\002\030\007\000\002\030\007\000\002" +
    "\023\003\000\002\023\003\000\002\105\002\000\002\025" +
    "\007\000\002\021\011\000\002\022\012\000\002\013\007" +
    "\000\002\013\007\000\002\053\005\000\002\053\007\000" +
    "\002\053\011\000\002\053\011\000\002\053\011\000\002" +
    "\006\006\000\002\006\010\000\002\006\005\000\002\006" +
    "\007\000\002\035\015\000\002\035\017\000\002\036\005" +
    "\000\002\036\007\000\002\026\003\000\002\026\005\000" +
    "\002\056\010\000\002\056\005\000\002\056\003\000\002" +
    "\007\010\000\002\007\006\000\002\007\010\000\002\007" +
    "\013\000\002\007\011\000\002\007\014\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\010\005\000" +
    "\002\010\005\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\032\004" +
    "\000\002\031\004\000\002\045\004\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e7\000\014\002\ufff9\112\005\116\017\123\007\134" +
    "\012\001\002\000\020\053\ufff6\054\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\072\ufff6\134\012\001\002\000\004\116\u01dc\001" +
    "\002\000\004\002\u01db\001\002\000\012\002\uffff\112\uffff" +
    "\116\uffff\134\uffff\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\ufffb\001\002\000\012\130\u01da\131\u01d8\132\u01d7" +
    "\133\u01d9\001\002\000\012\002\ufff9\112\005\116\017\134" +
    "\012\001\002\000\012\002\ufff9\112\005\116\017\134\012" +
    "\001\002\000\012\002\uffda\112\uffda\116\uffda\134\uffda\001" +
    "\002\000\016\053\u01b1\054\u01b5\056\u01b8\057\u01b3\060\uffeb" +
    "\072\u01b9\001\002\000\004\011\021\001\002\000\004\002" +
    "\000\001\002\000\006\063\022\113\023\001\002\000\026" +
    "\011\040\053\026\054\037\055\033\056\046\057\036\060" +
    "\034\110\035\111\042\112\030\001\002\000\004\011\024" +
    "\001\002\000\004\063\025\001\002\000\026\011\040\053" +
    "\026\054\037\055\033\056\046\057\036\060\034\110\035" +
    "\111\042\112\030\001\002\000\006\011\uff4b\067\uff4b\001" +
    "\002\000\030\011\040\053\026\054\037\055\033\056\046" +
    "\057\036\060\034\064\u01ad\110\035\111\042\112\030\001" +
    "\002\000\020\011\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\060\uffdd\001\002\000\030\011\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\064\uffcf\110\uffcf" +
    "\111\uffcf\112\uffcf\001\002\000\030\011\uff96\053\uff96\054" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\064\uff96\110\uff96" +
    "\111\uff96\112\uff96\001\002\000\006\011\uff48\067\uff48\001" +
    "\002\000\004\011\u01a2\001\002\000\020\011\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\001\002\000" +
    "\006\011\uff4c\067\uff4c\001\002\000\006\011\uff4a\067\uff4a" +
    "\001\002\000\006\011\uff47\061\u019c\001\002\000\030\011" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\064\uffd2\110\uffd2\111\uffd2\112\uffd2\001\002\000\020\011" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\001\002\000\020\011\u0179\053\026\054\037\055\033\056" +
    "\046\057\036\060\u017b\001\002\000\030\011\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\064\uffd0\110" +
    "\uffd0\111\uffd0\112\uffd0\001\002\000\004\011\047\001\002" +
    "\000\006\011\uff49\067\uff49\001\002\000\010\026\050\061" +
    "\051\065\052\001\002\000\032\004\134\005\137\006\144" +
    "\007\142\010\136\011\145\013\135\044\147\061\141\076" +
    "\140\107\143\114\146\001\002\000\020\011\055\053\026" +
    "\054\037\055\033\056\046\057\036\062\054\001\002\000" +
    "\030\011\uff64\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64" +
    "\060\uff64\064\uff64\110\uff64\111\uff64\112\uff64\001\002\000" +
    "\006\062\u0171\073\u0170\001\002\000\004\063\060\001\002" +
    "\000\006\011\uff47\067\uff47\001\002\000\004\011\057\001" +
    "\002\000\006\062\uff94\073\uff94\001\002\000\054\003\104" +
    "\011\101\027\125\030\077\032\071\033\105\034\111\035" +
    "\115\036\066\052\124\053\026\054\037\055\033\056\046" +
    "\057\036\064\uffe0\071\123\072\062\105\102\114\100\117" +
    "\070\001\002\000\054\003\uffc0\011\uffc0\027\uffc0\030\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\064\uffc0\071\uffc0" +
    "\072\uffc0\105\uffc0\114\uffc0\117\uffc0\001\002\000\004\011" +
    "\uff4d\001\002\000\054\003\uffca\011\uffca\027\uffca\030\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\064\uffca\071\uffca" +
    "\072\uffca\105\uffca\114\uffca\117\uffca\001\002\000\054\003" +
    "\uffc6\011\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\064\uffc6\071\uffc6\072\uffc6\105\uffc6\114\uffc6" +
    "\117\uffc6\001\002\000\054\003\uffc3\011\uffc3\027\uffc3\030" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\064\uffc3\071" +
    "\uffc3\072\uffc3\105\uffc3\114\uffc3\117\uffc3\001\002\000\004" +
    "\065\u016f\001\002\000\054\003\uffc7\011\uffc7\027\uffc7\030" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\064\uffc7\071" +
    "\uffc7\072\uffc7\105\uffc7\114\uffc7\117\uffc7\001\002\000\004" +
    "\061\u016b\001\002\000\004\061\u014f\001\002\000\054\003" +
    "\104\011\101\027\125\030\077\032\071\033\105\034\111" +
    "\035\115\036\066\052\124\053\026\054\037\055\033\056" +
    "\046\057\036\064\uffe1\071\123\072\062\105\102\114\100" +
    "\117\070\001\002\000\054\003\uffc1\011\uffc1\027\uffc1\030" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\064\uffc1\071" +
    "\uffc1\072\uffc1\105\uffc1\114\uffc1\117\uffc1\001\002\000\004" +
    "\064\u014e\001\002\000\054\003\uffe2\011\uffe2\027\uffe2\030" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\064\uffe2\071" +
    "\uffe2\072\uffe2\105\uffe2\114\uffe2\117\uffe2\001\002\000\054" +
    "\003\uffc4\011\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\064\uffc4\071\uffc4\072\uffc4\105\uffc4\114" +
    "\uffc4\117\uffc4\001\002\000\004\061\u0141\001\002\000\004" +
    "\077\u013c\001\002\000\020\011\uff47\026\374\050\377\051" +
    "\376\061\375\067\u0100\077\u0101\001\002\000\034\004\134" +
    "\005\137\006\144\007\142\010\136\011\145\013\135\044" +
    "\147\061\141\065\371\076\140\107\143\114\146\001\002" +
    "\000\054\003\uffc5\011\uffc5\027\uffc5\030\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\064\uffc5\071\uffc5\072\uffc5\105" +
    "\uffc5\114\uffc5\117\uffc5\001\002\000\056\003\uffbe\011\uffbe" +
    "\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\064\uffbe\065\370\071\uffbe\072\uffbe\105\uffbe\114\uffbe\117" +
    "\uffbe\001\002\000\004\065\367\001\002\000\054\003\uffc2" +
    "\011\uffc2\027\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\064\uffc2\071\uffc2\072\uffc2\105\uffc2\114\uffc2\117" +
    "\uffc2\001\002\000\054\003\uff7f\011\uff7f\027\uff7f\030\uff7f" +
    "\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\064\uff7f\071\uff7f" +
    "\072\uff7f\105\uff7f\114\uff7f\117\uff7f\001\002\000\004\011" +
    "\334\001\002\000\032\004\134\005\137\006\144\007\142" +
    "\010\136\011\145\013\135\044\147\061\141\076\140\107" +
    "\143\114\146\001\002\000\054\003\uffcb\011\uffcb\027\uffcb" +
    "\030\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\064\uffcb" +
    "\071\uffcb\072\uffcb\105\uffcb\114\uffcb\117\uffcb\001\002\000" +
    "\054\003\uffc8\011\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\064\uffc8\071\uffc8\072\uffc8\105\uffc8" +
    "\114\uffc8\117\uffc8\001\002\000\004\011\273\001\002\000" +
    "\004\061\265\001\002\000\054\003\uffc9\011\uffc9\027\uffc9" +
    "\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\064\uffc9" +
    "\071\uffc9\072\uffc9\105\uffc9\114\uffc9\117\uffc9\001\002\000" +
    "\054\003\uffcc\011\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\064\uffcc\071\uffcc\072\uffcc\105\uffcc" +
    "\114\uffcc\117\uffcc\001\002\000\054\003\uff80\011\uff80\027" +
    "\uff80\030\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\064" +
    "\uff80\071\uff80\072\uff80\105\uff80\114\uff80\117\uff80\001\002" +
    "\000\054\003\uffce\011\uffce\027\uffce\030\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\052\uffce\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\057\uffce\064\uffce\071\uffce\072\uffce\105" +
    "\uffce\114\uffce\117\uffce\001\002\000\054\003\uffcd\011\uffcd" +
    "\027\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\064\uffcd\071\uffcd\072\uffcd\105\uffcd\114\uffcd\117\uffcd\001" +
    "\002\000\004\011\uff4e\001\002\000\004\061\261\001\002" +
    "\000\004\063\126\001\002\000\052\003\104\011\101\027" +
    "\125\030\077\032\071\033\105\034\111\035\115\036\066" +
    "\052\124\053\026\054\037\055\033\056\046\057\036\071" +
    "\123\072\062\105\102\114\100\117\070\001\002\000\054" +
    "\003\104\011\101\027\125\030\077\032\071\033\105\034" +
    "\111\035\115\036\066\052\124\053\026\054\037\055\033" +
    "\056\046\057\036\064\130\071\123\072\062\105\102\114" +
    "\100\117\070\001\002\000\004\035\132\001\002\000\054" +
    "\003\uffe3\011\uffe3\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\064\uffe3\071\uffe3\072\uffe3\105\uffe3\114" +
    "\uffe3\117\uffe3\001\002\000\004\061\133\001\002\000\032" +
    "\004\134\005\137\006\144\007\142\010\136\011\145\013" +
    "\135\044\147\061\141\076\140\107\143\114\146\001\002" +
    "\000\054\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\062\uffa9\063\uffa9\065" +
    "\uffa9\070\uffa9\073\uffa9\001\002\000\032\004\134\005\137" +
    "\006\144\007\142\010\136\011\145\013\135\044\147\061" +
    "\141\076\140\107\143\114\146\001\002\000\054\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\062\uffaa\063\uffaa\065\uffaa\070\uffaa\073" +
    "\uffaa\001\002\000\054\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\062\uffa7" +
    "\063\uffa7\065\uffa7\070\uffa7\073\uffa7\001\002\000\004\011" +
    "\253\001\002\000\032\004\134\005\137\006\144\007\142" +
    "\010\136\011\145\013\135\044\147\061\141\076\140\107" +
    "\143\114\146\001\002\000\054\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\062\uffab\063\uffab\065\uffab\070\uffab\073\uffab\001\002\000" +
    "\004\061\246\001\002\000\054\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\062\uffa8\063\uffa8\065\uffa8\070\uffa8\073\uffa8\001\002\000" +
    "\062\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\061\215\062\uffa6\063\uffa6" +
    "\065\uffa6\067\216\070\uffa6\073\uffa6\077\217\001\002\000" +
    "\004\077\213\001\002\000\032\004\134\005\137\006\144" +
    "\007\142\010\136\011\145\013\135\044\147\061\141\076" +
    "\140\107\143\114\146\001\002\000\054\012\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\062\uffa1\063\uffa1\065\uffa1\070\uffa1\073\uffa1\001" +
    "\002\000\042\012\160\013\152\014\166\015\163\016\161" +
    "\017\155\020\156\021\164\022\165\023\167\024\170\025" +
    "\157\041\171\042\153\043\154\062\162\001\002\000\032" +
    "\004\134\005\137\006\144\007\142\010\136\011\145\013" +
    "\135\044\147\061\141\076\140\107\143\114\146\001\002" +
    "\000\032\004\134\005\137\006\144\007\142\010\136\011" +
    "\145\013\135\044\147\061\141\076\140\107\143\114\146" +
    "\001\002\000\032\004\134\005\137\006\144\007\142\010" +
    "\136\011\145\013\135\044\147\061\141\076\140\107\143" +
    "\114\146\001\002\000\032\004\134\005\137\006\144\007" +
    "\142\010\136\011\145\013\135\044\147\061\141\076\140" +
    "\107\143\114\146\001\002\000\032\004\134\005\137\006" +
    "\144\007\142\010\136\011\145\013\135\044\147\061\141" +
    "\076\140\107\143\114\146\001\002\000\032\004\134\005" +
    "\137\006\144\007\142\010\136\011\145\013\135\044\147" +
    "\061\141\076\140\107\143\114\146\001\002\000\032\004" +
    "\134\005\137\006\144\007\142\010\136\011\145\013\135" +
    "\044\147\061\141\076\140\107\143\114\146\001\002\000" +
    "\032\004\134\005\137\006\144\007\142\010\136\011\145" +
    "\013\135\044\147\061\141\076\140\107\143\114\146\001" +
    "\002\000\004\065\201\001\002\000\032\004\134\005\137" +
    "\006\144\007\142\010\136\011\145\013\135\044\147\061" +
    "\141\076\140\107\143\114\146\001\002\000\032\004\134" +
    "\005\137\006\144\007\142\010\136\011\145\013\135\044" +
    "\147\061\141\076\140\107\143\114\146\001\002\000\032" +
    "\004\134\005\137\006\144\007\142\010\136\011\145\013" +
    "\135\044\147\061\141\076\140\107\143\114\146\001\002" +
    "\000\032\004\134\005\137\006\144\007\142\010\136\011" +
    "\145\013\135\044\147\061\141\076\140\107\143\114\146" +
    "\001\002\000\032\004\134\005\137\006\144\007\142\010" +
    "\136\011\145\013\135\044\147\061\141\076\140\107\143" +
    "\114\146\001\002\000\032\004\134\005\137\006\144\007" +
    "\142\010\136\011\145\013\135\044\147\061\141\076\140" +
    "\107\143\114\146\001\002\000\032\004\134\005\137\006" +
    "\144\007\142\010\136\011\145\013\135\044\147\061\141" +
    "\076\140\107\143\114\146\001\002\000\054\012\160\013" +
    "\152\014\166\015\163\016\161\017\155\020\156\021\164" +
    "\022\165\023\167\024\170\025\157\040\uffae\041\uffae\042" +
    "\153\043\154\062\uffae\063\uffae\065\uffae\070\uffae\073\uffae" +
    "\001\002\000\054\012\160\013\152\014\166\015\163\016" +
    "\161\017\155\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\062\uffb5\063" +
    "\uffb5\065\uffb5\070\uffb5\073\uffb5\001\002\000\054\012\160" +
    "\013\152\014\166\015\163\016\161\017\155\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\062\uffb2\063\uffb2\065\uffb2\070\uffb2\073" +
    "\uffb2\001\002\000\054\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\161\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\062\uffb8" +
    "\063\uffb8\065\uffb8\070\uffb8\073\uffb8\001\002\000\054\012" +
    "\160\013\152\014\166\015\163\016\161\017\155\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\062\uffb0\063\uffb0\065\uffb0\070\uffb0" +
    "\073\uffb0\001\002\000\054\012\160\013\152\014\166\015" +
    "\163\016\161\017\155\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\062" +
    "\uffb3\063\uffb3\065\uffb3\070\uffb3\073\uffb3\001\002\000\054" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\161\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\062\uffb9\063\uffb9\065\uffb9\070" +
    "\uffb9\073\uffb9\001\002\000\054\003\uff79\011\uff79\027\uff79" +
    "\030\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79\052" +
    "\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057\uff79\064\uff79" +
    "\071\uff79\072\uff79\105\uff79\114\uff79\117\uff79\001\002\000" +
    "\052\012\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\062\uffb6\063\uffb6\065\uffb6\070\uffb6" +
    "\073\uffb6\001\002\000\054\012\uffbb\013\uffbb\014\166\015" +
    "\163\016\161\017\155\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\062" +
    "\uffbb\063\uffbb\065\uffbb\070\uffbb\073\uffbb\001\002\000\054" +
    "\012\160\013\152\014\166\015\163\016\161\017\155\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\062\uffb4\063\uffb4\065\uffb4\070" +
    "\uffb4\073\uffb4\001\002\000\054\012\160\013\152\014\166" +
    "\015\163\016\161\017\155\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\062\uffb1\063\uffb1\065\uffb1\070\uffb1\073\uffb1\001\002\000" +
    "\054\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\161\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\062\uffb7\063\uffb7\065\uffb7" +
    "\070\uffb7\073\uffb7\001\002\000\054\012\160\013\152\014" +
    "\166\015\163\016\161\017\155\020\156\021\164\022\165" +
    "\023\167\024\170\025\157\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\062\uffad\063\uffad\065\uffad\070\uffad\073\uffad\001\002" +
    "\000\054\012\160\013\152\014\166\015\163\016\161\017" +
    "\155\020\156\021\164\022\165\023\167\024\170\025\157" +
    "\040\uffaf\041\uffaf\042\uffaf\043\154\062\uffaf\063\uffaf\065" +
    "\uffaf\070\uffaf\073\uffaf\001\002\000\054\012\uffba\013\uffba" +
    "\014\166\015\163\016\161\017\155\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\062\uffba\063\uffba\065\uffba\070\uffba\073\uffba\001" +
    "\002\000\054\012\160\013\152\014\166\015\163\016\161" +
    "\017\155\020\156\021\164\022\165\023\167\024\170\025" +
    "\157\040\uffbc\041\uffbc\042\uffbc\043\uffbc\062\uffbc\063\uffbc" +
    "\065\uffbc\070\uffbc\073\uffbc\001\002\000\004\011\214\001" +
    "\002\000\054\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\062\uffa5\063\uffa5" +
    "\065\uffa5\070\uffa5\073\uffa5\001\002\000\034\004\134\005" +
    "\137\006\144\007\142\010\136\011\145\013\135\044\147" +
    "\061\141\062\uff92\076\140\107\143\114\146\001\002\000" +
    "\032\004\134\005\137\006\144\007\142\010\136\011\145" +
    "\013\135\044\147\061\141\076\140\107\143\114\146\001" +
    "\002\000\056\011\220\012\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\062\uff8e" +
    "\063\uff8e\065\uff8e\070\uff8e\073\uff8e\001\002\000\060\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\040\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\061\222\062\uff8a\063\uff8a\065\uff8a" +
    "\070\uff8a\073\uff8a\077\223\001\002\000\054\012\uff91\013" +
    "\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91" +
    "\022\uff91\023\uff91\024\uff91\025\uff91\040\uff91\041\uff91\042" +
    "\uff91\043\uff91\062\uff91\063\uff91\065\uff91\070\uff91\073\uff91" +
    "\001\002\000\034\004\134\005\137\006\144\007\142\010" +
    "\136\011\145\013\135\044\147\061\141\062\uff92\076\140" +
    "\107\143\114\146\001\002\000\056\011\220\012\uff8e\013" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e" +
    "\022\uff8e\023\uff8e\024\uff8e\025\uff8e\040\uff8e\041\uff8e\042" +
    "\uff8e\043\uff8e\062\uff8e\063\uff8e\065\uff8e\070\uff8e\073\uff8e" +
    "\001\002\000\054\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b" +
    "\025\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\062\uff8b\063" +
    "\uff8b\065\uff8b\070\uff8b\073\uff8b\001\002\000\006\062\uff93" +
    "\073\233\001\002\000\044\012\160\013\152\014\166\015" +
    "\163\016\161\017\155\020\156\021\164\022\165\023\167" +
    "\024\170\025\157\041\171\042\153\043\154\062\uff82\073" +
    "\uff82\001\002\000\004\062\230\001\002\000\056\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\062\uff8c\063\uff8c\065\uff8c\070\uff8c\073" +
    "\uff8c\077\231\001\002\000\056\011\220\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\040\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\062\uff8e\063\uff8e\065\uff8e\070\uff8e\073\uff8e\001" +
    "\002\000\054\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d" +
    "\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\062\uff8d\063\uff8d" +
    "\065\uff8d\070\uff8d\073\uff8d\001\002\000\032\004\134\005" +
    "\137\006\144\007\142\010\136\011\145\013\135\044\147" +
    "\061\141\076\140\107\143\114\146\001\002\000\044\012" +
    "\160\013\152\014\166\015\163\016\161\017\155\020\156" +
    "\021\164\022\165\023\167\024\170\025\157\041\171\042" +
    "\153\043\154\062\uff83\073\uff83\001\002\000\042\012\160" +
    "\013\152\014\166\015\163\016\161\017\155\020\156\021" +
    "\164\022\165\023\167\024\170\025\157\041\171\042\153" +
    "\043\154\070\236\001\002\000\056\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\062\uffa4\063\uffa4\065\uffa4\067\237\070\uffa4\073\uffa4" +
    "\001\002\000\032\004\134\005\137\006\144\007\142\010" +
    "\136\011\145\013\135\044\147\061\141\076\140\107\143" +
    "\114\146\001\002\000\042\012\160\013\152\014\166\015" +
    "\163\016\161\017\155\020\156\021\164\022\165\023\167" +
    "\024\170\025\157\041\171\042\153\043\154\070\241\001" +
    "\002\000\054\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\062\uffa3\063\uffa3" +
    "\065\uffa3\070\uffa3\073\uffa3\001\002\000\004\062\243\001" +
    "\002\000\056\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\062\uff8f\063\uff8f" +
    "\065\uff8f\070\uff8f\073\uff8f\077\244\001\002\000\056\011" +
    "\220\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\062\uff8e\063\uff8e\065\uff8e" +
    "\070\uff8e\073\uff8e\001\002\000\054\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\062\uff90\063\uff90\065\uff90\070\uff90\073\uff90\001\002" +
    "\000\032\004\134\005\137\006\144\007\142\010\136\011" +
    "\145\013\135\044\147\061\141\076\140\107\143\114\146" +
    "\001\002\000\042\012\160\013\152\014\166\015\163\016" +
    "\161\017\155\020\156\021\164\022\165\023\167\024\170" +
    "\025\157\041\171\042\153\043\154\062\250\001\002\000" +
    "\054\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\062\uffa2\063\uffa2\065\uffa2" +
    "\070\uffa2\073\uffa2\001\002\000\042\012\160\013\152\014" +
    "\166\015\163\016\161\017\155\020\156\021\164\022\165" +
    "\023\167\024\170\025\157\041\171\042\153\043\154\062" +
    "\252\001\002\000\054\012\uffac\013\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\040\uffac\041\uffac\042\uffac\043\uffac\062\uffac" +
    "\063\uffac\065\uffac\070\uffac\073\uffac\001\002\000\004\061" +
    "\254\001\002\000\034\004\134\005\137\006\144\007\142" +
    "\010\136\011\145\013\135\044\147\061\141\062\256\076" +
    "\140\107\143\114\146\001\002\000\006\062\257\073\233" +
    "\001\002\000\054\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\062\uff9f\063" +
    "\uff9f\065\uff9f\070\uff9f\073\uff9f\001\002\000\054\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\062\uffa0\063\uffa0\065\uffa0\070\uffa0\073" +
    "\uffa0\001\002\000\054\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\062\uffbd" +
    "\063\uffbd\065\uffbd\070\uffbd\073\uffbd\001\002\000\034\004" +
    "\134\005\137\006\144\007\142\010\136\011\145\013\135" +
    "\044\147\061\141\062\uff92\076\140\107\143\114\146\001" +
    "\002\000\004\062\263\001\002\000\004\065\264\001\002" +
    "\000\054\003\uff6d\011\uff6d\027\uff6d\030\uff6d\032\uff6d\033" +
    "\uff6d\034\uff6d\035\uff6d\036\uff6d\052\uff6d\053\uff6d\054\uff6d" +
    "\055\uff6d\056\uff6d\057\uff6d\064\uff6d\071\uff6d\072\uff6d\105" +
    "\uff6d\114\uff6d\117\uff6d\001\002\000\032\004\134\005\137" +
    "\006\144\007\142\010\136\011\145\013\135\044\147\061" +
    "\141\076\140\107\143\114\146\001\002\000\042\012\160" +
    "\013\152\014\166\015\163\016\161\017\155\020\156\021" +
    "\164\022\165\023\167\024\170\025\157\041\171\042\153" +
    "\043\154\062\267\001\002\000\004\063\270\001\002\000" +
    "\052\003\104\011\101\027\125\030\077\032\071\033\105" +
    "\034\111\035\115\036\066\052\124\053\026\054\037\055" +
    "\033\056\046\057\036\071\123\072\062\105\102\114\100" +
    "\117\070\001\002\000\054\003\104\011\101\027\125\030" +
    "\077\032\071\033\105\034\111\035\115\036\066\052\124" +
    "\053\026\054\037\055\033\056\046\057\036\064\272\071" +
    "\123\072\062\105\102\114\100\117\070\001\002\000\054" +
    "\003\uff7a\011\uff7a\027\uff7a\030\uff7a\032\uff7a\033\uff7a\034" +
    "\uff7a\035\uff7a\036\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a" +
    "\056\uff7a\057\uff7a\064\uff7a\071\uff7a\072\uff7a\105\uff7a\114" +
    "\uff7a\117\uff7a\001\002\000\006\026\274\065\275\001\002" +
    "\000\040\004\134\005\137\006\144\007\142\010\136\011" +
    "\145\013\135\044\147\061\141\076\140\107\143\114\146" +
    "\120\277\121\300\122\276\001\002\000\100\003\uff6b\004" +
    "\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\013\uff6b" +
    "\027\uff6b\030\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036" +
    "\uff6b\044\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b" +
    "\057\uff6b\061\uff6b\064\uff6b\071\uff6b\072\uff6b\076\uff6b\105" +
    "\uff6b\107\uff6b\114\uff6b\117\uff6b\001\002\000\004\061\311" +
    "\001\002\000\004\061\306\001\002\000\004\061\303\001" +
    "\002\000\042\012\160\013\152\014\166\015\163\016\161" +
    "\017\155\020\156\021\164\022\165\023\167\024\170\025" +
    "\157\041\171\042\153\043\154\065\302\001\002\000\100" +
    "\003\uff6a\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011" +
    "\uff6a\013\uff6a\027\uff6a\030\uff6a\032\uff6a\033\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\044\uff6a\052\uff6a\053\uff6a\054\uff6a\055" +
    "\uff6a\056\uff6a\057\uff6a\061\uff6a\064\uff6a\071\uff6a\072\uff6a" +
    "\076\uff6a\105\uff6a\107\uff6a\114\uff6a\117\uff6a\001\002\000" +
    "\004\062\304\001\002\000\004\065\305\001\002\000\100" +
    "\003\uff69\004\uff69\005\uff69\006\uff69\007\uff69\010\uff69\011" +
    "\uff69\013\uff69\027\uff69\030\uff69\032\uff69\033\uff69\034\uff69" +
    "\035\uff69\036\uff69\044\uff69\052\uff69\053\uff69\054\uff69\055" +
    "\uff69\056\uff69\057\uff69\061\uff69\064\uff69\071\uff69\072\uff69" +
    "\076\uff69\105\uff69\107\uff69\114\uff69\117\uff69\001\002\000" +
    "\004\062\307\001\002\000\004\065\310\001\002\000\100" +
    "\003\uff68\004\uff68\005\uff68\006\uff68\007\uff68\010\uff68\011" +
    "\uff68\013\uff68\027\uff68\030\uff68\032\uff68\033\uff68\034\uff68" +
    "\035\uff68\036\uff68\044\uff68\052\uff68\053\uff68\054\uff68\055" +
    "\uff68\056\uff68\057\uff68\061\uff68\064\uff68\071\uff68\072\uff68" +
    "\076\uff68\105\uff68\107\uff68\114\uff68\117\uff68\001\002\000" +
    "\004\062\312\001\002\000\004\065\313\001\002\000\100" +
    "\003\uff67\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67\011" +
    "\uff67\013\uff67\027\uff67\030\uff67\032\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\044\uff67\052\uff67\053\uff67\054\uff67\055" +
    "\uff67\056\uff67\057\uff67\061\uff67\064\uff67\071\uff67\072\uff67" +
    "\076\uff67\105\uff67\107\uff67\114\uff67\117\uff67\001\002\000" +
    "\042\012\160\013\152\014\166\015\163\016\161\017\155" +
    "\020\156\021\164\022\165\023\167\024\170\025\157\041" +
    "\171\042\153\043\154\063\315\001\002\000\034\004\134" +
    "\005\137\006\144\007\142\010\136\011\145\013\135\037" +
    "\316\044\147\061\141\076\140\107\143\114\146\001\002" +
    "\000\004\040\330\001\002\000\036\004\134\005\137\006" +
    "\144\007\142\010\136\011\145\013\135\037\316\044\147" +
    "\061\141\064\326\076\140\107\143\114\146\001\002\000" +
    "\036\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76" +
    "\013\uff76\037\uff76\044\uff76\061\uff76\064\uff76\076\uff76\107" +
    "\uff76\114\uff76\001\002\000\042\012\160\013\152\014\166" +
    "\015\163\016\161\017\155\020\156\021\164\022\165\023" +
    "\167\024\170\025\157\040\322\041\171\042\153\043\154" +
    "\001\002\000\004\063\323\001\002\000\052\003\104\011" +
    "\101\027\125\030\077\032\071\033\105\034\111\035\115" +
    "\036\066\052\124\053\026\054\037\055\033\056\046\057" +
    "\036\071\123\072\062\105\102\114\100\117\070\001\002" +
    "\000\054\003\104\011\101\027\125\030\077\032\071\033" +
    "\105\034\111\035\115\036\066\052\124\053\026\054\037" +
    "\055\033\056\046\057\036\064\325\071\123\072\062\105" +
    "\102\114\100\117\070\001\002\000\036\004\uff75\005\uff75" +
    "\006\uff75\007\uff75\010\uff75\011\uff75\013\uff75\037\uff75\044" +
    "\uff75\061\uff75\064\uff75\076\uff75\107\uff75\114\uff75\001\002" +
    "\000\054\003\uff78\011\uff78\027\uff78\030\uff78\032\uff78\033" +
    "\uff78\034\uff78\035\uff78\036\uff78\052\uff78\053\uff78\054\uff78" +
    "\055\uff78\056\uff78\057\uff78\064\uff78\071\uff78\072\uff78\105" +
    "\uff78\114\uff78\117\uff78\001\002\000\036\004\uff77\005\uff77" +
    "\006\uff77\007\uff77\010\uff77\011\uff77\013\uff77\037\uff77\044" +
    "\uff77\061\uff77\064\uff77\076\uff77\107\uff77\114\uff77\001\002" +
    "\000\004\063\331\001\002\000\052\003\104\011\101\027" +
    "\125\030\077\032\071\033\105\034\111\035\115\036\066" +
    "\052\124\053\026\054\037\055\033\056\046\057\036\071" +
    "\123\072\062\105\102\114\100\117\070\001\002\000\054" +
    "\003\104\011\101\027\125\030\077\032\071\033\105\034" +
    "\111\035\115\036\066\052\124\053\026\054\037\055\033" +
    "\056\046\057\036\064\333\071\123\072\062\105\102\114" +
    "\100\117\070\001\002\000\036\004\uff74\005\uff74\006\uff74" +
    "\007\uff74\010\uff74\011\uff74\013\uff74\037\uff74\044\uff74\061" +
    "\uff74\064\uff74\076\uff74\107\uff74\114\uff74\001\002\000\004" +
    "\066\335\001\002\000\016\011\055\053\026\054\037\055" +
    "\033\056\046\057\036\001\002\000\004\067\337\001\002" +
    "\000\004\070\340\001\002\000\006\026\341\067\342\001" +
    "\002\000\004\067\363\001\002\000\004\070\343\001\002" +
    "\000\004\026\344\001\002\000\004\067\345\001\002\000" +
    "\004\067\347\001\002\000\006\070\355\073\356\001\002" +
    "\000\032\004\134\005\137\006\144\007\142\010\136\011" +
    "\145\013\135\044\147\061\141\076\140\107\143\114\146" +
    "\001\002\000\006\070\352\073\353\001\002\000\044\012" +
    "\160\013\152\014\166\015\163\016\161\017\155\020\156" +
    "\021\164\022\165\023\167\024\170\025\157\041\171\042" +
    "\153\043\154\070\uff5e\073\uff5e\001\002\000\006\070\uff60" +
    "\073\uff60\001\002\000\032\004\134\005\137\006\144\007" +
    "\142\010\136\011\145\013\135\044\147\061\141\076\140" +
    "\107\143\114\146\001\002\000\044\012\160\013\152\014" +
    "\166\015\163\016\161\017\155\020\156\021\164\022\165" +
    "\023\167\024\170\025\157\041\171\042\153\043\154\070" +
    "\uff5d\073\uff5d\001\002\000\004\065\362\001\002\000\004" +
    "\067\357\001\002\000\032\004\134\005\137\006\144\007" +
    "\142\010\136\011\145\013\135\044\147\061\141\076\140" +
    "\107\143\114\146\001\002\000\006\070\361\073\353\001" +
    "\002\000\006\070\uff5f\073\uff5f\001\002\000\054\003\uff61" +
    "\011\uff61\027\uff61\030\uff61\032\uff61\033\uff61\034\uff61\035" +
    "\uff61\036\uff61\052\uff61\053\uff61\054\uff61\055\uff61\056\uff61" +
    "\057\uff61\064\uff61\071\uff61\072\uff61\105\uff61\114\uff61\117" +
    "\uff61\001\002\000\032\004\134\005\137\006\144\007\142" +
    "\010\136\011\145\013\135\044\147\061\141\076\140\107" +
    "\143\114\146\001\002\000\006\070\365\073\353\001\002" +
    "\000\004\065\366\001\002\000\054\003\uff62\011\uff62\027" +
    "\uff62\030\uff62\032\uff62\033\uff62\034\uff62\035\uff62\036\uff62" +
    "\052\uff62\053\uff62\054\uff62\055\uff62\056\uff62\057\uff62\064" +
    "\uff62\071\uff62\072\uff62\105\uff62\114\uff62\117\uff62\001\002" +
    "\000\054\003\uff46\011\uff46\027\uff46\030\uff46\032\uff46\033" +
    "\uff46\034\uff46\035\uff46\036\uff46\052\uff46\053\uff46\054\uff46" +
    "\055\uff46\056\uff46\057\uff46\064\uff46\071\uff46\072\uff46\105" +
    "\uff46\114\uff46\117\uff46\001\002\000\054\003\uffbf\011\uffbf" +
    "\027\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\064\uffbf\071\uffbf\072\uffbf\105\uffbf\114\uffbf\117\uffbf\001" +
    "\002\000\054\003\uff44\011\uff44\027\uff44\030\uff44\032\uff44" +
    "\033\uff44\034\uff44\035\uff44\036\uff44\052\uff44\053\uff44\054" +
    "\uff44\055\uff44\056\uff44\057\uff44\064\uff44\071\uff44\072\uff44" +
    "\105\uff44\114\uff44\117\uff44\001\002\000\042\012\160\013" +
    "\152\014\166\015\163\016\161\017\155\020\156\021\164" +
    "\022\165\023\167\024\170\025\157\041\171\042\153\043" +
    "\154\065\373\001\002\000\054\003\uff43\011\uff43\027\uff43" +
    "\030\uff43\032\uff43\033\uff43\034\uff43\035\uff43\036\uff43\052" +
    "\uff43\053\uff43\054\uff43\055\uff43\056\uff43\057\uff43\064\uff43" +
    "\071\uff43\072\uff43\105\uff43\114\uff43\117\uff43\001\002\000" +
    "\040\004\134\005\137\006\144\007\142\010\136\011\145" +
    "\013\135\044\147\061\141\076\140\107\143\114\146\120" +
    "\u012f\121\u0130\122\u012e\001\002\000\034\004\134\005\137" +
    "\006\144\007\142\010\136\011\145\013\135\044\147\061" +
    "\141\062\uff92\076\140\107\143\114\146\001\002\000\004" +
    "\065\u0126\001\002\000\004\065\u0125\001\002\000\032\004" +
    "\134\005\137\006\144\007\142\010\136\011\145\013\135" +
    "\044\147\061\141\076\140\107\143\114\146\001\002\000" +
    "\004\011\u0102\001\002\000\010\026\uff5a\061\u0108\077\u0109" +
    "\001\002\000\054\003\uff89\011\uff89\027\uff89\030\uff89\032" +
    "\uff89\033\uff89\034\uff89\035\uff89\036\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\057\uff89\064\uff89\071\uff89\072" +
    "\uff89\105\uff89\114\uff89\117\uff89\001\002\000\004\026\u0105" +
    "\001\002\000\032\004\134\005\137\006\144\007\142\010" +
    "\136\011\145\013\135\044\147\061\141\076\140\107\143" +
    "\114\146\001\002\000\042\012\160\013\152\014\166\015" +
    "\163\016\161\017\155\020\156\021\164\022\165\023\167" +
    "\024\170\025\157\041\171\042\153\043\154\065\u0107\001" +
    "\002\000\100\003\uff57\004\uff57\005\uff57\006\uff57\007\uff57" +
    "\010\uff57\011\uff57\013\uff57\027\uff57\030\uff57\032\uff57\033" +
    "\uff57\034\uff57\035\uff57\036\uff57\044\uff57\052\uff57\053\uff57" +
    "\054\uff57\055\uff57\056\uff57\057\uff57\061\uff57\064\uff57\071" +
    "\uff57\072\uff57\076\uff57\105\uff57\107\uff57\114\uff57\117\uff57" +
    "\001\002\000\034\004\134\005\137\006\144\007\142\010" +
    "\136\011\145\013\135\044\147\061\141\062\uff92\076\140" +
    "\107\143\114\146\001\002\000\004\011\u010a\001\002\000" +
    "\010\026\uff5a\061\u010d\077\u010e\001\002\000\054\003\uff85" +
    "\011\uff85\027\uff85\030\uff85\032\uff85\033\uff85\034\uff85\035" +
    "\uff85\036\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\057\uff85\064\uff85\071\uff85\072\uff85\105\uff85\114\uff85\117" +
    "\uff85\001\002\000\004\026\uff5b\001\002\000\034\004\134" +
    "\005\137\006\144\007\142\010\136\011\145\013\135\044" +
    "\147\061\141\062\uff92\076\140\107\143\114\146\001\002" +
    "\000\004\011\u0102\001\002\000\004\062\u0110\001\002\000" +
    "\006\065\u0111\077\u0112\001\002\000\054\003\uff87\011\uff87" +
    "\027\uff87\030\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87" +
    "\064\uff87\071\uff87\072\uff87\105\uff87\114\uff87\117\uff87\001" +
    "\002\000\004\011\u0102\001\002\000\054\003\uff88\011\uff88" +
    "\027\uff88\030\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036" +
    "\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88" +
    "\064\uff88\071\uff88\072\uff88\105\uff88\114\uff88\117\uff88\001" +
    "\002\000\004\026\uff5c\001\002\000\004\062\u0116\001\002" +
    "\000\006\065\u0117\077\u0118\001\002\000\054\003\uff84\011" +
    "\uff84\027\uff84\030\uff84\032\uff84\033\uff84\034\uff84\035\uff84" +
    "\036\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057" +
    "\uff84\064\uff84\071\uff84\072\uff84\105\uff84\114\uff84\117\uff84" +
    "\001\002\000\004\011\u010a\001\002\000\054\003\uff86\011" +
    "\uff86\027\uff86\030\uff86\032\uff86\033\uff86\034\uff86\035\uff86" +
    "\036\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057" +
    "\uff86\064\uff86\071\uff86\072\uff86\105\uff86\114\uff86\117\uff86" +
    "\001\002\000\042\012\160\013\152\014\166\015\163\016" +
    "\161\017\155\020\156\021\164\022\165\023\167\024\170" +
    "\025\157\041\171\042\153\043\154\070\u011b\001\002\000" +
    "\006\026\u011c\067\u011d\001\002\000\032\004\134\005\137" +
    "\006\144\007\142\010\136\011\145\013\135\044\147\061" +
    "\141\076\140\107\143\114\146\001\002\000\032\004\134" +
    "\005\137\006\144\007\142\010\136\011\145\013\135\044" +
    "\147\061\141\076\140\107\143\114\146\001\002\000\042" +
    "\012\160\013\152\014\166\015\163\016\161\017\155\020" +
    "\156\021\164\022\165\023\167\024\170\025\157\041\171" +
    "\042\153\043\154\070\u011f\001\002\000\004\026\u0120\001" +
    "\002\000\032\004\134\005\137\006\144\007\142\010\136" +
    "\011\145\013\135\044\147\061\141\076\140\107\143\114" +
    "\146\001\002\000\042\012\160\013\152\014\166\015\163" +
    "\016\161\017\155\020\156\021\164\022\165\023\167\024" +
    "\170\025\157\041\171\042\153\043\154\065\u0122\001\002" +
    "\000\100\003\uff54\004\uff54\005\uff54\006\uff54\007\uff54\010" +
    "\uff54\011\uff54\013\uff54\027\uff54\030\uff54\032\uff54\033\uff54" +
    "\034\uff54\035\uff54\036\uff54\044\uff54\052\uff54\053\uff54\054" +
    "\uff54\055\uff54\056\uff54\057\uff54\061\uff54\064\uff54\071\uff54" +
    "\072\uff54\076\uff54\105\uff54\107\uff54\114\uff54\117\uff54\001" +
    "\002\000\042\012\160\013\152\014\166\015\163\016\161" +
    "\017\155\020\156\021\164\022\165\023\167\024\170\025" +
    "\157\041\171\042\153\043\154\065\u0124\001\002\000\100" +
    "\003\uff55\004\uff55\005\uff55\006\uff55\007\uff55\010\uff55\011" +
    "\uff55\013\uff55\027\uff55\030\uff55\032\uff55\033\uff55\034\uff55" +
    "\035\uff55\036\uff55\044\uff55\052\uff55\053\uff55\054\uff55\055" +
    "\uff55\056\uff55\057\uff55\061\uff55\064\uff55\071\uff55\072\uff55" +
    "\076\uff55\105\uff55\107\uff55\114\uff55\117\uff55\001\002\000" +
    "\054\003\uff50\011\uff50\027\uff50\030\uff50\032\uff50\033\uff50" +
    "\034\uff50\035\uff50\036\uff50\052\uff50\053\uff50\054\uff50\055" +
    "\uff50\056\uff50\057\uff50\064\uff50\071\uff50\072\uff50\105\uff50" +
    "\114\uff50\117\uff50\001\002\000\054\003\uff4f\011\uff4f\027" +
    "\uff4f\030\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f" +
    "\052\uff4f\053\uff4f\054\uff4f\055\uff4f\056\uff4f\057\uff4f\064" +
    "\uff4f\071\uff4f\072\uff4f\105\uff4f\114\uff4f\117\uff4f\001\002" +
    "\000\004\062\u0128\001\002\000\006\065\u0111\077\u0129\001" +
    "\002\000\004\011\u0102\001\002\000\004\026\u012b\001\002" +
    "\000\032\004\134\005\137\006\144\007\142\010\136\011" +
    "\145\013\135\044\147\061\141\076\140\107\143\114\146" +
    "\001\002\000\042\012\160\013\152\014\166\015\163\016" +
    "\161\017\155\020\156\021\164\022\165\023\167\024\170" +
    "\025\157\041\171\042\153\043\154\065\u012d\001\002\000" +
    "\100\003\uff56\004\uff56\005\uff56\006\uff56\007\uff56\010\uff56" +
    "\011\uff56\013\uff56\027\uff56\030\uff56\032\uff56\033\uff56\034" +
    "\uff56\035\uff56\036\uff56\044\uff56\052\uff56\053\uff56\054\uff56" +
    "\055\uff56\056\uff56\057\uff56\061\uff56\064\uff56\071\uff56\072" +
    "\uff56\076\uff56\105\uff56\107\uff56\114\uff56\117\uff56\001\002" +
    "\000\004\061\u0139\001\002\000\004\061\u0136\001\002\000" +
    "\004\061\u0133\001\002\000\042\012\160\013\152\014\166" +
    "\015\163\016\161\017\155\020\156\021\164\022\165\023" +
    "\167\024\170\025\157\041\171\042\153\043\154\065\u0132" +
    "\001\002\000\100\003\uff58\004\uff58\005\uff58\006\uff58\007" +
    "\uff58\010\uff58\011\uff58\013\uff58\027\uff58\030\uff58\032\uff58" +
    "\033\uff58\034\uff58\035\uff58\036\uff58\044\uff58\052\uff58\053" +
    "\uff58\054\uff58\055\uff58\056\uff58\057\uff58\061\uff58\064\uff58" +
    "\071\uff58\072\uff58\076\uff58\105\uff58\107\uff58\114\uff58\117" +
    "\uff58\001\002\000\004\062\u0134\001\002\000\004\065\u0135" +
    "\001\002\000\100\003\uff53\004\uff53\005\uff53\006\uff53\007" +
    "\uff53\010\uff53\011\uff53\013\uff53\027\uff53\030\uff53\032\uff53" +
    "\033\uff53\034\uff53\035\uff53\036\uff53\044\uff53\052\uff53\053" +
    "\uff53\054\uff53\055\uff53\056\uff53\057\uff53\061\uff53\064\uff53" +
    "\071\uff53\072\uff53\076\uff53\105\uff53\107\uff53\114\uff53\117" +
    "\uff53\001\002\000\004\062\u0137\001\002\000\004\065\u0138" +
    "\001\002\000\100\003\uff52\004\uff52\005\uff52\006\uff52\007" +
    "\uff52\010\uff52\011\uff52\013\uff52\027\uff52\030\uff52\032\uff52" +
    "\033\uff52\034\uff52\035\uff52\036\uff52\044\uff52\052\uff52\053" +
    "\uff52\054\uff52\055\uff52\056\uff52\057\uff52\061\uff52\064\uff52" +
    "\071\uff52\072\uff52\076\uff52\105\uff52\107\uff52\114\uff52\117" +
    "\uff52\001\002\000\004\062\u013a\001\002\000\004\065\u013b" +
    "\001\002\000\100\003\uff51\004\uff51\005\uff51\006\uff51\007" +
    "\uff51\010\uff51\011\uff51\013\uff51\027\uff51\030\uff51\032\uff51" +
    "\033\uff51\034\uff51\035\uff51\036\uff51\044\uff51\052\uff51\053" +
    "\uff51\054\uff51\055\uff51\056\uff51\057\uff51\061\uff51\064\uff51" +
    "\071\uff51\072\uff51\076\uff51\105\uff51\107\uff51\114\uff51\117" +
    "\uff51\001\002\000\004\011\u013d\001\002\000\004\026\u013e" +
    "\001\002\000\032\004\134\005\137\006\144\007\142\010" +
    "\136\011\145\013\135\044\147\061\141\076\140\107\143" +
    "\114\146\001\002\000\042\012\160\013\152\014\166\015" +
    "\163\016\161\017\155\020\156\021\164\022\165\023\167" +
    "\024\170\025\157\041\171\042\153\043\154\065\u0140\001" +
    "\002\000\100\003\uff59\004\uff59\005\uff59\006\uff59\007\uff59" +
    "\010\uff59\011\uff59\013\uff59\027\uff59\030\uff59\032\uff59\033" +
    "\uff59\034\uff59\035\uff59\036\uff59\044\uff59\052\uff59\053\uff59" +
    "\054\uff59\055\uff59\056\uff59\057\uff59\061\uff59\064\uff59\071" +
    "\uff59\072\uff59\076\uff59\105\uff59\107\uff59\114\uff59\117\uff59" +
    "\001\002\000\032\004\134\005\137\006\144\007\142\010" +
    "\136\011\145\013\135\044\147\061\141\076\140\107\143" +
    "\114\146\001\002\000\042\012\160\013\152\014\166\015" +
    "\163\016\161\017\155\020\156\021\164\022\165\023\167" +
    "\024\170\025\157\041\171\042\153\043\154\062\u0143\001" +
    "\002\000\004\063\u0144\001\002\000\052\003\104\011\101" +
    "\027\125\030\077\032\071\033\105\034\111\035\115\036" +
    "\066\052\124\053\026\054\037\055\033\056\046\057\036" +
    "\071\123\072\062\105\102\114\100\117\070\001\002\000" +
    "\054\003\104\011\101\027\125\030\077\032\071\033\105" +
    "\034\111\035\115\036\066\052\124\053\026\054\037\055" +
    "\033\056\046\057\036\064\u0146\071\123\072\062\105\102" +
    "\114\100\117\070\001\002\000\056\003\uff6f\011\uff6f\027" +
    "\uff6f\030\uff6f\031\u0148\032\uff6f\033\uff6f\034\uff6f\035\uff6f" +
    "\036\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057" +
    "\uff6f\064\uff6f\071\uff6f\072\uff6f\105\uff6f\114\uff6f\117\uff6f" +
    "\001\002\000\054\003\uff6e\011\uff6e\027\uff6e\030\uff6e\032" +
    "\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\052\uff6e\053\uff6e" +
    "\054\uff6e\055\uff6e\056\uff6e\057\uff6e\064\uff6e\071\uff6e\072" +
    "\uff6e\105\uff6e\114\uff6e\117\uff6e\001\002\000\006\030\077" +
    "\063\u0149\001\002\000\052\003\104\011\101\027\125\030" +
    "\077\032\071\033\105\034\111\035\115\036\066\052\124" +
    "\053\026\054\037\055\033\056\046\057\036\071\123\072" +
    "\062\105\102\114\100\117\070\001\002\000\054\003\uff81" +
    "\011\uff81\027\uff81\030\uff81\032\uff81\033\uff81\034\uff81\035" +
    "\uff81\036\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81" +
    "\057\uff81\064\uff81\071\uff81\072\uff81\105\uff81\114\uff81\117" +
    "\uff81\001\002\000\054\003\104\011\101\027\125\030\077" +
    "\032\071\033\105\034\111\035\115\036\066\052\124\053" +
    "\026\054\037\055\033\056\046\057\036\064\uff71\071\123" +
    "\072\062\105\102\114\100\117\070\001\002\000\004\064" +
    "\u014d\001\002\000\054\003\uff70\011\uff70\027\uff70\030\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\052\uff70\053" +
    "\uff70\054\uff70\055\uff70\056\uff70\057\uff70\064\uff70\071\uff70" +
    "\072\uff70\105\uff70\114\uff70\117\uff70\001\002\000\030\011" +
    "\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\064\uff97\110\uff97\111\uff97\112\uff97\001\002\000\020\011" +
    "\u0153\053\026\054\037\055\033\056\046\057\036\114\100" +
    "\001\002\000\032\004\uff72\005\uff72\006\uff72\007\uff72\010" +
    "\uff72\011\uff72\013\uff72\044\uff72\061\uff72\076\uff72\107\uff72" +
    "\114\uff72\001\002\000\032\004\134\005\137\006\144\007" +
    "\142\010\136\011\145\013\135\044\147\061\141\076\140" +
    "\107\143\114\146\001\002\000\032\004\uff73\005\uff73\006" +
    "\uff73\007\uff73\010\uff73\011\uff73\013\uff73\044\uff73\061\uff73" +
    "\076\uff73\107\uff73\114\uff73\001\002\000\014\011\uff47\026" +
    "\374\061\u0154\067\u0100\077\u0155\001\002\000\034\004\134" +
    "\005\137\006\144\007\142\010\136\011\145\013\135\044" +
    "\147\061\141\062\uff92\076\140\107\143\114\146\001\002" +
    "\000\004\011\u0156\001\002\000\010\026\uff5a\061\u0157\077" +
    "\u0158\001\002\000\034\004\134\005\137\006\144\007\142" +
    "\010\136\011\145\013\135\044\147\061\141\062\uff92\076" +
    "\140\107\143\114\146\001\002\000\004\011\u0156\001\002" +
    "\000\004\062\u015a\001\002\000\004\077\u015b\001\002\000" +
    "\004\011\u0156\001\002\000\004\062\u015d\001\002\000\004" +
    "\077\u015e\001\002\000\004\011\u0156\001\002\000\042\012" +
    "\160\013\152\014\166\015\163\016\161\017\155\020\156" +
    "\021\164\022\165\023\167\024\170\025\157\041\171\042" +
    "\153\043\154\065\u0160\001\002\000\004\011\u0161\001\002" +
    "\000\010\026\u0167\050\u0169\051\u0168\001\002\000\004\062" +
    "\u0163\001\002\000\004\063\u0164\001\002\000\052\003\104" +
    "\011\101\027\125\030\077\032\071\033\105\034\111\035" +
    "\115\036\066\052\124\053\026\054\037\055\033\056\046" +
    "\057\036\071\123\072\062\105\102\114\100\117\070\001" +
    "\002\000\054\003\104\011\101\027\125\030\077\032\071" +
    "\033\105\034\111\035\115\036\066\052\124\053\026\054" +
    "\037\055\033\056\046\057\036\064\u0166\071\123\072\062" +
    "\105\102\114\100\117\070\001\002\000\054\003\uff7e\011" +
    "\uff7e\027\uff7e\030\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e" +
    "\036\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\064\uff7e\071\uff7e\072\uff7e\105\uff7e\114\uff7e\117\uff7e" +
    "\001\002\000\032\004\134\005\137\006\144\007\142\010" +
    "\136\011\145\013\135\044\147\061\141\076\140\107\143" +
    "\114\146\001\002\000\004\062\uff7c\001\002\000\004\062" +
    "\uff7d\001\002\000\042\012\160\013\152\014\166\015\163" +
    "\016\161\017\155\020\156\021\164\022\165\023\167\024" +
    "\170\025\157\041\171\042\153\043\154\062\uff7b\001\002" +
    "\000\034\004\134\005\137\006\144\007\142\010\136\011" +
    "\145\013\135\044\147\061\141\062\uff92\076\140\107\143" +
    "\114\146\001\002\000\004\062\u016d\001\002\000\004\065" +
    "\u016e\001\002\000\054\003\uff6c\011\uff6c\027\uff6c\030\uff6c" +
    "\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\052\uff6c\053" +
    "\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\064\uff6c\071\uff6c" +
    "\072\uff6c\105\uff6c\114\uff6c\117\uff6c\001\002\000\054\003" +
    "\uff45\011\uff45\027\uff45\030\uff45\032\uff45\033\uff45\034\uff45" +
    "\035\uff45\036\uff45\052\uff45\053\uff45\054\uff45\055\uff45\056" +
    "\uff45\057\uff45\064\uff45\071\uff45\072\uff45\105\uff45\114\uff45" +
    "\117\uff45\001\002\000\016\011\055\053\026\054\037\055" +
    "\033\056\046\057\036\001\002\000\004\063\u0172\001\002" +
    "\000\054\003\104\011\101\027\125\030\077\032\071\033" +
    "\105\034\111\035\115\036\066\052\124\053\026\054\037" +
    "\055\033\056\046\057\036\064\uffe0\071\123\072\062\105" +
    "\102\114\100\117\070\001\002\000\004\064\u0174\001\002" +
    "\000\030\011\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057" +
    "\uff98\060\uff98\064\uff98\110\uff98\111\uff98\112\uff98\001\002" +
    "\000\004\011\u0176\001\002\000\006\062\uff95\073\uff95\001" +
    "\002\000\042\012\160\013\152\014\166\015\163\016\161" +
    "\017\155\020\156\021\164\022\165\023\167\024\170\025" +
    "\157\041\171\042\153\043\154\065\u0178\001\002\000\030" +
    "\011\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060" +
    "\uff63\064\uff63\110\uff63\111\uff63\112\uff63\001\002\000\006" +
    "\011\uff47\061\u0196\001\002\000\004\011\u0187\001\002\000" +
    "\004\011\u017c\001\002\000\004\061\u017d\001\002\000\020" +
    "\011\055\053\026\054\037\055\033\056\046\057\036\062" +
    "\u017f\001\002\000\006\062\u0183\073\u0170\001\002\000\004" +
    "\063\u0180\001\002\000\054\003\104\011\101\027\125\030" +
    "\077\032\071\033\105\034\111\035\115\036\066\052\124" +
    "\053\026\054\037\055\033\056\046\057\036\064\uffe0\071" +
    "\123\072\062\105\102\114\100\117\070\001\002\000\004" +
    "\064\u0182\001\002\000\030\011\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\064\uff9d\110\uff9d\111\uff9d" +
    "\112\uff9d\001\002\000\004\063\u0184\001\002\000\054\003" +
    "\104\011\101\027\125\030\077\032\071\033\105\034\111" +
    "\035\115\036\066\052\124\053\026\054\037\055\033\056" +
    "\046\057\036\064\uffe0\071\123\072\062\105\102\114\100" +
    "\117\070\001\002\000\004\064\u0186\001\002\000\030\011" +
    "\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e" +
    "\064\uff9e\110\uff9e\111\uff9e\112\uff9e\001\002\000\010\026" +
    "\u0188\061\u0189\065\u018a\001\002\000\032\004\134\005\137" +
    "\006\144\007\142\010\136\011\145\013\135\044\147\061" +
    "\141\076\140\107\143\114\146\001\002\000\020\011\055" +
    "\053\026\054\037\055\033\056\046\057\036\062\u018c\001" +
    "\002\000\030\011\uff66\053\uff66\054\uff66\055\uff66\056\uff66" +
    "\057\uff66\060\uff66\064\uff66\110\uff66\111\uff66\112\uff66\001" +
    "\002\000\006\062\u0190\073\u0170\001\002\000\004\063\u018d" +
    "\001\002\000\054\003\104\011\101\027\125\030\077\032" +
    "\071\033\105\034\111\035\115\036\066\052\124\053\026" +
    "\054\037\055\033\056\046\057\036\064\uffe0\071\123\072" +
    "\062\105\102\114\100\117\070\001\002\000\004\064\u018f" +
    "\001\002\000\030\011\uff9b\053\uff9b\054\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\060\uff9b\064\uff9b\110\uff9b\111\uff9b\112\uff9b" +
    "\001\002\000\004\063\u0191\001\002\000\054\003\104\011" +
    "\101\027\125\030\077\032\071\033\105\034\111\035\115" +
    "\036\066\052\124\053\026\054\037\055\033\056\046\057" +
    "\036\064\uffe0\071\123\072\062\105\102\114\100\117\070" +
    "\001\002\000\004\064\u0193\001\002\000\030\011\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\064\uff9c" +
    "\110\uff9c\111\uff9c\112\uff9c\001\002\000\042\012\160\013" +
    "\152\014\166\015\163\016\161\017\155\020\156\021\164" +
    "\022\165\023\167\024\170\025\157\041\171\042\153\043" +
    "\154\065\u0195\001\002\000\030\011\uff65\053\uff65\054\uff65" +
    "\055\uff65\056\uff65\057\uff65\060\uff65\064\uff65\110\uff65\111" +
    "\uff65\112\uff65\001\002\000\016\011\055\053\026\054\037" +
    "\055\033\056\046\057\036\001\002\000\006\062\u0198\073" +
    "\u0170\001\002\000\004\063\u0199\001\002\000\054\003\104" +
    "\011\101\027\125\030\077\032\071\033\105\034\111\035" +
    "\115\036\066\052\124\053\026\054\037\055\033\056\046" +
    "\057\036\064\uffe0\071\123\072\062\105\102\114\100\117" +
    "\070\001\002\000\004\064\u019b\001\002\000\030\011\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\064" +
    "\uffde\110\uffde\111\uffde\112\uffde\001\002\000\016\011\055" +
    "\053\026\054\037\055\033\056\046\057\036\001\002\000" +
    "\006\062\u019e\073\u0170\001\002\000\004\063\u019f\001\002" +
    "\000\054\003\104\011\101\027\125\030\077\032\071\033" +
    "\105\034\111\035\115\036\066\052\124\053\026\054\037" +
    "\055\033\056\046\057\036\064\uffe0\071\123\072\062\105" +
    "\102\114\100\117\070\001\002\000\004\064\u01a1\001\002" +
    "\000\030\011\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\064\uffdf\110\uffdf\111\uffdf\112\uffdf\001\002" +
    "\000\004\061\u01a3\001\002\000\020\011\055\053\026\054" +
    "\037\055\033\056\046\057\036\062\u01a5\001\002\000\006" +
    "\062\u01a9\073\u0170\001\002\000\004\063\u01a6\001\002\000" +
    "\054\003\104\011\101\027\125\030\077\032\071\033\105" +
    "\034\111\035\115\036\066\052\124\053\026\054\037\055" +
    "\033\056\046\057\036\064\uffe0\071\123\072\062\105\102" +
    "\114\100\117\070\001\002\000\004\064\u01a8\001\002\000" +
    "\030\011\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\064\uff99\110\uff99\111\uff99\112\uff99\001\002\000" +
    "\004\063\u01aa\001\002\000\054\003\104\011\101\027\125" +
    "\030\077\032\071\033\105\034\111\035\115\036\066\052" +
    "\124\053\026\054\037\055\033\056\046\057\036\064\uffe0" +
    "\071\123\072\062\105\102\114\100\117\070\001\002\000" +
    "\004\064\u01ac\001\002\000\030\011\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\056\uff9a\057\uff9a\060\uff9a\064\uff9a\110\uff9a\111" +
    "\uff9a\112\uff9a\001\002\000\012\002\uffd6\112\uffd6\116\uffd6" +
    "\134\uffd6\001\002\000\030\011\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\064\uffd1\110\uffd1\111\uffd1" +
    "\112\uffd1\001\002\000\030\011\040\053\026\054\037\055" +
    "\033\056\046\057\036\060\034\064\u01b0\110\035\111\042" +
    "\112\030\001\002\000\012\002\uffd8\112\uffd8\116\uffd8\134" +
    "\uffd8\001\002\000\004\011\uffe7\001\002\000\016\053\u01b1" +
    "\054\u01b5\056\u01b8\057\u01b3\060\uffeb\072\u01b9\001\002\000" +
    "\004\011\uffe4\001\002\000\004\060\u01c6\001\002\000\004" +
    "\011\uffe5\001\002\000\004\011\u01c0\001\002\000\016\053" +
    "\u01b1\054\u01b5\056\u01b8\057\u01b3\060\uffeb\072\u01b9\001\002" +
    "\000\004\011\uffe6\001\002\000\012\053\u01b1\054\u01b5\056" +
    "\u01b8\057\u01b3\001\002\000\004\011\u01bb\001\002\000\004" +
    "\026\u01bc\001\002\000\032\004\134\005\137\006\144\007" +
    "\142\010\136\011\145\013\135\044\147\061\141\076\140" +
    "\107\143\114\146\001\002\000\042\012\160\013\152\014" +
    "\166\015\163\016\161\017\155\020\156\021\164\022\165" +
    "\023\167\024\170\025\157\041\171\042\153\043\154\065" +
    "\u01be\001\002\000\016\053\ufff1\054\ufff1\056\ufff1\057\ufff1" +
    "\060\ufff1\072\ufff1\001\002\000\004\060\uffed\001\002\000" +
    "\006\026\u01c1\065\u01c2\001\002\000\032\004\134\005\137" +
    "\006\144\007\142\010\136\011\145\013\135\044\147\061" +
    "\141\076\140\107\143\114\146\001\002\000\016\053\uffef" +
    "\054\uffef\056\uffef\057\uffef\060\uffef\072\uffef\001\002\000" +
    "\042\012\160\013\152\014\166\015\163\016\161\017\155" +
    "\020\156\021\164\022\165\023\167\024\170\025\157\041" +
    "\171\042\153\043\154\065\u01c4\001\002\000\016\053\ufff0" +
    "\054\ufff0\056\ufff0\057\ufff0\060\ufff0\072\ufff0\001\002\000" +
    "\004\002\ufffa\001\002\000\004\115\u01c7\001\002\000\004" +
    "\061\u01c8\001\002\000\004\062\u01c9\001\002\000\004\063" +
    "\u01ca\001\002\000\006\052\u01cc\064\uffe9\001\002\000\006" +
    "\052\u01cc\064\uffe9\001\002\000\004\061\u01cf\001\002\000" +
    "\004\064\u01ce\001\002\000\004\002\uffee\001\002\000\004" +
    "\062\u01d0\001\002\000\004\065\u01d1\001\002\000\006\052" +
    "\uffe8\064\uffe8\001\002\000\004\064\uffea\001\002\000\004" +
    "\060\uffec\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\ufffc\001\002\000\012\002\uffd9\112\uffd9\116\uffd9\134\uffd9" +
    "\001\002\000\020\053\ufff3\054\ufff3\056\ufff3\057\ufff3\060" +
    "\ufff3\072\ufff3\134\ufff3\001\002\000\020\053\ufff4\054\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\072\ufff4\134\ufff4\001\002\000" +
    "\020\053\ufff2\054\ufff2\056\ufff2\057\ufff2\060\ufff2\072\ufff2" +
    "\134\ufff2\001\002\000\020\053\ufff5\054\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\072\ufff5\134\ufff5\001\002\000\004\002\001" +
    "\001\002\000\004\011\u01dd\001\002\000\006\063\u01de\113" +
    "\u01df\001\002\000\030\011\040\053\026\054\037\055\033" +
    "\056\046\057\036\060\034\064\uffd3\110\035\111\042\112" +
    "\030\001\002\000\004\011\u01e0\001\002\000\004\063\u01e1" +
    "\001\002\000\026\011\040\053\026\054\037\055\033\056" +
    "\046\057\036\060\034\110\035\111\042\112\030\001\002" +
    "\000\030\011\040\053\026\054\037\055\033\056\046\057" +
    "\036\060\034\064\u01e3\110\035\111\042\112\030\001\002" +
    "\000\012\002\uffd5\112\uffd5\116\uffd5\134\uffd5\001\002\000" +
    "\004\064\u01e6\001\002\000\030\011\040\053\026\054\037" +
    "\055\033\056\046\057\036\060\034\064\uffd4\110\035\111" +
    "\042\112\030\001\002\000\012\002\uffd7\112\uffd7\116\uffd7" +
    "\134\uffd7\001\002\000\020\053\ufff6\054\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\072\ufff6\134\012\001\002\000\016\053\ufff8" +
    "\054\ufff8\056\ufff8\057\ufff8\060\ufff8\072\ufff8\001\002\000" +
    "\016\053\ufff7\054\ufff7\056\ufff7\057\ufff7\060\ufff7\072\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e7\000\024\002\005\057\012\064\014\066\017\071" +
    "\003\073\007\075\010\077\015\104\013\001\001\000\006" +
    "\070\u01e7\071\u01e6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\064\u01d5\071\003\075\u01d4\077" +
    "\015\001\001\000\016\057\012\064\014\071\003\073\u01d3" +
    "\075\010\077\015\001\001\000\002\001\001\000\012\072" +
    "\u01b5\100\u01b6\101\u01b1\103\u01b3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\030\012" +
    "\044\034\043\051\042\052\040\060\u01ae\065\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\030\012" +
    "\044\034\043\051\042\052\040\060\026\065\031\001\001" +
    "\000\002\001\001\000\016\006\030\012\044\034\043\051" +
    "\042\052\u01ad\065\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0179\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u0176\046" +
    "\147\001\001\000\006\012\055\037\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\071" +
    "\004\074\007\121\010\062\011\107\012\113\013\116\014" +
    "\112\015\066\016\115\017\063\020\111\021\106\022\117" +
    "\031\064\032\102\035\105\044\060\045\075\047\072\053" +
    "\120\062\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\004\130\007\121\010\062\011\107\012" +
    "\113\013\116\014\112\015\066\016\115\017\063\020\111" +
    "\021\106\022\117\031\064\032\102\035\105\044\060\045" +
    "\075\047\072\053\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\371" +
    "\046\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\313\046\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\126\004\074\007" +
    "\121\010\062\011\107\012\113\013\116\014\112\015\066" +
    "\016\115\017\063\020\111\021\106\022\117\031\064\032" +
    "\102\035\105\044\060\045\075\047\072\053\120\001\001" +
    "\000\052\004\130\007\121\010\062\011\107\012\113\013" +
    "\116\014\112\015\066\016\115\017\063\020\111\021\106" +
    "\022\117\031\064\032\102\035\105\044\060\045\075\047" +
    "\072\053\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\150\046\147\001\001\000" +
    "\002\001\001\000\006\005\257\046\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\250\046\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\211\046\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\210\046\147\001\001\000\006\005" +
    "\207\046\147\001\001\000\006\005\206\046\147\001\001" +
    "\000\006\005\205\046\147\001\001\000\006\005\204\046" +
    "\147\001\001\000\006\005\203\046\147\001\001\000\006" +
    "\005\202\046\147\001\001\000\006\005\201\046\147\001" +
    "\001\000\002\001\001\000\006\005\177\046\147\001\001" +
    "\000\006\005\176\046\147\001\001\000\006\005\175\046" +
    "\147\001\001\000\006\005\174\046\147\001\001\000\006" +
    "\005\173\046\147\001\001\000\006\005\172\046\147\001" +
    "\001\000\006\005\171\046\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\225\042\224" +
    "\046\147\063\241\001\001\000\006\005\234\046\147\001" +
    "\001\000\004\055\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\225\042\224\046\147\063\226\001" +
    "\001\000\004\055\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\231\001\001\000\002\001\001\000\006" +
    "\005\233\046\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\237\046\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\244\001\001\000\002\001\001" +
    "\000\006\005\246\046\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\225\042\254\046\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\225\042\224\046\147\063\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\265\046\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\270\004\074\007\121\010\062" +
    "\011\107\012\113\013\116\014\112\015\066\016\115\017" +
    "\063\020\111\021\106\022\117\031\064\032\102\035\105" +
    "\044\060\045\075\047\072\053\120\001\001\000\052\004" +
    "\130\007\121\010\062\011\107\012\113\013\116\014\112" +
    "\015\066\016\115\017\063\020\111\021\106\022\117\031" +
    "\064\032\102\035\105\044\060\045\075\047\072\053\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\300\046\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\320\027\316\030\317\046" +
    "\147\001\001\000\002\001\001\000\010\005\320\030\326" +
    "\046\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\323\004\074\007\121\010\062" +
    "\011\107\012\113\013\116\014\112\015\066\016\115\017" +
    "\063\020\111\021\106\022\117\031\064\032\102\035\105" +
    "\044\060\045\075\047\072\053\120\001\001\000\052\004" +
    "\130\007\121\010\062\011\107\012\113\013\116\014\112" +
    "\015\066\016\115\017\063\020\111\021\106\022\117\031" +
    "\064\032\102\035\105\044\060\045\075\047\072\053\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\331\004\074\007\121" +
    "\010\062\011\107\012\113\013\116\014\112\015\066\016" +
    "\115\017\063\020\111\021\106\022\117\031\064\032\102" +
    "\035\105\044\060\045\075\047\072\053\120\001\001\000" +
    "\052\004\130\007\121\010\062\011\107\012\113\013\116" +
    "\014\112\015\066\016\115\017\063\020\111\021\106\022" +
    "\117\031\064\032\102\035\105\044\060\045\075\047\072" +
    "\053\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\345\001\001" +
    "\000\002\001\001\000\010\005\350\026\347\046\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\353\046\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\350\026\357" +
    "\046\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\350\026\363\046\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u0130\046\147\001" +
    "\001\000\012\005\225\042\224\046\147\063\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u0119\046" +
    "\147\001\001\000\006\054\u0102\056\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u0105\046\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\225\042\224\046\147\063\u0114\001\001\000" +
    "\006\044\u010a\056\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\225\042\224\046" +
    "\147\063\u010e\001\001\000\006\054\u0102\056\u010b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\054\u0112\056\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\u0118\056\u0113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u0122\046" +
    "\147\001\001\000\006\005\u011d\046\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u0120\046\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\054\u0112\056\u0129" +
    "\001\001\000\002\001\001\000\006\005\u012b\046\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u013e\046" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\u0141\046\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\u0144\004\074\007\121\010\062\011\107" +
    "\012\113\013\116\014\112\015\066\016\115\017\063\020" +
    "\111\021\106\022\117\031\064\032\102\035\105\044\060" +
    "\045\075\047\072\053\120\001\001\000\052\004\130\007" +
    "\121\010\062\011\107\012\113\013\116\014\112\015\066" +
    "\016\115\017\063\020\111\021\106\022\117\031\064\032" +
    "\102\035\105\044\060\045\075\047\072\053\120\001\001" +
    "\000\004\025\u0146\001\001\000\002\001\001\000\010\020" +
    "\u0149\021\106\022\117\001\001\000\054\003\u014a\004\074" +
    "\007\121\010\062\011\107\012\113\013\116\014\112\015" +
    "\066\016\115\017\063\020\111\021\106\022\117\031\064" +
    "\032\102\035\105\044\060\045\075\047\072\053\120\001" +
    "\001\000\002\001\001\000\054\004\130\007\121\010\062" +
    "\011\107\012\113\013\116\014\112\015\066\016\115\017" +
    "\063\020\111\021\106\022\117\031\064\032\102\035\105" +
    "\044\060\045\075\047\072\053\120\105\u014b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\u014f\012\113\023\u0150\053\u0151\001\001\000\002\001" +
    "\001\000\006\005\u015e\046\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\225\042\224\046\147\063" +
    "\u015b\001\001\000\004\056\u0103\001\001\000\002\001\001" +
    "\000\012\005\225\042\224\046\147\063\u0158\001\001\000" +
    "\004\056\u010b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\u0129\001\001\000\002\001\001\000\004" +
    "\024\u0161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\u0164\004\074\007\121\010\062" +
    "\011\107\012\113\013\116\014\112\015\066\016\115\017" +
    "\063\020\111\021\106\022\117\031\064\032\102\035\105" +
    "\044\060\045\075\047\072\053\120\001\001\000\052\004" +
    "\130\007\121\010\062\011\107\012\113\013\116\014\112" +
    "\015\066\016\115\017\063\020\111\021\106\022\117\031" +
    "\064\032\102\035\105\044\060\045\075\047\072\053\120" +
    "\001\001\000\002\001\001\000\006\005\u0169\046\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\225\042\224\046\147\063\u016b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0174\001\001\000\002\001\001\000" +
    "\056\003\071\004\074\007\121\010\062\011\107\012\113" +
    "\013\116\014\112\015\066\016\115\017\063\020\111\021" +
    "\106\022\117\031\064\032\102\035\105\044\060\045\075" +
    "\047\072\053\120\062\u0172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\055" +
    "\037\u017d\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\071\004\074\007\121\010\062\011\107\012\113" +
    "\013\116\014\112\015\066\016\115\017\063\020\111\021" +
    "\106\022\117\031\064\032\102\035\105\044\060\045\075" +
    "\047\072\053\120\062\u0180\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\071\004\074" +
    "\007\121\010\062\011\107\012\113\013\116\014\112\015" +
    "\066\016\115\017\063\020\111\021\106\022\117\031\064" +
    "\032\102\035\105\044\060\045\075\047\072\053\120\062" +
    "\u0184\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u0193\046\147\001\001\000\006\012" +
    "\055\037\u018a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\071\004\074\007\121\010" +
    "\062\011\107\012\113\013\116\014\112\015\066\016\115" +
    "\017\063\020\111\021\106\022\117\031\064\032\102\035" +
    "\105\044\060\045\075\047\072\053\120\062\u018d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\071\004\074\007\121\010\062\011\107\012\113" +
    "\013\116\014\112\015\066\016\115\017\063\020\111\021" +
    "\106\022\117\031\064\032\102\035\105\044\060\045\075" +
    "\047\072\053\120\062\u0191\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\055\037\u0196\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\071\004\074\007\121\010\062\011\107" +
    "\012\113\013\116\014\112\015\066\016\115\017\063\020" +
    "\111\021\106\022\117\031\064\032\102\035\105\044\060" +
    "\045\075\047\072\053\120\062\u0199\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\055\037\u019c\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\071\004" +
    "\074\007\121\010\062\011\107\012\113\013\116\014\112" +
    "\015\066\016\115\017\063\020\111\021\106\022\117\031" +
    "\064\032\102\035\105\044\060\045\075\047\072\053\120" +
    "\062\u019f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\055\037\u01a3\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\071\004\074\007" +
    "\121\010\062\011\107\012\113\013\116\014\112\015\066" +
    "\016\115\017\063\020\111\021\106\022\117\031\064\032" +
    "\102\035\105\044\060\045\075\047\072\053\120\062\u01a6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\071\004\074\007\121\010\062\011\107" +
    "\012\113\013\116\014\112\015\066\016\115\017\063\020" +
    "\111\021\106\022\117\031\064\032\102\035\105\044\060" +
    "\045\075\047\072\053\120\062\u01aa\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\030\012\044\034\043\051\042\052\u01ad\065" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\072\u01b5\100\u01b6\101\u01b1\103\u01d2\001\001\000\002\001" +
    "\001\000\004\102\u01c4\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\072\u01b5\100\u01b6\101\u01b1\103\u01be\001" +
    "\001\000\002\001\001\000\004\072\u01b9\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u01bc\046\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u01c2\046\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\074\u01cc\076\u01ca\001\001" +
    "\000\006\074\u01d1\076\u01ca\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\030\012\044\034\043\051\042\052" +
    "\040\060\u01e4\061\u01e3\065\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\030\012\044\034\043\051" +
    "\042\052\040\060\u01e1\065\031\001\001\000\016\006\030" +
    "\012\044\034\043\051\042\052\u01ad\065\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\030\012\044" +
    "\034\043\051\042\052\u01ad\065\031\001\001\000\002\001" +
    "\001\000\006\070\u01e8\071\u01e6\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String currentAmbit;

    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    // public void syntax_error(Symbol s){
    //     System.out.println("Error Sintactico en la linea " +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }

    // public void unrecovered_syntax_error (Symbol s){
    //     System.out.println("Error Sintactico no recuperable en la linea" +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pascal 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pascalCode ::= PROCEDURE 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalCode",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pascal ::= pascalCode java_C 
            {
              LinkedList<Instruction> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c_Jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_Jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c_J = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();
        if(p!=null){
                RESULT.addAll(p);
        }
        if(c_J!=null){
                RESULT.addAll(c_J);
        }
                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascal",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pascal ::= java_C 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascal",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // java_C ::= claass cPrincipal 
            {
              LinkedList<Instruction> RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> j = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); 
        if(j!=null){
                RESULT.addAll(j);
        }
        if(c!=null){
                 RESULT.addAll(c); 
        } 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("java_C",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // java_C ::= cPrincipal 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("java_C",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cPrincipal ::= includes declaracionC mainC 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cPrincipal",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cPrincipal ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cPrincipal",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // includes ::= include otherInclude 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // otherInclude ::= include otherInclude 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otherInclude",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // otherInclude ::= 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otherInclude",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // include ::= INCLUDE PASCALUNO 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // include ::= INCLUDE JAVAUNO 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // include ::= INCLUDE PASCALSIMP 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // include ::= INCLUDE JAVATODO 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decConstC ::= CONST typeC ID ASSIGNMENT EXPRESION SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decConstC",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decVarsC ::= typeC ID ASSIGNMENT EXPRESION SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVarsC",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decVarsC ::= typeC ID SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVarsC",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainC ::= VOID MAIN PAR_OP PAR_CL K_OP instructionsC K_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionC ::= decConstC declaracionC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionC ::= decVarsC declaracionC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instructionsC ::= insC instructionsC 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instructionsC ::= 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // insC ::= PRINT PAR_OP PAR_CL SEMIC 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typeC ::= INT 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typeC ::= CHAR 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typeC ::= DOUBLE 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typeC ::= STRING 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InstructionES ::= InstructionES Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InstructionES ::= Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methodIns ::= InstructionES 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodIns",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // methodIns ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodIns",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // constructor ::= ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, p, ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constructor ::= modPriv ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, p, ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // modPriv ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // modPriv ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // modPriv ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // claass ::= Oneclaass 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // claass ::= claass Oneclaass 
            {
              LinkedList<Instruction> RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> cls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cls; RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Oneclaass ::= CLASS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Oneclaass ::= PUBLIC CLASS ID K_OP insClass K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Classs(id, ins, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Oneclaass ::= CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Oneclaass ::= PUBLIC CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // insClass ::= gInstructionss 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insClass",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // insClass ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insClass",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // gInstructionss ::= gIns 
            {
              LinkedList<Instruction> RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(in);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // gInstructionss ::= gInstructionss gIns 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; RESULT.add(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // gIns ::= methodd 
            {
              Instruction RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction m = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // gIns ::= globalDec 
            {
              Instruction RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction g = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = g; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instruction ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruction ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instruction ::= print 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instruction ::= if 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruction ::= increaseDecrease 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruction ::= for 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Instruction ::= while 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Instruction ::= do 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Instruction ::= match 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Instruction ::= break 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Instruction ::= returnn 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Instruction ::= continue 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Instruction ::= declaracionEstructuraD 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Instruction ::= struct 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Instruction ::= call 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Instruction ::= error SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Instruction ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Negacion(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION DIVIDED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION TIMES EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION RAISED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Raised(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION DIFFERENT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION L_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION G_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= PAR_OP EXPRESION PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= CHARAC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= BOOL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Access(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= THIS DOT ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Access(a, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indx1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indx1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction indx1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx1, indx2, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= TUSTRIN PAR_OP EXPRESION PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionToString(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= callEXP 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= NEW ID PAR_OP callsParameters PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Reference(t, p, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= NEW ID PAR_OP PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Reference(t, new LinkedList<>(), tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // methodd ::= modPriv VOID ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // methodd ::= modPriv VOID ID PAR_OP PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // methodd ::= modPriv typeVar ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // methodd ::= modPriv typeVar ID PAR_OP PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // methodd ::= VOID ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // methodd ::= VOID ID PAR_OP PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // methodd ::= typeVar ID PAR_OP parametersFuncts PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // methodd ::= typeVar ID PAR_OP PAR_CL K_OP methodIns K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // methodd ::= constructor 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametersFuncts ::= parametersFuncts COLON typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var elseParam= new HashMap<String, Object>();
                                            elseParam.put("id", id);
                                            elseParam.put("tipo", b);
                                            RESULT.add(elseParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametersFuncts ::= typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var oneParam = new HashMap<String, Object>();
                                            oneParam.put("id",id);
                                            oneParam.put("tipo", a);
                                            RESULT.add(oneParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // paramss ::= callsParameters 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // paramss ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // callEXP ::= ID DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // callEXP ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // callEXP ::= ID PAR_OP paramss PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // callEXP2 ::= 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // callEXP2 ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // callEXP2 ::= ID PAR_OP paramss PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // callEXP2 ::= ID DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // callEXP2 ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // call ::= ID DOT call2 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // call ::= ID PAR_OP paramss PAR_CL DOT call2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // call ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // call2 ::= ID PAR_OP paramss PAR_CL DOT call 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // call2 ::= ID DOT call 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // call2 ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // callsParameters ::= callsParameters COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // callsParameters ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruction>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // if ::= IF PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL ELSE if 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction elif = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, elif, expleft, expright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // if ::= elsees 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // if ::= simpleIf 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // for ::= FOR PAR_OP declaraAsigna EXPRESION SEMIC updateVarFor PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaFor(a, b, c, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // updateVarFor ::= ID PLUSPLUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // updateVarFor ::= ID MINUSMINUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // updateVarFor ::= ID ASSIGNMENT EXPRESION 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // while ::= WHILE PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaWhile(a, ins, false,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // do ::= DO K_OP InstructionES K_CL WHILE PAR_OP EXPRESION PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CiclicaWhile(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // match ::= SWITCH EXPRESION K_OP listCases K_CL 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cazzozleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cazzozright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> cazzoz = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(exp, cazzoz, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("match",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // listCases ::= listCases case 
            {
              LinkedList<CaseMatch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // listCases ::= case 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>();   RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // case ::= EXPRESION ARROW K_OP InstructionES K_CL 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CaseMatch(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // case ::= DEFAULT ARROW K_OP InstructionES K_CL 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CaseMatch(null, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // declaraAsigna ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // declaraAsigna ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$0 ::= 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = ins;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // cierreElse ::= ELSE K_OP InstructionES NT$0 K_CL 
            {
              LinkedList<Instruction> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (LinkedList<Instruction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierreElse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // simpleIf ::= IF PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(a, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleIf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // elsees ::= IF PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL cierreElse 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insElsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insElsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> insEls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, insEls, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsees",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // print ::= PRINT PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prints(a, false, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // print ::= PRINTLN PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prints(a, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // declaracion ::= typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // declaracion ::= typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // declaracion ::= typeVar ID ASSIGNMENT INP_INT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.ENTERO), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // declaracion ::= typeVar ID ASSIGNMENT INP_C PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.CARACTER), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declaracion ::= typeVar ID ASSIGNMENT INP_F PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.DECIMAL), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // globalDec ::= modPriv typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // globalDec ::= modPriv typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // globalDec ::= typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // globalDec ::= typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVectorAlone BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, vals, null, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVector2D BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruction>> vals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, null, vals, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // valoresVector2D ::= BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // valoresVector2D ::= valoresVector2D COLON BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int listaValsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaValsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> listaVals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = listaVals; RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // valoresVectorAlone ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.add(exp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // valoresVectorAlone ::= valoresVectorAlone COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int valuessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valuessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> valuess = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = valuess; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // assig_to_acces ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // assig_to_acces ::= ID DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // assig_to_acces ::= ID 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // asignacion ::= THIS DOT ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(true, id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // asignacion ::= ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // asignacion ::= ID DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // asignacion ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // asignacion ::= ID BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // asignacion ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int index2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, index2, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // asignacion ::= ID ASSIGNMENT INP_INT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.ENTERO), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // asignacion ::= ID ASSIGNMENT INP_C PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.CARACTER), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // asignacion ::= ID ASSIGNMENT INP_F PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.DECIMAL), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // increaseDecrease ::= ID PLUSPLUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // increaseDecrease ::= ID MINUSMINUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // typeVar ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // typeVar ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // typeVar ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // typeVar ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // typeVar ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // typeVar ::= ID 
            {
              Tipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // break ::= BREAK SEMIC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferBreak(wleft, wright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // continue ::= CONTINUE SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferContinue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // returnn ::= RETURN SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // returnn ::= RETURN EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(exp, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
