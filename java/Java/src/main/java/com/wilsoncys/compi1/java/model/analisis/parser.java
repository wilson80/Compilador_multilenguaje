
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.wilsoncys.compi1.java.model.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.wilsoncys.compi1.java.model.asbtracto.Instruction;
import com.wilsoncys.compi1.java.model.programa.*;
import com.wilsoncys.compi1.java.model.excepciones.Errores;
import com.wilsoncys.compi1.java.model.simbolo.*;
import com.wilsoncys.compi1.java.model.instrucciones.*;
import com.wilsoncys.compi1.java.model.poo.*;
import com.wilsoncys.compi1.java.model.expresiones.*;
import com.wilsoncys.compi1.java.model.expresiones.Aritmeticas.*;
import com.wilsoncys.compi1.java.model.expresiones.Enums.*;
import com.wilsoncys.compi1.java.model.programa.*;
import com.wilsoncys.compi1.java.model.programa.expresiones.*;
import com.wilsoncys.compi1.java.model.programa.instrucciones.*;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\002\002\004\000\002\002\003\000\002\062" +
    "\004\000\002\062\003\000\002\063\004\000\002\063\003" +
    "\000\002\111\003\000\002\065\005\000\002\065\002\000" +
    "\002\125\004\000\002\125\004\000\002\125\002\000\002" +
    "\127\004\000\002\127\004\000\002\126\004\000\002\126" +
    "\004\000\002\066\010\000\002\067\007\000\002\067\005" +
    "\000\002\070\011\000\002\121\004\000\002\121\004\000" +
    "\002\121\004\000\002\121\002\000\002\064\004\000\002" +
    "\064\004\000\002\064\002\000\002\124\003\000\002\124" +
    "\003\000\002\124\003\000\002\124\003\000\002\072\007" +
    "\000\002\072\010\000\002\130\004\000\002\130\005\000" +
    "\002\073\012\000\002\073\012\000\002\073\012\000\002" +
    "\073\012\000\002\074\006\000\002\113\006\000\002\113" +
    "\006\000\002\113\006\000\002\113\003\000\002\113\003" +
    "\000\002\113\003\000\002\113\003\000\002\113\003\000" +
    "\002\113\003\000\002\113\004\000\002\113\004\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\112" +
    "\006\000\002\112\006\000\002\112\006\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\112\003\000\002\112\003\000\002\112\003\000\002" +
    "\112\003\000\002\112\003\000\002\112\004\000\002\120" +
    "\004\000\002\120\002\000\002\103\006\000\002\115\010" +
    "\000\002\115\007\000\002\075\011\000\002\077\013\000" +
    "\002\100\013\000\002\100\003\000\002\100\003\000\002" +
    "\131\002\000\002\116\007\000\002\105\011\000\002\104" +
    "\012\000\002\076\014\000\002\107\004\000\002\107\004" +
    "\000\002\107\005\000\002\106\003\000\002\106\007\000" +
    "\002\101\011\000\002\122\004\000\002\122\002\000\002" +
    "\123\010\000\002\123\007\000\002\114\005\000\002\114" +
    "\003\000\002\117\003\000\002\117\002\000\002\102\011" +
    "\000\002\102\013\000\002\110\010\000\002\110\012\000" +
    "\002\071\004\000\002\071\004\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\005\000\002\071" +
    "\005\000\002\071\005\000\002\071\005\000\002\071\005" +
    "\000\002\071\005\000\002\071\005\000\002\071\005\000" +
    "\002\071\005\000\002\071\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\006" +
    "\000\002\071\011\000\002\071\006\000\002\071\003\000" +
    "\002\055\003\000\002\055\004\000\002\003\004\000\002" +
    "\003\002\000\002\060\011\000\002\060\010\000\002\060" +
    "\012\000\002\060\011\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\057\007\000\002\057\010\000" +
    "\002\057\011\000\002\057\012\000\002\052\003\000\002" +
    "\052\002\000\002\051\003\000\002\051\004\000\002\046" +
    "\003\000\002\046\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\005\006" +
    "\000\002\005\011\000\002\005\003\000\002\005\007\000" +
    "\002\005\006\000\002\033\013\000\002\033\012\000\002" +
    "\033\013\000\002\033\012\000\002\033\012\000\002\033" +
    "\011\000\002\033\012\000\002\033\011\000\002\033\003" +
    "\000\002\036\006\000\002\036\004\000\002\054\003\000" +
    "\002\054\002\000\002\042\005\000\002\042\010\000\002" +
    "\042\006\000\002\045\010\000\002\045\006\000\002\045" +
    "\005\000\002\045\003\000\002\040\005\000\002\040\010" +
    "\000\002\040\007\000\002\044\010\000\002\044\005\000" +
    "\002\044\007\000\002\037\005\000\002\037\003\000\002" +
    "\061\003\000\002\061\003\000\002\056\004\000\002\056" +
    "\002\000\002\020\013\000\002\020\003\000\002\020\003" +
    "\000\002\016\014\000\002\024\004\000\002\024\004\000" +
    "\002\024\005\000\002\014\011\000\002\015\013\000\002" +
    "\017\007\000\002\027\004\000\002\027\002\000\002\030" +
    "\010\000\002\030\007\000\002\023\003\000\002\023\003" +
    "\000\002\132\002\000\002\025\007\000\002\021\011\000" +
    "\002\022\012\000\002\013\007\000\002\013\007\000\002" +
    "\047\005\000\002\047\007\000\002\047\011\000\002\047" +
    "\011\000\002\047\011\000\002\006\006\000\002\006\010" +
    "\000\002\006\005\000\002\006\007\000\002\034\015\000" +
    "\002\034\017\000\002\035\005\000\002\035\007\000\002" +
    "\026\003\000\002\026\005\000\002\050\010\000\002\050" +
    "\005\000\002\050\003\000\002\007\010\000\002\007\006" +
    "\000\002\007\010\000\002\007\013\000\002\007\011\000" +
    "\002\007\014\000\002\007\010\000\002\007\010\000\002" +
    "\007\010\000\002\010\005\000\002\010\005\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\032\004\000\002\031\004\000\002" +
    "\041\004\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02e8\000\032\002\ufff9\051\ufff6\052\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\070\ufff6\077\004\103\020\110\006\112\ufff6" +
    "\121\012\001\002\000\004\103\u02e0\001\002\000\004\002" +
    "\u02df\001\002\000\030\002\ufffb\051\ufffb\052\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\070\ufffb\077\ufffb\103\ufffb\112\ufffb\121" +
    "\ufffb\001\002\000\004\002\ufffe\001\002\000\022\051\ufff6" +
    "\052\ufff6\054\ufff6\055\ufff6\056\ufff6\070\ufff6\112\ufff6\121" +
    "\012\001\002\000\004\002\ufffc\001\002\000\012\115\u02dd" +
    "\116\u02db\117\u02da\120\u02dc\001\002\000\030\002\ufff9\051" +
    "\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\070\ufff6\077\004" +
    "\103\020\112\ufff6\121\012\001\002\000\022\051\ufff6\052" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\070\ufff6\112\ufff6\121\012" +
    "\001\002\000\030\002\ufff9\051\ufff6\052\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\070\ufff6\077\004\103\020\112\ufff6\121\012" +
    "\001\002\000\030\002\uff83\051\uff83\052\uff83\054\uff83\055" +
    "\uff83\056\uff83\070\uff83\077\uff83\103\uff83\112\uff83\121\uff83" +
    "\001\002\000\020\051\uffea\052\uffea\054\uffea\055\uffea\056" +
    "\uffea\070\uffea\112\uffea\001\002\000\004\011\022\001\002" +
    "\000\004\002\000\001\002\000\006\061\023\100\024\001" +
    "\002\000\026\011\041\051\027\052\040\053\034\054\047" +
    "\055\037\056\035\075\036\076\042\077\031\001\002\000" +
    "\004\011\025\001\002\000\004\061\026\001\002\000\026" +
    "\011\041\051\027\052\040\053\034\054\047\055\037\056" +
    "\035\075\036\076\042\077\031\001\002\000\006\011\ufeeb" +
    "\065\ufeeb\001\002\000\030\011\041\051\027\052\040\053" +
    "\034\054\047\055\037\056\035\062\u01b1\075\036\076\042" +
    "\077\031\001\002\000\020\011\uff7b\051\uff7b\052\uff7b\053" +
    "\uff7b\054\uff7b\055\uff7b\056\uff7b\001\002\000\030\011\uff39" +
    "\051\uff39\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39\062" +
    "\uff39\075\uff39\076\uff39\077\uff39\001\002\000\030\011\uff6f" +
    "\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\062" +
    "\uff6f\075\uff6f\076\uff6f\077\uff6f\001\002\000\006\011\ufee8" +
    "\065\ufee8\001\002\000\004\011\u01a6\001\002\000\020\011" +
    "\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a" +
    "\001\002\000\006\011\ufeec\065\ufeec\001\002\000\006\011" +
    "\ufeea\065\ufeea\001\002\000\006\011\ufee7\057\u019c\001\002" +
    "\000\020\011\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055" +
    "\uff79\056\uff79\001\002\000\030\011\uff72\051\uff72\052\uff72" +
    "\053\uff72\054\uff72\055\uff72\056\uff72\062\uff72\075\uff72\076" +
    "\uff72\077\uff72\001\002\000\020\011\u0175\051\027\052\040" +
    "\053\034\054\047\055\037\056\u0177\001\002\000\030\011" +
    "\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70" +
    "\062\uff70\075\uff70\076\uff70\077\uff70\001\002\000\004\011" +
    "\050\001\002\000\006\011\ufee9\065\ufee9\001\002\000\010" +
    "\026\051\057\052\063\053\001\002\000\030\004\131\005" +
    "\134\006\140\007\137\010\133\011\141\013\132\043\143" +
    "\057\136\072\135\101\142\001\002\000\020\011\056\051" +
    "\027\052\040\053\034\054\047\055\037\060\055\001\002" +
    "\000\030\011\uff04\051\uff04\052\uff04\053\uff04\054\uff04\055" +
    "\uff04\056\uff04\062\uff04\075\uff04\076\uff04\077\uff04\001\002" +
    "\000\006\060\u016d\071\u016c\001\002\000\004\061\061\001" +
    "\002\000\006\011\ufee7\065\ufee7\001\002\000\004\011\060" +
    "\001\002\000\006\060\uff37\071\uff37\001\002\000\052\003" +
    "\uff80\011\uff80\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80" +
    "\036\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055" +
    "\uff80\062\uff80\067\uff80\070\uff80\074\uff80\101\uff80\104\uff80" +
    "\001\002\000\052\003\103\011\101\027\123\030\076\032" +
    "\074\034\107\035\114\036\071\050\122\051\027\052\040" +
    "\053\034\054\047\055\037\062\066\067\121\070\064\074" +
    "\102\101\100\104\073\001\002\000\054\003\uff62\011\uff62" +
    "\027\uff62\030\uff62\032\uff62\033\uff62\034\uff62\035\uff62\036" +
    "\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055\uff62" +
    "\062\uff62\067\uff62\070\uff62\074\uff62\101\uff62\104\uff62\001" +
    "\002\000\004\011\ufeed\001\002\000\054\003\uff6a\011\uff6a" +
    "\027\uff6a\030\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036" +
    "\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a" +
    "\062\uff6a\067\uff6a\070\uff6a\074\uff6a\101\uff6a\104\uff6a\001" +
    "\002\000\030\011\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a" +
    "\055\uff3a\056\uff3a\062\uff3a\075\uff3a\076\uff3a\077\uff3a\001" +
    "\002\000\054\003\uff66\011\uff66\027\uff66\030\uff66\032\uff66" +
    "\033\uff66\034\uff66\035\uff66\036\uff66\050\uff66\051\uff66\052" +
    "\uff66\053\uff66\054\uff66\055\uff66\062\uff66\067\uff66\070\uff66" +
    "\074\uff66\101\uff66\104\uff66\001\002\000\054\003\uff64\011" +
    "\uff64\027\uff64\030\uff64\032\uff64\033\uff64\034\uff64\035\uff64" +
    "\036\uff64\050\uff64\051\uff64\052\uff64\053\uff64\054\uff64\055" +
    "\uff64\062\uff64\067\uff64\070\uff64\074\uff64\101\uff64\104\uff64" +
    "\001\002\000\004\063\u016b\001\002\000\054\003\uff67\011" +
    "\uff67\027\uff67\030\uff67\032\uff67\033\uff67\034\uff67\035\uff67" +
    "\036\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67\055" +
    "\uff67\062\uff67\067\uff67\070\uff67\074\uff67\101\uff67\104\uff67" +
    "\001\002\000\004\057\u0167\001\002\000\004\057\u014b\001" +
    "\002\000\054\003\uff65\011\uff65\027\uff65\030\uff65\032\uff65" +
    "\033\uff65\034\uff65\035\uff65\036\uff65\050\uff65\051\uff65\052" +
    "\uff65\053\uff65\054\uff65\055\uff65\062\uff65\067\uff65\070\uff65" +
    "\074\uff65\101\uff65\104\uff65\001\002\000\004\057\u0139\001" +
    "\002\000\054\003\uff81\011\uff81\027\uff81\030\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\036\uff81\050\uff81\051\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\062\uff81\067\uff81\070\uff81" +
    "\074\uff81\101\uff81\104\uff81\001\002\000\004\073\u0134\001" +
    "\002\000\020\011\ufee7\026\364\046\367\047\366\057\365" +
    "\065\370\073\371\001\002\000\032\004\131\005\134\006" +
    "\140\007\137\010\133\011\141\013\132\043\143\057\136" +
    "\063\361\072\135\101\142\001\002\000\056\003\uff60\011" +
    "\uff60\027\uff60\030\uff60\032\uff60\033\uff60\034\uff60\035\uff60" +
    "\036\uff60\050\uff60\051\uff60\052\uff60\053\uff60\054\uff60\055" +
    "\uff60\062\uff60\063\360\067\uff60\070\uff60\074\uff60\101\uff60" +
    "\104\uff60\001\002\000\054\003\uff1f\011\uff1f\027\uff1f\030" +
    "\uff1f\032\uff1f\033\uff1f\034\uff1f\035\uff1f\036\uff1f\050\uff1f" +
    "\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055\uff1f\062\uff1f\067" +
    "\uff1f\070\uff1f\074\uff1f\101\uff1f\104\uff1f\001\002\000\054" +
    "\003\uff63\011\uff63\027\uff63\030\uff63\032\uff63\033\uff63\034" +
    "\uff63\035\uff63\036\uff63\050\uff63\051\uff63\052\uff63\053\uff63" +
    "\054\uff63\055\uff63\062\uff63\067\uff63\070\uff63\074\uff63\101" +
    "\uff63\104\uff63\001\002\000\004\011\325\001\002\000\030" +
    "\004\131\005\134\006\140\007\137\010\133\011\141\013" +
    "\132\043\143\057\136\072\135\101\142\001\002\000\054" +
    "\003\uff68\011\uff68\027\uff68\030\uff68\032\uff68\033\uff68\034" +
    "\uff68\035\uff68\036\uff68\050\uff68\051\uff68\052\uff68\053\uff68" +
    "\054\uff68\055\uff68\062\uff68\067\uff68\070\uff68\074\uff68\101" +
    "\uff68\104\uff68\001\002\000\054\003\uff6b\011\uff6b\027\uff6b" +
    "\030\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\050" +
    "\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\062\uff6b" +
    "\067\uff6b\070\uff6b\074\uff6b\101\uff6b\104\uff6b\001\002\000" +
    "\004\011\264\001\002\000\054\003\uff69\011\uff69\027\uff69" +
    "\030\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\050" +
    "\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\062\uff69" +
    "\067\uff69\070\uff69\074\uff69\101\uff69\104\uff69\001\002\000" +
    "\004\057\256\001\002\000\054\003\uff6c\011\uff6c\027\uff6c" +
    "\030\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\050" +
    "\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\062\uff6c" +
    "\067\uff6c\070\uff6c\074\uff6c\101\uff6c\104\uff6c\001\002\000" +
    "\054\003\uff20\011\uff20\027\uff20\030\uff20\032\uff20\033\uff20" +
    "\034\uff20\035\uff20\036\uff20\050\uff20\051\uff20\052\uff20\053" +
    "\uff20\054\uff20\055\uff20\062\uff20\067\uff20\070\uff20\074\uff20" +
    "\101\uff20\104\uff20\001\002\000\054\003\uff6e\011\uff6e\027" +
    "\uff6e\030\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e" +
    "\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\062" +
    "\uff6e\067\uff6e\070\uff6e\074\uff6e\101\uff6e\104\uff6e\001\002" +
    "\000\054\003\uff6d\011\uff6d\027\uff6d\030\uff6d\032\uff6d\033" +
    "\uff6d\034\uff6d\035\uff6d\036\uff6d\050\uff6d\051\uff6d\052\uff6d" +
    "\053\uff6d\054\uff6d\055\uff6d\062\uff6d\067\uff6d\070\uff6d\074" +
    "\uff6d\101\uff6d\104\uff6d\001\002\000\004\011\ufeee\001\002" +
    "\000\004\057\252\001\002\000\004\061\124\001\002\000" +
    "\052\003\uff80\011\uff80\027\uff80\030\uff80\032\uff80\034\uff80" +
    "\035\uff80\036\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054" +
    "\uff80\055\uff80\062\uff80\067\uff80\070\uff80\074\uff80\101\uff80" +
    "\104\uff80\001\002\000\052\003\103\011\101\027\123\030" +
    "\076\032\074\034\107\035\114\036\071\050\122\051\027" +
    "\052\040\053\034\054\047\055\037\062\126\067\121\070" +
    "\064\074\102\101\100\104\073\001\002\000\004\035\127" +
    "\001\002\000\004\057\130\001\002\000\030\004\131\005" +
    "\134\006\140\007\137\010\133\011\141\013\132\043\143" +
    "\057\136\072\135\101\142\001\002\000\054\012\uff4b\013" +
    "\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b\021\uff4b" +
    "\022\uff4b\023\uff4b\024\uff4b\025\uff4b\040\uff4b\041\uff4b\042" +
    "\uff4b\060\uff4b\061\uff4b\063\uff4b\064\uff4b\066\uff4b\071\uff4b" +
    "\001\002\000\030\004\131\005\134\006\140\007\137\010" +
    "\133\011\141\013\132\043\143\057\136\072\135\101\142" +
    "\001\002\000\054\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016" +
    "\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c\024\uff4c" +
    "\025\uff4c\040\uff4c\041\uff4c\042\uff4c\060\uff4c\061\uff4c\063" +
    "\uff4c\064\uff4c\066\uff4c\071\uff4c\001\002\000\054\012\uff49" +
    "\013\uff49\014\uff49\015\uff49\016\uff49\017\uff49\020\uff49\021" +
    "\uff49\022\uff49\023\uff49\024\uff49\025\uff49\040\uff49\041\uff49" +
    "\042\uff49\060\uff49\061\uff49\063\uff49\064\uff49\066\uff49\071" +
    "\uff49\001\002\000\004\011\244\001\002\000\030\004\131" +
    "\005\134\006\140\007\137\010\133\011\141\013\132\043" +
    "\143\057\136\072\135\101\142\001\002\000\054\012\uff4d" +
    "\013\uff4d\014\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d\021" +
    "\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\040\uff4d\041\uff4d" +
    "\042\uff4d\060\uff4d\061\uff4d\063\uff4d\064\uff4d\066\uff4d\071" +
    "\uff4d\001\002\000\054\012\uff4a\013\uff4a\014\uff4a\015\uff4a" +
    "\016\uff4a\017\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\024" +
    "\uff4a\025\uff4a\040\uff4a\041\uff4a\042\uff4a\060\uff4a\061\uff4a" +
    "\063\uff4a\064\uff4a\066\uff4a\071\uff4a\001\002\000\062\012" +
    "\uff48\013\uff48\014\uff48\015\uff48\016\uff48\017\uff48\020\uff48" +
    "\021\uff48\022\uff48\023\uff48\024\uff48\025\uff48\040\uff48\041" +
    "\uff48\042\uff48\057\211\060\uff48\061\uff48\063\uff48\064\uff48" +
    "\065\212\066\uff48\071\uff48\073\213\001\002\000\004\073" +
    "\207\001\002\000\030\004\131\005\134\006\140\007\137" +
    "\010\133\011\141\013\132\043\143\057\136\072\135\101" +
    "\142\001\002\000\054\012\uff44\013\uff44\014\uff44\015\uff44" +
    "\016\uff44\017\uff44\020\uff44\021\uff44\022\uff44\023\uff44\024" +
    "\uff44\025\uff44\040\uff44\041\uff44\042\uff44\060\uff44\061\uff44" +
    "\063\uff44\064\uff44\066\uff44\071\uff44\001\002\000\042\012" +
    "\154\013\147\014\162\015\157\016\156\017\151\020\152" +
    "\021\160\022\161\023\163\024\164\025\153\040\165\041" +
    "\146\042\150\060\155\001\002\000\030\004\131\005\134" +
    "\006\140\007\137\010\133\011\141\013\132\043\143\057" +
    "\136\072\135\101\142\001\002\000\030\004\131\005\134" +
    "\006\140\007\137\010\133\011\141\013\132\043\143\057" +
    "\136\072\135\101\142\001\002\000\030\004\131\005\134" +
    "\006\140\007\137\010\133\011\141\013\132\043\143\057" +
    "\136\072\135\101\142\001\002\000\030\004\131\005\134" +
    "\006\140\007\137\010\133\011\141\013\132\043\143\057" +
    "\136\072\135\101\142\001\002\000\030\004\131\005\134" +
    "\006\140\007\137\010\133\011\141\013\132\043\143\057" +
    "\136\072\135\101\142\001\002\000\030\004\131\005\134" +
    "\006\140\007\137\010\133\011\141\013\132\043\143\057" +
    "\136\072\135\101\142\001\002\000\030\004\131\005\134" +
    "\006\140\007\137\010\133\011\141\013\132\043\143\057" +
    "\136\072\135\101\142\001\002\000\004\063\176\001\002" +
    "\000\030\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\072\135\101\142\001\002" +
    "\000\030\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\072\135\101\142\001\002" +
    "\000\030\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\072\135\101\142\001\002" +
    "\000\030\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\072\135\101\142\001\002" +
    "\000\030\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\072\135\101\142\001\002" +
    "\000\030\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\072\135\101\142\001\002" +
    "\000\030\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\072\135\101\142\001\002" +
    "\000\030\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\072\135\101\142\001\002" +
    "\000\054\012\154\013\147\014\162\015\157\016\156\017" +
    "\151\020\152\021\160\022\161\023\163\024\164\025\153" +
    "\040\uff50\041\146\042\150\060\uff50\061\uff50\063\uff50\064" +
    "\uff50\066\uff50\071\uff50\001\002\000\054\012\154\013\147" +
    "\014\162\015\157\016\156\017\151\020\uff57\021\uff57\022" +
    "\uff57\023\uff57\024\uff57\025\uff57\040\uff57\041\uff57\042\uff57" +
    "\060\uff57\061\uff57\063\uff57\064\uff57\066\uff57\071\uff57\001" +
    "\002\000\054\012\154\013\147\014\162\015\157\016\156" +
    "\017\151\020\uff54\021\uff54\022\uff54\023\uff54\024\uff54\025" +
    "\uff54\040\uff54\041\uff54\042\uff54\060\uff54\061\uff54\063\uff54" +
    "\064\uff54\066\uff54\071\uff54\001\002\000\054\012\uff5a\013" +
    "\uff5a\014\uff5a\015\uff5a\016\156\017\uff5a\020\uff5a\021\uff5a" +
    "\022\uff5a\023\uff5a\024\uff5a\025\uff5a\040\uff5a\041\uff5a\042" +
    "\uff5a\060\uff5a\061\uff5a\063\uff5a\064\uff5a\066\uff5a\071\uff5a" +
    "\001\002\000\054\012\154\013\147\014\162\015\157\016" +
    "\156\017\151\020\uff52\021\uff52\022\uff52\023\uff52\024\uff52" +
    "\025\uff52\040\uff52\041\uff52\042\uff52\060\uff52\061\uff52\063" +
    "\uff52\064\uff52\066\uff52\071\uff52\001\002\000\054\012\154" +
    "\013\147\014\162\015\157\016\156\017\151\020\uff55\021" +
    "\uff55\022\uff55\023\uff55\024\uff55\025\uff55\040\uff55\041\uff55" +
    "\042\uff55\060\uff55\061\uff55\063\uff55\064\uff55\066\uff55\071" +
    "\uff55\001\002\000\054\012\uff5b\013\uff5b\014\uff5b\015\uff5b" +
    "\016\156\017\uff5b\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024" +
    "\uff5b\025\uff5b\040\uff5b\041\uff5b\042\uff5b\060\uff5b\061\uff5b" +
    "\063\uff5b\064\uff5b\066\uff5b\071\uff5b\001\002\000\052\012" +
    "\uff58\013\uff58\014\uff58\015\uff58\017\uff58\020\uff58\021\uff58" +
    "\022\uff58\023\uff58\024\uff58\025\uff58\040\uff58\041\uff58\042" +
    "\uff58\060\uff58\061\uff58\063\uff58\064\uff58\066\uff58\071\uff58" +
    "\001\002\000\054\003\uff19\011\uff19\027\uff19\030\uff19\032" +
    "\uff19\033\uff19\034\uff19\035\uff19\036\uff19\050\uff19\051\uff19" +
    "\052\uff19\053\uff19\054\uff19\055\uff19\062\uff19\067\uff19\070" +
    "\uff19\074\uff19\101\uff19\104\uff19\001\002\000\054\012\uff5d" +
    "\013\uff5d\014\162\015\157\016\156\017\151\020\uff5d\021" +
    "\uff5d\022\uff5d\023\uff5d\024\uff5d\025\uff5d\040\uff5d\041\uff5d" +
    "\042\uff5d\060\uff5d\061\uff5d\063\uff5d\064\uff5d\066\uff5d\071" +
    "\uff5d\001\002\000\054\012\154\013\147\014\162\015\157" +
    "\016\156\017\151\020\uff56\021\uff56\022\uff56\023\uff56\024" +
    "\uff56\025\uff56\040\uff56\041\uff56\042\uff56\060\uff56\061\uff56" +
    "\063\uff56\064\uff56\066\uff56\071\uff56\001\002\000\054\012" +
    "\154\013\147\014\162\015\157\016\156\017\151\020\uff53" +
    "\021\uff53\022\uff53\023\uff53\024\uff53\025\uff53\040\uff53\041" +
    "\uff53\042\uff53\060\uff53\061\uff53\063\uff53\064\uff53\066\uff53" +
    "\071\uff53\001\002\000\054\012\uff59\013\uff59\014\uff59\015" +
    "\uff59\016\156\017\uff59\020\uff59\021\uff59\022\uff59\023\uff59" +
    "\024\uff59\025\uff59\040\uff59\041\uff59\042\uff59\060\uff59\061" +
    "\uff59\063\uff59\064\uff59\066\uff59\071\uff59\001\002\000\054" +
    "\012\154\013\147\014\162\015\157\016\156\017\151\020" +
    "\152\021\160\022\161\023\163\024\164\025\153\040\uff4f" +
    "\041\uff4f\042\uff4f\060\uff4f\061\uff4f\063\uff4f\064\uff4f\066" +
    "\uff4f\071\uff4f\001\002\000\054\012\uff5c\013\uff5c\014\162" +
    "\015\157\016\156\017\151\020\uff5c\021\uff5c\022\uff5c\023" +
    "\uff5c\024\uff5c\025\uff5c\040\uff5c\041\uff5c\042\uff5c\060\uff5c" +
    "\061\uff5c\063\uff5c\064\uff5c\066\uff5c\071\uff5c\001\002\000" +
    "\054\012\154\013\147\014\162\015\157\016\156\017\151" +
    "\020\152\021\160\022\161\023\163\024\164\025\153\040" +
    "\uff51\041\uff51\042\150\060\uff51\061\uff51\063\uff51\064\uff51" +
    "\066\uff51\071\uff51\001\002\000\054\012\154\013\147\014" +
    "\162\015\157\016\156\017\151\020\152\021\160\022\161" +
    "\023\163\024\164\025\153\040\uff5e\041\uff5e\042\uff5e\060" +
    "\uff5e\061\uff5e\063\uff5e\064\uff5e\066\uff5e\071\uff5e\001\002" +
    "\000\004\011\210\001\002\000\054\012\uff47\013\uff47\014" +
    "\uff47\015\uff47\016\uff47\017\uff47\020\uff47\021\uff47\022\uff47" +
    "\023\uff47\024\uff47\025\uff47\040\uff47\041\uff47\042\uff47\060" +
    "\uff47\061\uff47\063\uff47\064\uff47\066\uff47\071\uff47\001\002" +
    "\000\032\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\060\uff35\072\135\101\142" +
    "\001\002\000\030\004\131\005\134\006\140\007\137\010" +
    "\133\011\141\013\132\043\143\057\136\072\135\101\142" +
    "\001\002\000\004\011\214\001\002\000\060\012\uff2e\013" +
    "\uff2e\014\uff2e\015\uff2e\016\uff2e\017\uff2e\020\uff2e\021\uff2e" +
    "\022\uff2e\023\uff2e\024\uff2e\025\uff2e\040\uff2e\041\uff2e\042" +
    "\uff2e\057\216\060\uff2e\061\uff2e\063\uff2e\064\uff2e\066\uff2e" +
    "\071\uff2e\073\217\001\002\000\054\012\uff34\013\uff34\014" +
    "\uff34\015\uff34\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34" +
    "\023\uff34\024\uff34\025\uff34\040\uff34\041\uff34\042\uff34\060" +
    "\uff34\061\uff34\063\uff34\064\uff34\066\uff34\071\uff34\001\002" +
    "\000\032\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\060\uff35\072\135\101\142" +
    "\001\002\000\004\011\214\001\002\000\054\012\uff2f\013" +
    "\uff2f\014\uff2f\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f" +
    "\022\uff2f\023\uff2f\024\uff2f\025\uff2f\040\uff2f\041\uff2f\042" +
    "\uff2f\060\uff2f\061\uff2f\063\uff2f\064\uff2f\066\uff2f\071\uff2f" +
    "\001\002\000\006\060\uff36\071\227\001\002\000\044\012" +
    "\154\013\147\014\162\015\157\016\156\017\151\020\152" +
    "\021\160\022\161\023\163\024\164\025\153\040\165\041" +
    "\146\042\150\060\uff26\071\uff26\001\002\000\004\060\224" +
    "\001\002\000\056\012\uff30\013\uff30\014\uff30\015\uff30\016" +
    "\uff30\017\uff30\020\uff30\021\uff30\022\uff30\023\uff30\024\uff30" +
    "\025\uff30\040\uff30\041\uff30\042\uff30\060\uff30\061\uff30\063" +
    "\uff30\064\uff30\066\uff30\071\uff30\073\225\001\002\000\004" +
    "\011\214\001\002\000\054\012\uff31\013\uff31\014\uff31\015" +
    "\uff31\016\uff31\017\uff31\020\uff31\021\uff31\022\uff31\023\uff31" +
    "\024\uff31\025\uff31\040\uff31\041\uff31\042\uff31\060\uff31\061" +
    "\uff31\063\uff31\064\uff31\066\uff31\071\uff31\001\002\000\030" +
    "\004\131\005\134\006\140\007\137\010\133\011\141\013" +
    "\132\043\143\057\136\072\135\101\142\001\002\000\044" +
    "\012\154\013\147\014\162\015\157\016\156\017\151\020" +
    "\152\021\160\022\161\023\163\024\164\025\153\040\165" +
    "\041\146\042\150\060\uff27\071\uff27\001\002\000\042\012" +
    "\154\013\147\014\162\015\157\016\156\017\151\020\152" +
    "\021\160\022\161\023\163\024\164\025\153\040\165\041" +
    "\146\042\150\066\232\001\002\000\056\012\uff46\013\uff46" +
    "\014\uff46\015\uff46\016\uff46\017\uff46\020\uff46\021\uff46\022" +
    "\uff46\023\uff46\024\uff46\025\uff46\040\uff46\041\uff46\042\uff46" +
    "\060\uff46\061\uff46\063\uff46\064\uff46\065\233\066\uff46\071" +
    "\uff46\001\002\000\030\004\131\005\134\006\140\007\137" +
    "\010\133\011\141\013\132\043\143\057\136\072\135\101" +
    "\142\001\002\000\042\012\154\013\147\014\162\015\157" +
    "\016\156\017\151\020\152\021\160\022\161\023\163\024" +
    "\164\025\153\040\165\041\146\042\150\066\235\001\002" +
    "\000\054\012\uff45\013\uff45\014\uff45\015\uff45\016\uff45\017" +
    "\uff45\020\uff45\021\uff45\022\uff45\023\uff45\024\uff45\025\uff45" +
    "\040\uff45\041\uff45\042\uff45\060\uff45\061\uff45\063\uff45\064" +
    "\uff45\066\uff45\071\uff45\001\002\000\004\060\237\001\002" +
    "\000\056\012\uff32\013\uff32\014\uff32\015\uff32\016\uff32\017" +
    "\uff32\020\uff32\021\uff32\022\uff32\023\uff32\024\uff32\025\uff32" +
    "\040\uff32\041\uff32\042\uff32\060\uff32\061\uff32\063\uff32\064" +
    "\uff32\066\uff32\071\uff32\073\240\001\002\000\004\011\214" +
    "\001\002\000\054\012\uff33\013\uff33\014\uff33\015\uff33\016" +
    "\uff33\017\uff33\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33" +
    "\025\uff33\040\uff33\041\uff33\042\uff33\060\uff33\061\uff33\063" +
    "\uff33\064\uff33\066\uff33\071\uff33\001\002\000\042\012\154" +
    "\013\147\014\162\015\157\016\156\017\151\020\152\021" +
    "\160\022\161\023\163\024\164\025\153\040\165\041\146" +
    "\042\150\060\243\001\002\000\054\012\uff4e\013\uff4e\014" +
    "\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e" +
    "\023\uff4e\024\uff4e\025\uff4e\040\uff4e\041\uff4e\042\uff4e\060" +
    "\uff4e\061\uff4e\063\uff4e\064\uff4e\066\uff4e\071\uff4e\001\002" +
    "\000\004\057\245\001\002\000\032\004\131\005\134\006" +
    "\140\007\137\010\133\011\141\013\132\043\143\057\136" +
    "\060\247\072\135\101\142\001\002\000\006\060\250\071" +
    "\227\001\002\000\054\012\uff42\013\uff42\014\uff42\015\uff42" +
    "\016\uff42\017\uff42\020\uff42\021\uff42\022\uff42\023\uff42\024" +
    "\uff42\025\uff42\040\uff42\041\uff42\042\uff42\060\uff42\061\uff42" +
    "\063\uff42\064\uff42\066\uff42\071\uff42\001\002\000\054\012" +
    "\uff43\013\uff43\014\uff43\015\uff43\016\uff43\017\uff43\020\uff43" +
    "\021\uff43\022\uff43\023\uff43\024\uff43\025\uff43\040\uff43\041" +
    "\uff43\042\uff43\060\uff43\061\uff43\063\uff43\064\uff43\066\uff43" +
    "\071\uff43\001\002\000\054\012\uff5f\013\uff5f\014\uff5f\015" +
    "\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f" +
    "\024\uff5f\025\uff5f\040\uff5f\041\uff5f\042\uff5f\060\uff5f\061" +
    "\uff5f\063\uff5f\064\uff5f\066\uff5f\071\uff5f\001\002\000\032" +
    "\004\131\005\134\006\140\007\137\010\133\011\141\013" +
    "\132\043\143\057\136\060\uff35\072\135\101\142\001\002" +
    "\000\004\060\254\001\002\000\004\063\255\001\002\000" +
    "\054\003\uff0d\011\uff0d\027\uff0d\030\uff0d\032\uff0d\033\uff0d" +
    "\034\uff0d\035\uff0d\036\uff0d\050\uff0d\051\uff0d\052\uff0d\053" +
    "\uff0d\054\uff0d\055\uff0d\062\uff0d\067\uff0d\070\uff0d\074\uff0d" +
    "\101\uff0d\104\uff0d\001\002\000\030\004\131\005\134\006" +
    "\140\007\137\010\133\011\141\013\132\043\143\057\136" +
    "\072\135\101\142\001\002\000\042\012\154\013\147\014" +
    "\162\015\157\016\156\017\151\020\152\021\160\022\161" +
    "\023\163\024\164\025\153\040\165\041\146\042\150\060" +
    "\260\001\002\000\004\061\261\001\002\000\052\003\uff80" +
    "\011\uff80\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80\036" +
    "\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80" +
    "\062\uff80\067\uff80\070\uff80\074\uff80\101\uff80\104\uff80\001" +
    "\002\000\052\003\103\011\101\027\123\030\076\032\074" +
    "\034\107\035\114\036\071\050\122\051\027\052\040\053" +
    "\034\054\047\055\037\062\263\067\121\070\064\074\102" +
    "\101\100\104\073\001\002\000\054\003\uff1a\011\uff1a\027" +
    "\uff1a\030\uff1a\032\uff1a\033\uff1a\034\uff1a\035\uff1a\036\uff1a" +
    "\050\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\062" +
    "\uff1a\067\uff1a\070\uff1a\074\uff1a\101\uff1a\104\uff1a\001\002" +
    "\000\006\026\265\063\266\001\002\000\036\004\131\005" +
    "\134\006\140\007\137\010\133\011\141\013\132\043\143" +
    "\057\136\072\135\101\142\105\270\106\271\107\267\001" +
    "\002\000\076\003\uff0b\004\uff0b\005\uff0b\006\uff0b\007\uff0b" +
    "\010\uff0b\011\uff0b\013\uff0b\027\uff0b\030\uff0b\032\uff0b\033" +
    "\uff0b\034\uff0b\035\uff0b\036\uff0b\043\uff0b\050\uff0b\051\uff0b" +
    "\052\uff0b\053\uff0b\054\uff0b\055\uff0b\057\uff0b\062\uff0b\067" +
    "\uff0b\070\uff0b\072\uff0b\074\uff0b\101\uff0b\104\uff0b\001\002" +
    "\000\004\057\302\001\002\000\004\057\277\001\002\000" +
    "\004\057\274\001\002\000\042\012\154\013\147\014\162" +
    "\015\157\016\156\017\151\020\152\021\160\022\161\023" +
    "\163\024\164\025\153\040\165\041\146\042\150\063\273" +
    "\001\002\000\076\003\uff0a\004\uff0a\005\uff0a\006\uff0a\007" +
    "\uff0a\010\uff0a\011\uff0a\013\uff0a\027\uff0a\030\uff0a\032\uff0a" +
    "\033\uff0a\034\uff0a\035\uff0a\036\uff0a\043\uff0a\050\uff0a\051" +
    "\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\057\uff0a\062\uff0a" +
    "\067\uff0a\070\uff0a\072\uff0a\074\uff0a\101\uff0a\104\uff0a\001" +
    "\002\000\004\060\275\001\002\000\004\063\276\001\002" +
    "\000\076\003\uff09\004\uff09\005\uff09\006\uff09\007\uff09\010" +
    "\uff09\011\uff09\013\uff09\027\uff09\030\uff09\032\uff09\033\uff09" +
    "\034\uff09\035\uff09\036\uff09\043\uff09\050\uff09\051\uff09\052" +
    "\uff09\053\uff09\054\uff09\055\uff09\057\uff09\062\uff09\067\uff09" +
    "\070\uff09\072\uff09\074\uff09\101\uff09\104\uff09\001\002\000" +
    "\004\060\300\001\002\000\004\063\301\001\002\000\076" +
    "\003\uff08\004\uff08\005\uff08\006\uff08\007\uff08\010\uff08\011" +
    "\uff08\013\uff08\027\uff08\030\uff08\032\uff08\033\uff08\034\uff08" +
    "\035\uff08\036\uff08\043\uff08\050\uff08\051\uff08\052\uff08\053" +
    "\uff08\054\uff08\055\uff08\057\uff08\062\uff08\067\uff08\070\uff08" +
    "\072\uff08\074\uff08\101\uff08\104\uff08\001\002\000\004\060" +
    "\303\001\002\000\004\063\304\001\002\000\076\003\uff07" +
    "\004\uff07\005\uff07\006\uff07\007\uff07\010\uff07\011\uff07\013" +
    "\uff07\027\uff07\030\uff07\032\uff07\033\uff07\034\uff07\035\uff07" +
    "\036\uff07\043\uff07\050\uff07\051\uff07\052\uff07\053\uff07\054" +
    "\uff07\055\uff07\057\uff07\062\uff07\067\uff07\070\uff07\072\uff07" +
    "\074\uff07\101\uff07\104\uff07\001\002\000\042\012\154\013" +
    "\147\014\162\015\157\016\156\017\151\020\152\021\160" +
    "\022\161\023\163\024\164\025\153\040\165\041\146\042" +
    "\150\061\306\001\002\000\010\037\uff16\062\uff16\113\uff16" +
    "\001\002\000\010\037\310\062\311\113\313\001\002\000" +
    "\004\064\321\001\002\000\054\003\uff18\011\uff18\027\uff18" +
    "\030\uff18\032\uff18\033\uff18\034\uff18\035\uff18\036\uff18\050" +
    "\uff18\051\uff18\052\uff18\053\uff18\054\uff18\055\uff18\062\uff18" +
    "\067\uff18\070\uff18\074\uff18\101\uff18\104\uff18\001\002\000" +
    "\010\037\uff17\062\uff17\113\uff17\001\002\000\030\004\131" +
    "\005\134\006\140\007\137\010\133\011\141\013\132\043" +
    "\143\057\136\072\135\101\142\001\002\000\042\012\154" +
    "\013\147\014\162\015\157\016\156\017\151\020\152\021" +
    "\160\022\161\023\163\024\164\025\153\040\165\041\146" +
    "\042\150\064\315\001\002\000\052\003\uff80\011\uff80\027" +
    "\uff80\030\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80" +
    "\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\067" +
    "\uff80\070\uff80\074\uff80\101\uff80\104\uff80\001\002\000\052" +
    "\003\103\011\101\027\123\030\076\032\074\033\317\034" +
    "\107\035\114\036\071\050\122\051\027\052\040\053\034" +
    "\054\047\055\037\067\121\070\064\074\102\101\100\104" +
    "\073\001\002\000\004\063\320\001\002\000\010\037\uff15" +
    "\062\uff15\113\uff15\001\002\000\052\003\uff80\011\uff80\027" +
    "\uff80\030\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80" +
    "\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\067" +
    "\uff80\070\uff80\074\uff80\101\uff80\104\uff80\001\002\000\052" +
    "\003\103\011\101\027\123\030\076\032\074\033\323\034" +
    "\107\035\114\036\071\050\122\051\027\052\040\053\034" +
    "\054\047\055\037\067\121\070\064\074\102\101\100\104" +
    "\073\001\002\000\004\063\324\001\002\000\010\037\uff14" +
    "\062\uff14\113\uff14\001\002\000\004\064\326\001\002\000" +
    "\016\011\056\051\027\052\040\053\034\054\047\055\037" +
    "\001\002\000\004\065\330\001\002\000\004\066\331\001" +
    "\002\000\006\026\332\065\333\001\002\000\004\065\354" +
    "\001\002\000\004\066\334\001\002\000\004\026\335\001" +
    "\002\000\004\065\336\001\002\000\004\065\340\001\002" +
    "\000\006\066\346\071\347\001\002\000\030\004\131\005" +
    "\134\006\140\007\137\010\133\011\141\013\132\043\143" +
    "\057\136\072\135\101\142\001\002\000\006\066\343\071" +
    "\344\001\002\000\044\012\154\013\147\014\162\015\157" +
    "\016\156\017\151\020\152\021\160\022\161\023\163\024" +
    "\164\025\153\040\165\041\146\042\150\066\ufefe\071\ufefe" +
    "\001\002\000\006\066\uff00\071\uff00\001\002\000\030\004" +
    "\131\005\134\006\140\007\137\010\133\011\141\013\132" +
    "\043\143\057\136\072\135\101\142\001\002\000\044\012" +
    "\154\013\147\014\162\015\157\016\156\017\151\020\152" +
    "\021\160\022\161\023\163\024\164\025\153\040\165\041" +
    "\146\042\150\066\ufefd\071\ufefd\001\002\000\004\063\353" +
    "\001\002\000\004\065\350\001\002\000\030\004\131\005" +
    "\134\006\140\007\137\010\133\011\141\013\132\043\143" +
    "\057\136\072\135\101\142\001\002\000\006\066\352\071" +
    "\344\001\002\000\006\066\ufeff\071\ufeff\001\002\000\054" +
    "\003\uff01\011\uff01\027\uff01\030\uff01\032\uff01\033\uff01\034" +
    "\uff01\035\uff01\036\uff01\050\uff01\051\uff01\052\uff01\053\uff01" +
    "\054\uff01\055\uff01\062\uff01\067\uff01\070\uff01\074\uff01\101" +
    "\uff01\104\uff01\001\002\000\030\004\131\005\134\006\140" +
    "\007\137\010\133\011\141\013\132\043\143\057\136\072" +
    "\135\101\142\001\002\000\006\066\356\071\344\001\002" +
    "\000\004\063\357\001\002\000\054\003\uff02\011\uff02\027" +
    "\uff02\030\uff02\032\uff02\033\uff02\034\uff02\035\uff02\036\uff02" +
    "\050\uff02\051\uff02\052\uff02\053\uff02\054\uff02\055\uff02\062" +
    "\uff02\067\uff02\070\uff02\074\uff02\101\uff02\104\uff02\001\002" +
    "\000\054\003\uff61\011\uff61\027\uff61\030\uff61\032\uff61\033" +
    "\uff61\034\uff61\035\uff61\036\uff61\050\uff61\051\uff61\052\uff61" +
    "\053\uff61\054\uff61\055\uff61\062\uff61\067\uff61\070\uff61\074" +
    "\uff61\101\uff61\104\uff61\001\002\000\054\003\ufee4\011\ufee4" +
    "\027\ufee4\030\ufee4\032\ufee4\033\ufee4\034\ufee4\035\ufee4\036" +
    "\ufee4\050\ufee4\051\ufee4\052\ufee4\053\ufee4\054\ufee4\055\ufee4" +
    "\062\ufee4\067\ufee4\070\ufee4\074\ufee4\101\ufee4\104\ufee4\001" +
    "\002\000\042\012\154\013\147\014\162\015\157\016\156" +
    "\017\151\020\152\021\160\022\161\023\163\024\164\025" +
    "\153\040\165\041\146\042\150\063\363\001\002\000\054" +
    "\003\ufee3\011\ufee3\027\ufee3\030\ufee3\032\ufee3\033\ufee3\034" +
    "\ufee3\035\ufee3\036\ufee3\050\ufee3\051\ufee3\052\ufee3\053\ufee3" +
    "\054\ufee3\055\ufee3\062\ufee3\067\ufee3\070\ufee3\074\ufee3\101" +
    "\ufee3\104\ufee3\001\002\000\036\004\131\005\134\006\140" +
    "\007\137\010\133\011\141\013\132\043\143\057\136\072" +
    "\135\101\142\105\u0127\106\u0128\107\u0126\001\002\000\032" +
    "\004\131\005\134\006\140\007\137\010\133\011\141\013" +
    "\132\043\143\057\136\060\uff35\072\135\101\142\001\002" +
    "\000\004\063\u011e\001\002\000\004\063\u011d\001\002\000" +
    "\030\004\131\005\134\006\140\007\137\010\133\011\141" +
    "\013\132\043\143\057\136\072\135\101\142\001\002\000" +
    "\004\011\372\001\002\000\010\026\ufefa\057\u0100\073\u0101" +
    "\001\002\000\054\003\uff2d\011\uff2d\027\uff2d\030\uff2d\032" +
    "\uff2d\033\uff2d\034\uff2d\035\uff2d\036\uff2d\050\uff2d\051\uff2d" +
    "\052\uff2d\053\uff2d\054\uff2d\055\uff2d\062\uff2d\067\uff2d\070" +
    "\uff2d\074\uff2d\101\uff2d\104\uff2d\001\002\000\004\026\375" +
    "\001\002\000\030\004\131\005\134\006\140\007\137\010" +
    "\133\011\141\013\132\043\143\057\136\072\135\101\142" +
    "\001\002\000\042\012\154\013\147\014\162\015\157\016" +
    "\156\017\151\020\152\021\160\022\161\023\163\024\164" +
    "\025\153\040\165\041\146\042\150\063\377\001\002\000" +
    "\076\003\ufef7\004\ufef7\005\ufef7\006\ufef7\007\ufef7\010\ufef7" +
    "\011\ufef7\013\ufef7\027\ufef7\030\ufef7\032\ufef7\033\ufef7\034" +
    "\ufef7\035\ufef7\036\ufef7\043\ufef7\050\ufef7\051\ufef7\052\ufef7" +
    "\053\ufef7\054\ufef7\055\ufef7\057\ufef7\062\ufef7\067\ufef7\070" +
    "\ufef7\072\ufef7\074\ufef7\101\ufef7\104\ufef7\001\002\000\032" +
    "\004\131\005\134\006\140\007\137\010\133\011\141\013" +
    "\132\043\143\057\136\060\uff35\072\135\101\142\001\002" +
    "\000\004\011\u0102\001\002\000\010\026\ufefa\057\u0105\073" +
    "\u0106\001\002\000\054\003\uff29\011\uff29\027\uff29\030\uff29" +
    "\032\uff29\033\uff29\034\uff29\035\uff29\036\uff29\050\uff29\051" +
    "\uff29\052\uff29\053\uff29\054\uff29\055\uff29\062\uff29\067\uff29" +
    "\070\uff29\074\uff29\101\uff29\104\uff29\001\002\000\004\026" +
    "\ufefb\001\002\000\032\004\131\005\134\006\140\007\137" +
    "\010\133\011\141\013\132\043\143\057\136\060\uff35\072" +
    "\135\101\142\001\002\000\004\011\372\001\002\000\004" +
    "\060\u0108\001\002\000\006\063\u0109\073\u010a\001\002\000" +
    "\054\003\uff2b\011\uff2b\027\uff2b\030\uff2b\032\uff2b\033\uff2b" +
    "\034\uff2b\035\uff2b\036\uff2b\050\uff2b\051\uff2b\052\uff2b\053" +
    "\uff2b\054\uff2b\055\uff2b\062\uff2b\067\uff2b\070\uff2b\074\uff2b" +
    "\101\uff2b\104\uff2b\001\002\000\004\011\372\001\002\000" +
    "\054\003\uff2c\011\uff2c\027\uff2c\030\uff2c\032\uff2c\033\uff2c" +
    "\034\uff2c\035\uff2c\036\uff2c\050\uff2c\051\uff2c\052\uff2c\053" +
    "\uff2c\054\uff2c\055\uff2c\062\uff2c\067\uff2c\070\uff2c\074\uff2c" +
    "\101\uff2c\104\uff2c\001\002\000\004\026\ufefc\001\002\000" +
    "\004\060\u010e\001\002\000\006\063\u010f\073\u0110\001\002" +
    "\000\054\003\uff28\011\uff28\027\uff28\030\uff28\032\uff28\033" +
    "\uff28\034\uff28\035\uff28\036\uff28\050\uff28\051\uff28\052\uff28" +
    "\053\uff28\054\uff28\055\uff28\062\uff28\067\uff28\070\uff28\074" +
    "\uff28\101\uff28\104\uff28\001\002\000\004\011\u0102\001\002" +
    "\000\054\003\uff2a\011\uff2a\027\uff2a\030\uff2a\032\uff2a\033" +
    "\uff2a\034\uff2a\035\uff2a\036\uff2a\050\uff2a\051\uff2a\052\uff2a" +
    "\053\uff2a\054\uff2a\055\uff2a\062\uff2a\067\uff2a\070\uff2a\074" +
    "\uff2a\101\uff2a\104\uff2a\001\002\000\042\012\154\013\147" +
    "\014\162\015\157\016\156\017\151\020\152\021\160\022" +
    "\161\023\163\024\164\025\153\040\165\041\146\042\150" +
    "\066\u0113\001\002\000\006\026\u0114\065\u0115\001\002\000" +
    "\030\004\131\005\134\006\140\007\137\010\133\011\141" +
    "\013\132\043\143\057\136\072\135\101\142\001\002\000" +
    "\030\004\131\005\134\006\140\007\137\010\133\011\141" +
    "\013\132\043\143\057\136\072\135\101\142\001\002\000" +
    "\042\012\154\013\147\014\162\015\157\016\156\017\151" +
    "\020\152\021\160\022\161\023\163\024\164\025\153\040" +
    "\165\041\146\042\150\066\u0117\001\002\000\004\026\u0118" +
    "\001\002\000\030\004\131\005\134\006\140\007\137\010" +
    "\133\011\141\013\132\043\143\057\136\072\135\101\142" +
    "\001\002\000\042\012\154\013\147\014\162\015\157\016" +
    "\156\017\151\020\152\021\160\022\161\023\163\024\164" +
    "\025\153\040\165\041\146\042\150\063\u011a\001\002\000" +
    "\076\003\ufef4\004\ufef4\005\ufef4\006\ufef4\007\ufef4\010\ufef4" +
    "\011\ufef4\013\ufef4\027\ufef4\030\ufef4\032\ufef4\033\ufef4\034" +
    "\ufef4\035\ufef4\036\ufef4\043\ufef4\050\ufef4\051\ufef4\052\ufef4" +
    "\053\ufef4\054\ufef4\055\ufef4\057\ufef4\062\ufef4\067\ufef4\070" +
    "\ufef4\072\ufef4\074\ufef4\101\ufef4\104\ufef4\001\002\000\042" +
    "\012\154\013\147\014\162\015\157\016\156\017\151\020" +
    "\152\021\160\022\161\023\163\024\164\025\153\040\165" +
    "\041\146\042\150\063\u011c\001\002\000\076\003\ufef5\004" +
    "\ufef5\005\ufef5\006\ufef5\007\ufef5\010\ufef5\011\ufef5\013\ufef5" +
    "\027\ufef5\030\ufef5\032\ufef5\033\ufef5\034\ufef5\035\ufef5\036" +
    "\ufef5\043\ufef5\050\ufef5\051\ufef5\052\ufef5\053\ufef5\054\ufef5" +
    "\055\ufef5\057\ufef5\062\ufef5\067\ufef5\070\ufef5\072\ufef5\074" +
    "\ufef5\101\ufef5\104\ufef5\001\002\000\054\003\ufef0\011\ufef0" +
    "\027\ufef0\030\ufef0\032\ufef0\033\ufef0\034\ufef0\035\ufef0\036" +
    "\ufef0\050\ufef0\051\ufef0\052\ufef0\053\ufef0\054\ufef0\055\ufef0" +
    "\062\ufef0\067\ufef0\070\ufef0\074\ufef0\101\ufef0\104\ufef0\001" +
    "\002\000\054\003\ufeef\011\ufeef\027\ufeef\030\ufeef\032\ufeef" +
    "\033\ufeef\034\ufeef\035\ufeef\036\ufeef\050\ufeef\051\ufeef\052" +
    "\ufeef\053\ufeef\054\ufeef\055\ufeef\062\ufeef\067\ufeef\070\ufeef" +
    "\074\ufeef\101\ufeef\104\ufeef\001\002\000\004\060\u0120\001" +
    "\002\000\006\063\u0109\073\u0121\001\002\000\004\011\372" +
    "\001\002\000\004\026\u0123\001\002\000\030\004\131\005" +
    "\134\006\140\007\137\010\133\011\141\013\132\043\143" +
    "\057\136\072\135\101\142\001\002\000\042\012\154\013" +
    "\147\014\162\015\157\016\156\017\151\020\152\021\160" +
    "\022\161\023\163\024\164\025\153\040\165\041\146\042" +
    "\150\063\u0125\001\002\000\076\003\ufef6\004\ufef6\005\ufef6" +
    "\006\ufef6\007\ufef6\010\ufef6\011\ufef6\013\ufef6\027\ufef6\030" +
    "\ufef6\032\ufef6\033\ufef6\034\ufef6\035\ufef6\036\ufef6\043\ufef6" +
    "\050\ufef6\051\ufef6\052\ufef6\053\ufef6\054\ufef6\055\ufef6\057" +
    "\ufef6\062\ufef6\067\ufef6\070\ufef6\072\ufef6\074\ufef6\101\ufef6" +
    "\104\ufef6\001\002\000\004\057\u0131\001\002\000\004\057" +
    "\u012e\001\002\000\004\057\u012b\001\002\000\042\012\154" +
    "\013\147\014\162\015\157\016\156\017\151\020\152\021" +
    "\160\022\161\023\163\024\164\025\153\040\165\041\146" +
    "\042\150\063\u012a\001\002\000\076\003\ufef8\004\ufef8\005" +
    "\ufef8\006\ufef8\007\ufef8\010\ufef8\011\ufef8\013\ufef8\027\ufef8" +
    "\030\ufef8\032\ufef8\033\ufef8\034\ufef8\035\ufef8\036\ufef8\043" +
    "\ufef8\050\ufef8\051\ufef8\052\ufef8\053\ufef8\054\ufef8\055\ufef8" +
    "\057\ufef8\062\ufef8\067\ufef8\070\ufef8\072\ufef8\074\ufef8\101" +
    "\ufef8\104\ufef8\001\002\000\004\060\u012c\001\002\000\004" +
    "\063\u012d\001\002\000\076\003\ufef3\004\ufef3\005\ufef3\006" +
    "\ufef3\007\ufef3\010\ufef3\011\ufef3\013\ufef3\027\ufef3\030\ufef3" +
    "\032\ufef3\033\ufef3\034\ufef3\035\ufef3\036\ufef3\043\ufef3\050" +
    "\ufef3\051\ufef3\052\ufef3\053\ufef3\054\ufef3\055\ufef3\057\ufef3" +
    "\062\ufef3\067\ufef3\070\ufef3\072\ufef3\074\ufef3\101\ufef3\104" +
    "\ufef3\001\002\000\004\060\u012f\001\002\000\004\063\u0130" +
    "\001\002\000\076\003\ufef2\004\ufef2\005\ufef2\006\ufef2\007" +
    "\ufef2\010\ufef2\011\ufef2\013\ufef2\027\ufef2\030\ufef2\032\ufef2" +
    "\033\ufef2\034\ufef2\035\ufef2\036\ufef2\043\ufef2\050\ufef2\051" +
    "\ufef2\052\ufef2\053\ufef2\054\ufef2\055\ufef2\057\ufef2\062\ufef2" +
    "\067\ufef2\070\ufef2\072\ufef2\074\ufef2\101\ufef2\104\ufef2\001" +
    "\002\000\004\060\u0132\001\002\000\004\063\u0133\001\002" +
    "\000\076\003\ufef1\004\ufef1\005\ufef1\006\ufef1\007\ufef1\010" +
    "\ufef1\011\ufef1\013\ufef1\027\ufef1\030\ufef1\032\ufef1\033\ufef1" +
    "\034\ufef1\035\ufef1\036\ufef1\043\ufef1\050\ufef1\051\ufef1\052" +
    "\ufef1\053\ufef1\054\ufef1\055\ufef1\057\ufef1\062\ufef1\067\ufef1" +
    "\070\ufef1\072\ufef1\074\ufef1\101\ufef1\104\ufef1\001\002\000" +
    "\004\011\u0135\001\002\000\004\026\u0136\001\002\000\030" +
    "\004\131\005\134\006\140\007\137\010\133\011\141\013" +
    "\132\043\143\057\136\072\135\101\142\001\002\000\042" +
    "\012\154\013\147\014\162\015\157\016\156\017\151\020" +
    "\152\021\160\022\161\023\163\024\164\025\153\040\165" +
    "\041\146\042\150\063\u0138\001\002\000\076\003\ufef9\004" +
    "\ufef9\005\ufef9\006\ufef9\007\ufef9\010\ufef9\011\ufef9\013\ufef9" +
    "\027\ufef9\030\ufef9\032\ufef9\033\ufef9\034\ufef9\035\ufef9\036" +
    "\ufef9\043\ufef9\050\ufef9\051\ufef9\052\ufef9\053\ufef9\054\ufef9" +
    "\055\ufef9\057\ufef9\062\ufef9\067\ufef9\070\ufef9\072\ufef9\074" +
    "\ufef9\101\ufef9\104\ufef9\001\002\000\030\004\131\005\134" +
    "\006\140\007\137\010\133\011\141\013\132\043\143\057" +
    "\136\072\135\101\142\001\002\000\042\012\154\013\147" +
    "\014\162\015\157\016\156\017\151\020\152\021\160\022" +
    "\161\023\163\024\164\025\153\040\165\041\146\042\150" +
    "\060\u013b\001\002\000\004\061\u013c\001\002\000\054\003" +
    "\uff22\011\uff22\027\uff22\030\uff22\032\uff22\033\uff22\034\uff22" +
    "\035\uff22\036\uff22\050\uff22\051\uff22\052\uff22\053\uff22\054" +
    "\uff22\055\uff22\062\uff22\067\uff22\070\uff22\074\uff22\101\uff22" +
    "\104\uff22\001\002\000\054\003\103\011\101\027\123\030" +
    "\076\032\074\033\u0142\034\107\035\114\036\071\050\122" +
    "\051\027\052\040\053\034\054\047\055\037\062\u013e\067" +
    "\121\070\064\074\102\101\100\104\073\001\002\000\056" +
    "\003\uff0f\011\uff0f\027\uff0f\030\uff0f\031\u0145\032\uff0f\033" +
    "\uff0f\034\uff0f\035\uff0f\036\uff0f\050\uff0f\051\uff0f\052\uff0f" +
    "\053\uff0f\054\uff0f\055\uff0f\062\uff0f\067\uff0f\070\uff0f\074" +
    "\uff0f\101\uff0f\104\uff0f\001\002\000\054\003\uff25\011\uff25" +
    "\027\uff25\030\uff25\032\uff25\033\uff25\034\uff25\035\uff25\036" +
    "\uff25\050\uff25\051\uff25\052\uff25\053\uff25\054\uff25\055\uff25" +
    "\062\uff25\067\uff25\070\uff25\074\uff25\101\uff25\104\uff25\001" +
    "\002\000\054\003\uff24\011\uff24\027\uff24\030\uff24\032\uff24" +
    "\033\uff24\034\uff24\035\uff24\036\uff24\050\uff24\051\uff24\052" +
    "\uff24\053\uff24\054\uff24\055\uff24\062\uff24\067\uff24\070\uff24" +
    "\074\uff24\101\uff24\104\uff24\001\002\000\054\003\uff23\011" +
    "\uff23\027\uff23\030\uff23\032\uff23\033\uff23\034\uff23\035\uff23" +
    "\036\uff23\050\uff23\051\uff23\052\uff23\053\uff23\054\uff23\055" +
    "\uff23\062\uff23\067\uff23\070\uff23\074\uff23\101\uff23\104\uff23" +
    "\001\002\000\004\063\u0143\001\002\000\054\003\ufee6\011" +
    "\ufee6\027\ufee6\030\ufee6\032\ufee6\033\ufee6\034\ufee6\035\ufee6" +
    "\036\ufee6\050\ufee6\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055" +
    "\ufee6\062\ufee6\067\ufee6\070\ufee6\074\ufee6\101\ufee6\104\ufee6" +
    "\001\002\000\054\003\uff0e\011\uff0e\027\uff0e\030\uff0e\032" +
    "\uff0e\033\uff0e\034\uff0e\035\uff0e\036\uff0e\050\uff0e\051\uff0e" +
    "\052\uff0e\053\uff0e\054\uff0e\055\uff0e\062\uff0e\067\uff0e\070" +
    "\uff0e\074\uff0e\101\uff0e\104\uff0e\001\002\000\006\030\076" +
    "\061\u0146\001\002\000\052\003\uff80\011\uff80\027\uff80\030" +
    "\uff80\032\uff80\034\uff80\035\uff80\036\uff80\050\uff80\051\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\062\uff80\067\uff80\070" +
    "\uff80\074\uff80\101\uff80\104\uff80\001\002\000\054\003\uff21" +
    "\011\uff21\027\uff21\030\uff21\032\uff21\033\uff21\034\uff21\035" +
    "\uff21\036\uff21\050\uff21\051\uff21\052\uff21\053\uff21\054\uff21" +
    "\055\uff21\062\uff21\067\uff21\070\uff21\074\uff21\101\uff21\104" +
    "\uff21\001\002\000\052\003\103\011\101\027\123\030\076" +
    "\032\074\034\107\035\114\036\071\050\122\051\027\052" +
    "\040\053\034\054\047\055\037\062\uff11\067\121\070\064" +
    "\074\102\101\100\104\073\001\002\000\004\062\u014a\001" +
    "\002\000\054\003\uff10\011\uff10\027\uff10\030\uff10\032\uff10" +
    "\033\uff10\034\uff10\035\uff10\036\uff10\050\uff10\051\uff10\052" +
    "\uff10\053\uff10\054\uff10\055\uff10\062\uff10\067\uff10\070\uff10" +
    "\074\uff10\101\uff10\104\uff10\001\002\000\020\011\u014f\051" +
    "\027\052\040\053\034\054\047\055\037\101\100\001\002" +
    "\000\030\004\uff12\005\uff12\006\uff12\007\uff12\010\uff12\011" +
    "\uff12\013\uff12\043\uff12\057\uff12\072\uff12\101\uff12\001\002" +
    "\000\030\004\131\005\134\006\140\007\137\010\133\011" +
    "\141\013\132\043\143\057\136\072\135\101\142\001\002" +
    "\000\030\004\uff13\005\uff13\006\uff13\007\uff13\010\uff13\011" +
    "\uff13\013\uff13\043\uff13\057\uff13\072\uff13\101\uff13\001\002" +
    "\000\014\011\ufee7\026\364\057\u0150\065\370\073\u0151\001" +
    "\002\000\032\004\131\005\134\006\140\007\137\010\133" +
    "\011\141\013\132\043\143\057\136\060\uff35\072\135\101" +
    "\142\001\002\000\004\011\u0152\001\002\000\010\026\ufefa" +
    "\057\u0153\073\u0154\001\002\000\032\004\131\005\134\006" +
    "\140\007\137\010\133\011\141\013\132\043\143\057\136" +
    "\060\uff35\072\135\101\142\001\002\000\004\011\u0152\001" +
    "\002\000\004\060\u0156\001\002\000\004\073\u0157\001\002" +
    "\000\004\011\u0152\001\002\000\004\060\u0159\001\002\000" +
    "\004\073\u015a\001\002\000\004\011\u0152\001\002\000\042" +
    "\012\154\013\147\014\162\015\157\016\156\017\151\020" +
    "\152\021\160\022\161\023\163\024\164\025\153\040\165" +
    "\041\146\042\150\063\u015c\001\002\000\004\011\u015d\001" +
    "\002\000\010\026\u0163\046\u0165\047\u0164\001\002\000\004" +
    "\060\u015f\001\002\000\004\061\u0160\001\002\000\052\003" +
    "\uff80\011\uff80\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80" +
    "\036\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055" +
    "\uff80\062\uff80\067\uff80\070\uff80\074\uff80\101\uff80\104\uff80" +
    "\001\002\000\052\003\103\011\101\027\123\030\076\032" +
    "\074\034\107\035\114\036\071\050\122\051\027\052\040" +
    "\053\034\054\047\055\037\062\u0162\067\121\070\064\074" +
    "\102\101\100\104\073\001\002\000\054\003\uff1e\011\uff1e" +
    "\027\uff1e\030\uff1e\032\uff1e\033\uff1e\034\uff1e\035\uff1e\036" +
    "\uff1e\050\uff1e\051\uff1e\052\uff1e\053\uff1e\054\uff1e\055\uff1e" +
    "\062\uff1e\067\uff1e\070\uff1e\074\uff1e\101\uff1e\104\uff1e\001" +
    "\002\000\030\004\131\005\134\006\140\007\137\010\133" +
    "\011\141\013\132\043\143\057\136\072\135\101\142\001" +
    "\002\000\004\060\uff1c\001\002\000\004\060\uff1d\001\002" +
    "\000\042\012\154\013\147\014\162\015\157\016\156\017" +
    "\151\020\152\021\160\022\161\023\163\024\164\025\153" +
    "\040\165\041\146\042\150\060\uff1b\001\002\000\032\004" +
    "\131\005\134\006\140\007\137\010\133\011\141\013\132" +
    "\043\143\057\136\060\uff35\072\135\101\142\001\002\000" +
    "\004\060\u0169\001\002\000\004\063\u016a\001\002\000\054" +
    "\003\uff0c\011\uff0c\027\uff0c\030\uff0c\032\uff0c\033\uff0c\034" +
    "\uff0c\035\uff0c\036\uff0c\050\uff0c\051\uff0c\052\uff0c\053\uff0c" +
    "\054\uff0c\055\uff0c\062\uff0c\067\uff0c\070\uff0c\074\uff0c\101" +
    "\uff0c\104\uff0c\001\002\000\054\003\ufee5\011\ufee5\027\ufee5" +
    "\030\ufee5\032\ufee5\033\ufee5\034\ufee5\035\ufee5\036\ufee5\050" +
    "\ufee5\051\ufee5\052\ufee5\053\ufee5\054\ufee5\055\ufee5\062\ufee5" +
    "\067\ufee5\070\ufee5\074\ufee5\101\ufee5\104\ufee5\001\002\000" +
    "\016\011\056\051\027\052\040\053\034\054\047\055\037" +
    "\001\002\000\004\061\u016e\001\002\000\052\003\uff80\011" +
    "\uff80\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80\036\uff80" +
    "\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\062" +
    "\uff80\067\uff80\070\uff80\074\uff80\101\uff80\104\uff80\001\002" +
    "\000\052\003\103\011\101\027\123\030\076\032\074\034" +
    "\107\035\114\036\071\050\122\051\027\052\040\053\034" +
    "\054\047\055\037\062\u0170\067\121\070\064\074\102\101" +
    "\100\104\073\001\002\000\030\011\uff3b\051\uff3b\052\uff3b" +
    "\053\uff3b\054\uff3b\055\uff3b\056\uff3b\062\uff3b\075\uff3b\076" +
    "\uff3b\077\uff3b\001\002\000\004\011\u0172\001\002\000\006" +
    "\060\uff38\071\uff38\001\002\000\042\012\154\013\147\014" +
    "\162\015\157\016\156\017\151\020\152\021\160\022\161" +
    "\023\163\024\164\025\153\040\165\041\146\042\150\063" +
    "\u0174\001\002\000\030\011\uff03\051\uff03\052\uff03\053\uff03" +
    "\054\uff03\055\uff03\056\uff03\062\uff03\075\uff03\076\uff03\077" +
    "\uff03\001\002\000\006\011\ufee7\057\u0192\001\002\000\004" +
    "\011\u0183\001\002\000\004\011\u0178\001\002\000\004\057" +
    "\u0179\001\002\000\020\011\056\051\027\052\040\053\034" +
    "\054\047\055\037\060\u017b\001\002\000\006\060\u017f\071" +
    "\u016c\001\002\000\004\061\u017c\001\002\000\052\003\uff80" +
    "\011\uff80\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80\036" +
    "\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80" +
    "\062\uff80\067\uff80\070\uff80\074\uff80\101\uff80\104\uff80\001" +
    "\002\000\052\003\103\011\101\027\123\030\076\032\074" +
    "\034\107\035\114\036\071\050\122\051\027\052\040\053" +
    "\034\054\047\055\037\062\u017e\067\121\070\064\074\102" +
    "\101\100\104\073\001\002\000\030\011\uff40\051\uff40\052" +
    "\uff40\053\uff40\054\uff40\055\uff40\056\uff40\062\uff40\075\uff40" +
    "\076\uff40\077\uff40\001\002\000\004\061\u0180\001\002\000" +
    "\052\003\uff80\011\uff80\027\uff80\030\uff80\032\uff80\034\uff80" +
    "\035\uff80\036\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054" +
    "\uff80\055\uff80\062\uff80\067\uff80\070\uff80\074\uff80\101\uff80" +
    "\104\uff80\001\002\000\052\003\103\011\101\027\123\030" +
    "\076\032\074\034\107\035\114\036\071\050\122\051\027" +
    "\052\040\053\034\054\047\055\037\062\u0182\067\121\070" +
    "\064\074\102\101\100\104\073\001\002\000\030\011\uff41" +
    "\051\uff41\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41\062" +
    "\uff41\075\uff41\076\uff41\077\uff41\001\002\000\010\026\u0184" +
    "\057\u0185\063\u0186\001\002\000\030\004\131\005\134\006" +
    "\140\007\137\010\133\011\141\013\132\043\143\057\136" +
    "\072\135\101\142\001\002\000\020\011\056\051\027\052" +
    "\040\053\034\054\047\055\037\060\u0188\001\002\000\030" +
    "\011\uff06\051\uff06\052\uff06\053\uff06\054\uff06\055\uff06\056" +
    "\uff06\062\uff06\075\uff06\076\uff06\077\uff06\001\002\000\006" +
    "\060\u018c\071\u016c\001\002\000\004\061\u0189\001\002\000" +
    "\052\003\uff80\011\uff80\027\uff80\030\uff80\032\uff80\034\uff80" +
    "\035\uff80\036\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054" +
    "\uff80\055\uff80\062\uff80\067\uff80\070\uff80\074\uff80\101\uff80" +
    "\104\uff80\001\002\000\052\003\103\011\101\027\123\030" +
    "\076\032\074\034\107\035\114\036\071\050\122\051\027" +
    "\052\040\053\034\054\047\055\037\062\u018b\067\121\070" +
    "\064\074\102\101\100\104\073\001\002\000\030\011\uff3e" +
    "\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\062" +
    "\uff3e\075\uff3e\076\uff3e\077\uff3e\001\002\000\004\061\u018d" +
    "\001\002\000\052\003\uff80\011\uff80\027\uff80\030\uff80\032" +
    "\uff80\034\uff80\035\uff80\036\uff80\050\uff80\051\uff80\052\uff80" +
    "\053\uff80\054\uff80\055\uff80\062\uff80\067\uff80\070\uff80\074" +
    "\uff80\101\uff80\104\uff80\001\002\000\052\003\103\011\101" +
    "\027\123\030\076\032\074\034\107\035\114\036\071\050" +
    "\122\051\027\052\040\053\034\054\047\055\037\062\u018f" +
    "\067\121\070\064\074\102\101\100\104\073\001\002\000" +
    "\030\011\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f" +
    "\056\uff3f\062\uff3f\075\uff3f\076\uff3f\077\uff3f\001\002\000" +
    "\042\012\154\013\147\014\162\015\157\016\156\017\151" +
    "\020\152\021\160\022\161\023\163\024\164\025\153\040" +
    "\165\041\146\042\150\063\u0191\001\002\000\030\011\uff05" +
    "\051\uff05\052\uff05\053\uff05\054\uff05\055\uff05\056\uff05\062" +
    "\uff05\075\uff05\076\uff05\077\uff05\001\002\000\020\011\056" +
    "\051\027\052\040\053\034\054\047\055\037\060\u0194\001" +
    "\002\000\006\060\u0198\071\u016c\001\002\000\004\061\u0195" +
    "\001\002\000\052\003\uff80\011\uff80\027\uff80\030\uff80\032" +
    "\uff80\034\uff80\035\uff80\036\uff80\050\uff80\051\uff80\052\uff80" +
    "\053\uff80\054\uff80\055\uff80\062\uff80\067\uff80\070\uff80\074" +
    "\uff80\101\uff80\104\uff80\001\002\000\052\003\103\011\101" +
    "\027\123\030\076\032\074\034\107\035\114\036\071\050" +
    "\122\051\027\052\040\053\034\054\047\055\037\062\u0197" +
    "\067\121\070\064\074\102\101\100\104\073\001\002\000" +
    "\030\011\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c" +
    "\056\uff7c\062\uff7c\075\uff7c\076\uff7c\077\uff7c\001\002\000" +
    "\004\061\u0199\001\002\000\052\003\uff80\011\uff80\027\uff80" +
    "\030\uff80\032\uff80\034\uff80\035\uff80\036\uff80\050\uff80\051" +
    "\uff80\052\uff80\053\uff80\054\uff80\055\uff80\062\uff80\067\uff80" +
    "\070\uff80\074\uff80\101\uff80\104\uff80\001\002\000\052\003" +
    "\103\011\101\027\123\030\076\032\074\034\107\035\114" +
    "\036\071\050\122\051\027\052\040\053\034\054\047\055" +
    "\037\062\u019b\067\121\070\064\074\102\101\100\104\073" +
    "\001\002\000\030\011\uff7d\051\uff7d\052\uff7d\053\uff7d\054" +
    "\uff7d\055\uff7d\056\uff7d\062\uff7d\075\uff7d\076\uff7d\077\uff7d" +
    "\001\002\000\020\011\056\051\027\052\040\053\034\054" +
    "\047\055\037\060\u019e\001\002\000\006\060\u01a2\071\u016c" +
    "\001\002\000\004\061\u019f\001\002\000\052\003\uff80\011" +
    "\uff80\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80\036\uff80" +
    "\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\062" +
    "\uff80\067\uff80\070\uff80\074\uff80\101\uff80\104\uff80\001\002" +
    "\000\052\003\103\011\101\027\123\030\076\032\074\034" +
    "\107\035\114\036\071\050\122\051\027\052\040\053\034" +
    "\054\047\055\037\062\u01a1\067\121\070\064\074\102\101" +
    "\100\104\073\001\002\000\030\011\uff7e\051\uff7e\052\uff7e" +
    "\053\uff7e\054\uff7e\055\uff7e\056\uff7e\062\uff7e\075\uff7e\076" +
    "\uff7e\077\uff7e\001\002\000\004\061\u01a3\001\002\000\052" +
    "\003\uff80\011\uff80\027\uff80\030\uff80\032\uff80\034\uff80\035" +
    "\uff80\036\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80" +
    "\055\uff80\062\uff80\067\uff80\070\uff80\074\uff80\101\uff80\104" +
    "\uff80\001\002\000\052\003\103\011\101\027\123\030\076" +
    "\032\074\034\107\035\114\036\071\050\122\051\027\052" +
    "\040\053\034\054\047\055\037\062\u01a5\067\121\070\064" +
    "\074\102\101\100\104\073\001\002\000\030\011\uff7f\051" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\062\uff7f" +
    "\075\uff7f\076\uff7f\077\uff7f\001\002\000\004\057\u01a7\001" +
    "\002\000\020\011\056\051\027\052\040\053\034\054\047" +
    "\055\037\060\u01a9\001\002\000\006\060\u01ad\071\u016c\001" +
    "\002\000\004\061\u01aa\001\002\000\052\003\uff80\011\uff80" +
    "\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80\036\uff80\050" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\062\uff80" +
    "\067\uff80\070\uff80\074\uff80\101\uff80\104\uff80\001\002\000" +
    "\052\003\103\011\101\027\123\030\076\032\074\034\107" +
    "\035\114\036\071\050\122\051\027\052\040\053\034\054" +
    "\047\055\037\062\u01ac\067\121\070\064\074\102\101\100" +
    "\104\073\001\002\000\030\011\uff3c\051\uff3c\052\uff3c\053" +
    "\uff3c\054\uff3c\055\uff3c\056\uff3c\062\uff3c\075\uff3c\076\uff3c" +
    "\077\uff3c\001\002\000\004\061\u01ae\001\002\000\052\003" +
    "\uff80\011\uff80\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80" +
    "\036\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055" +
    "\uff80\062\uff80\067\uff80\070\uff80\074\uff80\101\uff80\104\uff80" +
    "\001\002\000\052\003\103\011\101\027\123\030\076\032" +
    "\074\034\107\035\114\036\071\050\122\051\027\052\040" +
    "\053\034\054\047\055\037\062\u01b0\067\121\070\064\074" +
    "\102\101\100\104\073\001\002\000\030\011\uff3d\051\uff3d" +
    "\052\uff3d\053\uff3d\054\uff3d\055\uff3d\056\uff3d\062\uff3d\075" +
    "\uff3d\076\uff3d\077\uff3d\001\002\000\030\002\uff76\051\uff76" +
    "\052\uff76\054\uff76\055\uff76\056\uff76\070\uff76\077\uff76\103" +
    "\uff76\112\uff76\121\uff76\001\002\000\030\011\uff71\051\uff71" +
    "\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\062\uff71\075" +
    "\uff71\076\uff71\077\uff71\001\002\000\030\011\041\051\027" +
    "\052\040\053\034\054\047\055\037\056\035\062\u01b4\075" +
    "\036\076\042\077\031\001\002\000\030\002\uff78\051\uff78" +
    "\052\uff78\054\uff78\055\uff78\056\uff78\070\uff78\077\uff78\103" +
    "\uff78\112\uff78\121\uff78\001\002\000\020\051\u01b8\052\u01bc" +
    "\054\u01c0\055\u01bb\056\u01ba\070\u01c1\112\u01b7\001\002\000" +
    "\020\051\uffeb\052\uffeb\054\uffeb\055\uffeb\056\uffeb\070\uffeb" +
    "\112\uffeb\001\002\000\004\073\u02cc\001\002\000\004\011" +
    "\uffe6\001\002\000\020\051\uffec\052\uffec\054\uffec\055\uffec" +
    "\056\uffec\070\uffec\112\uffec\001\002\000\004\102\u0211\001" +
    "\002\000\004\011\uffe3\001\002\000\004\011\uffe4\001\002" +
    "\000\004\011\u020c\001\002\000\020\051\uffed\052\uffed\054" +
    "\uffed\055\uffed\056\uffed\070\uffed\112\uffed\001\002\000\004" +
    "\002\ufffa\001\002\000\004\011\uffe5\001\002\000\012\051" +
    "\u01b8\052\u01bc\054\u01c0\055\u01bb\001\002\000\004\011\u01c3" +
    "\001\002\000\004\026\u01c4\001\002\000\030\004\u01c5\006" +
    "\u01cb\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9" +
    "\111\u01d1\112\u01c7\114\u01cc\001\002\000\050\012\uff89\013" +
    "\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89" +
    "\022\uff89\023\uff89\024\uff89\025\uff89\040\uff89\041\uff89\060" +
    "\uff89\063\uff89\064\uff89\066\uff89\071\uff89\001\002\000\030" +
    "\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043" +
    "\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001\002\000\004" +
    "\073\u0204\001\002\000\050\012\uff8a\013\uff8a\014\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\024\uff8a\025\uff8a\040\uff8a\041\uff8a\060\uff8a\063\uff8a\064" +
    "\uff8a\066\uff8a\071\uff8a\001\002\000\030\004\u01c5\006\u01cb" +
    "\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9\111" +
    "\u01d1\112\u01c7\114\u01cc\001\002\000\050\012\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\040\uff8c\041\uff8c\060\uff8c" +
    "\063\uff8c\064\uff8c\066\uff8c\071\uff8c\001\002\000\050\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\040\uff8b\041" +
    "\uff8b\060\uff8b\063\uff8b\064\uff8b\066\uff8b\071\uff8b\001\002" +
    "\000\004\057\u01ff\001\002\000\052\012\uff88\013\uff88\014" +
    "\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88" +
    "\023\uff88\024\uff88\025\uff88\040\uff88\041\uff88\060\uff88\063" +
    "\uff88\064\uff88\065\u01f9\066\uff88\071\uff88\001\002\000\050" +
    "\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\040\uff84" +
    "\041\uff84\060\uff84\063\uff84\064\uff84\066\uff84\071\uff84\001" +
    "\002\000\040\012\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de" +
    "\017\u01da\020\u01db\021\u01e0\022\u01e1\023\u01e3\024\u01e4\025" +
    "\u01dc\040\u01e5\041\u01d9\063\u01f8\001\002\000\030\004\u01c5" +
    "\006\u01cb\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057" +
    "\u01c9\111\u01d1\112\u01c7\114\u01cc\001\002\000\004\073\u01d2" +
    "\001\002\000\004\011\u01d3\001\002\000\004\057\u01d4\001" +
    "\002\000\032\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\060\uffa2\111\u01d1\112\u01c7\114" +
    "\u01cc\001\002\000\006\060\uffa3\071\u01f5\001\002\000\004" +
    "\060\u01f4\001\002\000\042\012\u01dd\013\u01d8\014\u01e2\015" +
    "\u01df\016\u01de\017\u01da\020\u01db\021\u01e0\022\u01e1\023\u01e3" +
    "\024\u01e4\025\u01dc\040\u01e5\041\u01d9\060\uffa4\071\uffa4\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd" +
    "\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\050\012\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de" +
    "\017\u01da\020\u01db\021\u01e0\022\u01e1\023\u01e3\024\u01e4\025" +
    "\u01dc\040\uff8e\041\u01d9\060\uff8e\063\uff8e\064\uff8e\066\uff8e" +
    "\071\uff8e\001\002\000\050\012\u01dd\013\u01d8\014\u01e2\015" +
    "\u01df\016\u01de\017\u01da\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\040\uff95\041\uff95\060\uff95\063\uff95\064" +
    "\uff95\066\uff95\071\uff95\001\002\000\050\012\u01dd\013\u01d8" +
    "\014\u01e2\015\u01df\016\u01de\017\u01da\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\040\uff92\041\uff92\060\uff92" +
    "\063\uff92\064\uff92\066\uff92\071\uff92\001\002\000\050\012" +
    "\uff98\013\uff98\014\uff98\015\uff98\016\u01de\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\040\uff98\041" +
    "\uff98\060\uff98\063\uff98\064\uff98\066\uff98\071\uff98\001\002" +
    "\000\050\012\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de\017" +
    "\u01da\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\040\uff90\041\uff90\060\uff90\063\uff90\064\uff90\066\uff90\071" +
    "\uff90\001\002\000\050\012\u01dd\013\u01d8\014\u01e2\015\u01df" +
    "\016\u01de\017\u01da\020\uff93\021\uff93\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\040\uff93\041\uff93\060\uff93\063\uff93\064\uff93" +
    "\066\uff93\071\uff93\001\002\000\050\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\016\u01de\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\040\uff99\041\uff99\060\uff99\063" +
    "\uff99\064\uff99\066\uff99\071\uff99\001\002\000\046\012\uff96" +
    "\013\uff96\014\uff96\015\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\040\uff96\041\uff96\060\uff96" +
    "\063\uff96\064\uff96\066\uff96\071\uff96\001\002\000\050\012" +
    "\uff9b\013\uff9b\014\u01e2\015\u01df\016\u01de\017\u01da\020\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\040\uff9b\041" +
    "\uff9b\060\uff9b\063\uff9b\064\uff9b\066\uff9b\071\uff9b\001\002" +
    "\000\050\012\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de\017" +
    "\u01da\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\040\uff94\041\uff94\060\uff94\063\uff94\064\uff94\066\uff94\071" +
    "\uff94\001\002\000\050\012\u01dd\013\u01d8\014\u01e2\015\u01df" +
    "\016\u01de\017\u01da\020\uff91\021\uff91\022\uff91\023\uff91\024" +
    "\uff91\025\uff91\040\uff91\041\uff91\060\uff91\063\uff91\064\uff91" +
    "\066\uff91\071\uff91\001\002\000\050\012\uff97\013\uff97\014" +
    "\uff97\015\uff97\016\u01de\017\uff97\020\uff97\021\uff97\022\uff97" +
    "\023\uff97\024\uff97\025\uff97\040\uff97\041\uff97\060\uff97\063" +
    "\uff97\064\uff97\066\uff97\071\uff97\001\002\000\050\012\u01dd" +
    "\013\u01d8\014\u01e2\015\u01df\016\u01de\017\u01da\020\u01db\021" +
    "\u01e0\022\u01e1\023\u01e3\024\u01e4\025\u01dc\040\uff8f\041\uff8f" +
    "\060\uff8f\063\uff8f\064\uff8f\066\uff8f\071\uff8f\001\002\000" +
    "\050\012\uff9a\013\uff9a\014\u01e2\015\u01df\016\u01de\017\u01da" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\040" +
    "\uff9a\041\uff9a\060\uff9a\063\uff9a\064\uff9a\066\uff9a\071\uff9a" +
    "\001\002\000\050\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\040\uff9f\041\uff9f\060\uff9f\063\uff9f\064\uff9f\066" +
    "\uff9f\071\uff9f\001\002\000\030\004\u01c5\006\u01cb\007\u01ca" +
    "\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112" +
    "\u01c7\114\u01cc\001\002\000\042\012\u01dd\013\u01d8\014\u01e2" +
    "\015\u01df\016\u01de\017\u01da\020\u01db\021\u01e0\022\u01e1\023" +
    "\u01e3\024\u01e4\025\u01dc\040\u01e5\041\u01d9\060\uffa5\071\uffa5" +
    "\001\002\000\050\012\u01dd\013\u01d8\014\u01e2\015\u01df\016" +
    "\u01de\017\u01da\020\u01db\021\u01e0\022\u01e1\023\u01e3\024\u01e4" +
    "\025\u01dc\040\uff9c\041\uff9c\060\uff9c\063\uff9c\064\uff9c\066" +
    "\uff9c\071\uff9c\001\002\000\020\051\ufff1\052\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\070\ufff1\112\ufff1\001\002\000\030\004" +
    "\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0" +
    "\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001\002\000\040\012" +
    "\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de\017\u01da\020\u01db" +
    "\021\u01e0\022\u01e1\023\u01e3\024\u01e4\025\u01dc\040\u01e5\041" +
    "\u01d9\066\u01fb\001\002\000\052\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023" +
    "\uff87\024\uff87\025\uff87\040\uff87\041\uff87\060\uff87\063\uff87" +
    "\064\uff87\065\u01fc\066\uff87\071\uff87\001\002\000\030\004" +
    "\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0" +
    "\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001\002\000\040\012" +
    "\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de\017\u01da\020\u01db" +
    "\021\u01e0\022\u01e1\023\u01e3\024\u01e4\025\u01dc\040\u01e5\041" +
    "\u01d9\066\u01fe\001\002\000\050\012\uff86\013\uff86\014\uff86" +
    "\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023" +
    "\uff86\024\uff86\025\uff86\040\uff86\041\uff86\060\uff86\063\uff86" +
    "\064\uff86\066\uff86\071\uff86\001\002\000\004\060\u0200\001" +
    "\002\000\004\063\u0201\001\002\000\050\012\uff85\013\uff85" +
    "\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022" +
    "\uff85\023\uff85\024\uff85\025\uff85\040\uff85\041\uff85\060\uff85" +
    "\063\uff85\064\uff85\066\uff85\071\uff85\001\002\000\040\012" +
    "\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de\017\u01da\020\u01db" +
    "\021\u01e0\022\u01e1\023\u01e3\024\u01e4\025\u01dc\040\u01e5\041" +
    "\u01d9\060\u0203\001\002\000\050\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\040\uff8d\041\uff8d\060\uff8d\063\uff8d" +
    "\064\uff8d\066\uff8d\071\uff8d\001\002\000\004\011\u0205\001" +
    "\002\000\004\073\u0206\001\002\000\004\011\u0207\001\002" +
    "\000\004\057\u0208\001\002\000\032\004\u01c5\006\u01cb\007" +
    "\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9\060\uffa2" +
    "\111\u01d1\112\u01c7\114\u01cc\001\002\000\004\060\u020a\001" +
    "\002\000\050\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\040\uff9e\041\uff9e\060\uff9e\063\uff9e\064\uff9e\066\uff9e" +
    "\071\uff9e\001\002\000\050\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\040\uff9d\041\uff9d\060\uff9d\063\uff9d\064" +
    "\uff9d\066\uff9d\071\uff9d\001\002\000\006\026\u020d\063\u020e" +
    "\001\002\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011" +
    "\u01cd\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc" +
    "\001\002\000\020\051\uffef\052\uffef\054\uffef\055\uffef\056" +
    "\uffef\070\uffef\112\uffef\001\002\000\040\012\u01dd\013\u01d8" +
    "\014\u01e2\015\u01df\016\u01de\017\u01da\020\u01db\021\u01e0\022" +
    "\u01e1\023\u01e3\024\u01e4\025\u01dc\040\u01e5\041\u01d9\063\u0210" +
    "\001\002\000\020\051\ufff0\052\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\070\ufff0\112\ufff0\001\002\000\004\057\u0212\001\002" +
    "\000\004\060\u0213\001\002\000\004\061\u0214\001\002\000" +
    "\042\003\u0215\011\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\050\uffe7\062\uffe7\111\uffe7\112" +
    "\uffe7\114\uffe7\126\uffe7\130\uffe7\001\002\000\004\063\u02cb" +
    "\001\002\000\040\011\u0220\027\u0221\030\u021e\032\u022b\033" +
    "\u0224\034\u021d\035\u021a\036\u0217\050\u0228\062\u022f\111\u0227" +
    "\112\u022c\114\u022a\126\u022d\130\u0226\001\002\000\004\063" +
    "\u02ca\001\002\000\040\011\uffd1\027\uffd1\030\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\050\uffd1\062\uffd1\111" +
    "\uffd1\112\uffd1\114\uffd1\126\uffd1\130\uffd1\001\002\000\040" +
    "\011\uffd3\027\uffd3\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\050\uffd3\062\uffd3\111\uffd3\112\uffd3\114\uffd3" +
    "\126\uffd3\130\uffd3\001\002\000\004\057\u02c4\001\002\000" +
    "\040\011\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\050\uffe9\062\uffe9\111\uffe9\112\uffe9\114" +
    "\uffe9\126\uffe9\130\uffe9\001\002\000\042\003\uffb6\011\uffb6" +
    "\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\050\uffb6\062\uffb6\111\uffb6\112\uffb6\114\uffb6\126\uffb6" +
    "\130\uffb6\001\002\000\004\057\u0299\001\002\000\004\057" +
    "\u028c\001\002\000\040\011\uffce\027\uffce\030\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\050\uffce\062\uffce\111" +
    "\uffce\112\uffce\114\uffce\126\uffce\130\uffce\001\002\000\004" +
    "\026\u0289\001\002\000\004\061\u0281\001\002\000\040\011" +
    "\uffd5\027\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\050\uffd5\062\uffd5\111\uffd5\112\uffd5\114\uffd5\126" +
    "\uffd5\130\uffd5\001\002\000\040\011\uffcc\027\uffcc\030\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\050\uffcc\062" +
    "\uffcc\111\uffcc\112\uffcc\114\uffcc\126\uffcc\130\uffcc\001\002" +
    "\000\004\063\u0280\001\002\000\040\011\uffd6\027\uffd6\030" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\050\uffd6" +
    "\062\uffd6\111\uffd6\112\uffd6\114\uffd6\126\uffd6\130\uffd6\001" +
    "\002\000\004\057\u027d\001\002\000\004\073\u0277\001\002" +
    "\000\004\057\u026a\001\002\000\042\003\uffb5\011\uffb5\027" +
    "\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\050\uffb5\062\uffb5\111\uffb5\112\uffb5\114\uffb5\126\uffb5\130" +
    "\uffb5\001\002\000\004\057\u0267\001\002\000\004\057\u0253" +
    "\001\002\000\004\073\u024b\001\002\000\004\057\u0232\001" +
    "\002\000\040\011\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\050\uffd4\062\uffd4\111\uffd4\112" +
    "\uffd4\114\uffd4\126\uffd4\130\uffd4\001\002\000\004\002\uffee" +
    "\001\002\000\040\011\uffd2\027\uffd2\030\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\050\uffd2\062\uffd2\111\uffd2" +
    "\112\uffd2\114\uffd2\126\uffd2\130\uffd2\001\002\000\040\011" +
    "\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\050\uffcd\062\uffcd\111\uffcd\112\uffcd\114\uffcd\126" +
    "\uffcd\130\uffcd\001\002\000\012\122\u0235\123\u0236\124\u0234" +
    "\125\u0233\001\002\000\004\071\u0246\001\002\000\004\071" +
    "\u0241\001\002\000\004\071\u023c\001\002\000\004\071\u0237" +
    "\001\002\000\004\127\u0238\001\002\000\004\011\u0239\001" +
    "\002\000\004\060\u023a\001\002\000\004\063\u023b\001\002" +
    "\000\042\003\uffdd\011\uffdd\027\uffdd\030\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\050\uffdd\062\uffdd\111\uffdd" +
    "\112\uffdd\114\uffdd\126\uffdd\130\uffdd\001\002\000\004\127" +
    "\u023d\001\002\000\004\011\u023e\001\002\000\004\060\u023f" +
    "\001\002\000\004\063\u0240\001\002\000\042\003\uffde\011" +
    "\uffde\027\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\050\uffde\062\uffde\111\uffde\112\uffde\114\uffde\126" +
    "\uffde\130\uffde\001\002\000\004\127\u0242\001\002\000\004" +
    "\011\u0243\001\002\000\004\060\u0244\001\002\000\004\063" +
    "\u0245\001\002\000\042\003\uffdc\011\uffdc\027\uffdc\030\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\050\uffdc\062" +
    "\uffdc\111\uffdc\112\uffdc\114\uffdc\126\uffdc\130\uffdc\001\002" +
    "\000\004\127\u0247\001\002\000\004\011\u0248\001\002\000" +
    "\004\060\u0249\001\002\000\004\063\u024a\001\002\000\042" +
    "\003\uffdb\011\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\050\uffdb\062\uffdb\111\uffdb\112\uffdb" +
    "\114\uffdb\126\uffdb\130\uffdb\001\002\000\004\011\u024c\001" +
    "\002\000\004\073\u024d\001\002\000\004\011\u024e\001\002" +
    "\000\004\057\u024f\001\002\000\032\004\u01c5\006\u01cb\007" +
    "\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9\060\uffa2" +
    "\111\u01d1\112\u01c7\114\u01cc\001\002\000\004\060\u0251\001" +
    "\002\000\004\063\u0252\001\002\000\042\003\uffa0\011\uffa0" +
    "\027\uffa0\030\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\050\uffa0\062\uffa0\111\uffa0\112\uffa0\114\uffa0\126\uffa0" +
    "\130\uffa0\001\002\000\014\011\u0220\051\u01b8\052\u01bc\054" +
    "\u01c0\055\u01bb\001\002\000\030\004\u01c5\006\u01cb\007\u01ca" +
    "\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112" +
    "\u01c7\114\u01cc\001\002\000\030\004\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\013\uffac\043\uffac\057\uffac\111\uffac\112" +
    "\uffac\114\uffac\001\002\000\004\011\u0257\001\002\000\004" +
    "\026\u0258\001\002\000\030\004\u01c5\006\u01cb\007\u01ca\010" +
    "\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7" +
    "\114\u01cc\001\002\000\040\012\u01dd\013\u01d8\014\u01e2\015" +
    "\u01df\016\u01de\017\u01da\020\u01db\021\u01e0\022\u01e1\023\u01e3" +
    "\024\u01e4\025\u01dc\040\u01e5\041\u01d9\063\u025a\001\002\000" +
    "\030\004\uffab\006\uffab\007\uffab\010\uffab\011\uffab\013\uffab" +
    "\043\uffab\057\uffab\111\uffab\112\uffab\114\uffab\001\002\000" +
    "\040\012\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de\017\u01da" +
    "\020\u01db\021\u01e0\022\u01e1\023\u01e3\024\u01e4\025\u01dc\040" +
    "\u01e5\041\u01d9\063\u025c\001\002\000\004\011\u025d\001\002" +
    "\000\010\026\u0263\046\u0265\047\u0264\001\002\000\004\060" +
    "\u025f\001\002\000\004\061\u0260\001\002\000\042\003\u0215" +
    "\011\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\050\uffe7\062\uffe7\111\uffe7\112\uffe7\114\uffe7" +
    "\126\uffe7\130\uffe7\001\002\000\040\011\u0220\027\u0221\030" +
    "\u021e\032\u022b\033\u0224\034\u021d\035\u021a\036\u0217\050\u0228" +
    "\062\u0262\111\u0227\112\u022c\114\u022a\126\u022d\130\u0226\001" +
    "\002\000\042\003\uffb0\011\uffb0\027\uffb0\030\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\050\uffb0\062\uffb0\111" +
    "\uffb0\112\uffb0\114\uffb0\126\uffb0\130\uffb0\001\002\000\030" +
    "\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043" +
    "\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001\002\000\004" +
    "\060\uffae\001\002\000\004\060\uffaf\001\002\000\040\012" +
    "\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de\017\u01da\020\u01db" +
    "\021\u01e0\022\u01e1\023\u01e3\024\u01e4\025\u01dc\040\u01e5\041" +
    "\u01d9\060\uffad\001\002\000\004\060\u0268\001\002\000\004" +
    "\063\u0269\001\002\000\040\011\uffd7\027\uffd7\030\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\050\uffd7\062\uffd7" +
    "\111\uffd7\112\uffd7\114\uffd7\126\uffd7\130\uffd7\001\002\000" +
    "\006\004\u026c\060\u026b\001\002\000\004\063\u0276\001\002" +
    "\000\006\060\u026f\071\u026e\001\002\000\006\060\u0273\071" +
    "\u0272\001\002\000\004\011\u0271\001\002\000\004\063\u0270" +
    "\001\002\000\042\003\uffe2\011\uffe2\027\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\050\uffe2\062\uffe2" +
    "\111\uffe2\112\uffe2\114\uffe2\126\uffe2\130\uffe2\001\002\000" +
    "\006\060\uffe0\071\uffe0\001\002\000\004\011\u0275\001\002" +
    "\000\004\063\u0274\001\002\000\042\003\uffe1\011\uffe1\027" +
    "\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\050\uffe1\062\uffe1\111\uffe1\112\uffe1\114\uffe1\126\uffe1\130" +
    "\uffe1\001\002\000\006\060\uffdf\071\uffdf\001\002\000\040" +
    "\011\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\050\uffd9\062\uffd9\111\uffd9\112\uffd9\114\uffd9" +
    "\126\uffd9\130\uffd9\001\002\000\004\011\u0278\001\002\000" +
    "\004\057\u0279\001\002\000\032\004\u01c5\006\u01cb\007\u01ca" +
    "\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9\060\uffa2\111" +
    "\u01d1\112\u01c7\114\u01cc\001\002\000\004\060\u027b\001\002" +
    "\000\004\063\u027c\001\002\000\042\003\uffa1\011\uffa1\027" +
    "\uffa1\030\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\050\uffa1\062\uffa1\111\uffa1\112\uffa1\114\uffa1\126\uffa1\130" +
    "\uffa1\001\002\000\004\060\u027e\001\002\000\004\063\u027f" +
    "\001\002\000\040\011\uffd8\027\uffd8\030\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\050\uffd8\062\uffd8\111\uffd8" +
    "\112\uffd8\114\uffd8\126\uffd8\130\uffd8\001\002\000\040\011" +
    "\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\050\uffd0\062\uffd0\111\uffd0\112\uffd0\114\uffd0\126" +
    "\uffd0\130\uffd0\001\002\000\042\003\u0215\011\uffe7\027\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\050" +
    "\uffe7\062\uffe7\111\uffe7\112\uffe7\114\uffe7\126\uffe7\130\uffe7" +
    "\001\002\000\040\011\u0220\027\u0221\030\u021e\032\u022b\033" +
    "\u0224\034\u021d\035\u021a\036\u0217\050\u0228\062\u0283\111\u0227" +
    "\112\u022c\114\u022a\126\u022d\130\u0226\001\002\000\004\035" +
    "\u0284\001\002\000\004\057\u0285\001\002\000\030\004\u01c5" +
    "\006\u01cb\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057" +
    "\u01c9\111\u01d1\112\u01c7\114\u01cc\001\002\000\040\012\u01dd" +
    "\013\u01d8\014\u01e2\015\u01df\016\u01de\017\u01da\020\u01db\021" +
    "\u01e0\022\u01e1\023\u01e3\024\u01e4\025\u01dc\040\u01e5\041\u01d9" +
    "\060\u0287\001\002\000\004\063\u0288\001\002\000\042\003" +
    "\uffb8\011\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\050\uffb8\062\uffb8\111\uffb8\112\uffb8\114" +
    "\uffb8\126\uffb8\130\uffb8\001\002\000\030\004\u01c5\006\u01cb" +
    "\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9\111" +
    "\u01d1\112\u01c7\114\u01cc\001\002\000\040\012\u01dd\013\u01d8" +
    "\014\u01e2\015\u01df\016\u01de\017\u01da\020\u01db\021\u01e0\022" +
    "\u01e1\023\u01e3\024\u01e4\025\u01dc\040\u01e5\041\u01d9\063\u028b" +
    "\001\002\000\060\003\uffda\004\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\013\uffda\027\uffda\030\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\043\uffda\050\uffda\057\uffda\062" +
    "\uffda\111\uffda\112\uffda\114\uffda\126\uffda\130\uffda\001\002" +
    "\000\030\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd\013" +
    "\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7\114\u01cc\001\002" +
    "\000\040\012\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de\017" +
    "\u01da\020\u01db\021\u01e0\022\u01e1\023\u01e3\024\u01e4\025\u01dc" +
    "\040\u01e5\041\u01d9\060\u028e\001\002\000\004\061\u028f\001" +
    "\002\000\042\003\u0215\011\uffe7\027\uffe7\030\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\050\uffe7\062\uffe7\111" +
    "\uffe7\112\uffe7\114\uffe7\126\uffe7\130\uffe7\001\002\000\040" +
    "\011\u0220\027\u0221\030\u021e\032\u022b\033\u0224\034\u021d\035" +
    "\u021a\036\u0217\050\u0228\062\u0291\111\u0227\112\u022c\114\u022a" +
    "\126\u022d\130\u0226\001\002\000\044\003\uffb2\011\uffb2\027" +
    "\uffb2\030\uffb2\031\u0292\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\050\uffb2\062\uffb2\111\uffb2\112\uffb2\114\uffb2\126" +
    "\uffb2\130\uffb2\001\002\000\006\030\u021e\061\u0294\001\002" +
    "\000\042\003\uffb1\011\uffb1\027\uffb1\030\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\050\uffb1\062\uffb1\111\uffb1" +
    "\112\uffb1\114\uffb1\126\uffb1\130\uffb1\001\002\000\042\003" +
    "\u0215\011\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\050\uffe7\062\uffe7\111\uffe7\112\uffe7\114" +
    "\uffe7\126\uffe7\130\uffe7\001\002\000\042\003\uffb7\011\uffb7" +
    "\027\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\050\uffb7\062\uffb7\111\uffb7\112\uffb7\114\uffb7\126\uffb7" +
    "\130\uffb7\001\002\000\040\011\u0220\027\u0221\030\u021e\032" +
    "\u022b\033\u0224\034\u021d\035\u021a\036\u0217\050\u0228\062\uffb4" +
    "\111\u0227\112\u022c\114\u022a\126\u022d\130\u0226\001\002\000" +
    "\004\062\u0298\001\002\000\042\003\uffb3\011\uffb3\027\uffb3" +
    "\030\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\050" +
    "\uffb3\062\uffb3\111\uffb3\112\uffb3\114\uffb3\126\uffb3\130\uffb3" +
    "\001\002\000\004\011\u029a\001\002\000\004\060\u029b\001" +
    "\002\000\004\061\u029c\001\002\000\010\037\uffa8\062\uffa8" +
    "\113\uffa8\001\002\000\010\037\u029e\062\u029f\113\u02a0\001" +
    "\002\000\004\064\u02c0\001\002\000\042\003\uffaa\011\uffaa" +
    "\027\uffaa\030\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\050\uffaa\062\uffaa\111\uffaa\112\uffaa\114\uffaa\126\uffaa" +
    "\130\uffaa\001\002\000\030\004\u01c5\006\u01cb\007\u01ca\010" +
    "\u01c8\011\u01cd\013\u01c6\043\u01d0\057\u01c9\111\u01d1\112\u01c7" +
    "\114\u01cc\001\002\000\010\037\uffa9\062\uffa9\113\uffa9\001" +
    "\002\000\040\012\u01dd\013\u01d8\014\u01e2\015\u01df\016\u01de" +
    "\017\u01da\020\u01db\021\u01e0\022\u01e1\023\u01e3\024\u01e4\025" +
    "\u01dc\040\u01e5\041\u01d9\064\u02a3\001\002\000\036\003\u02ac" +
    "\011\u0220\027\u0221\030\u021e\032\u022b\033\uffbd\034\u021d\035" +
    "\u021a\050\u02ad\111\u0227\112\u022c\114\u02ae\126\u022d\130\u02ab" +
    "\001\002\000\036\003\uffc3\011\uffc3\027\uffc3\030\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\050\uffc3\111\uffc3\112\uffc3" +
    "\114\uffc3\126\uffc3\130\uffc3\001\002\000\036\003\uffc5\011" +
    "\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\050\uffc5\111\uffc5\112\uffc5\114\uffc5\126\uffc5\130\uffc5\001" +
    "\002\000\036\003\u02ac\011\u0220\027\u0221\030\u021e\032\u022b" +
    "\033\uffbd\034\u021d\035\u021a\050\u02ad\111\u0227\112\u022c\114" +
    "\u02ae\126\u022d\130\u02ab\001\002\000\036\003\uffc2\011\uffc2" +
    "\027\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\050" +
    "\uffc2\111\uffc2\112\uffc2\114\uffc2\126\uffc2\130\uffc2\001\002" +
    "\000\036\003\uffc7\011\uffc7\027\uffc7\030\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\050\uffc7\111\uffc7\112\uffc7\114\uffc7" +
    "\126\uffc7\130\uffc7\001\002\000\036\003\uffc0\011\uffc0\027" +
    "\uffc0\030\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\050\uffc0" +
    "\111\uffc0\112\uffc0\114\uffc0\126\uffc0\130\uffc0\001\002\000" +
    "\036\003\uffc8\011\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\050\uffc8\111\uffc8\112\uffc8\114\uffc8\126" +
    "\uffc8\130\uffc8\001\002\000\004\057\u02bc\001\002\000\004" +
    "\063\u02bb\001\002\000\004\057\u02b8\001\002\000\004\057" +
    "\u02b5\001\002\000\004\033\u02b3\001\002\000\036\003\uffc6" +
    "\011\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\050\uffc6\111\uffc6\112\uffc6\114\uffc6\126\uffc6\130\uffc6" +
    "\001\002\000\036\003\uffc4\011\uffc4\027\uffc4\030\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\050\uffc4\111\uffc4\112\uffc4" +
    "\114\uffc4\126\uffc4\130\uffc4\001\002\000\036\003\uffc1\011" +
    "\uffc1\027\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\050\uffc1\111\uffc1\112\uffc1\114\uffc1\126\uffc1\130\uffc1\001" +
    "\002\000\004\063\u02b4\001\002\000\010\037\uffa7\062\uffa7" +
    "\113\uffa7\001\002\000\004\060\u02b6\001\002\000\004\063" +
    "\u02b7\001\002\000\036\003\uffc9\011\uffc9\027\uffc9\030\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\050\uffc9\111\uffc9\112" +
    "\uffc9\114\uffc9\126\uffc9\130\uffc9\001\002\000\006\004\u026c" +
    "\060\u02b9\001\002\000\004\063\u02ba\001\002\000\036\003" +
    "\uffcb\011\uffcb\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\050\uffcb\111\uffcb\112\uffcb\114\uffcb\126\uffcb\130" +
    "\uffcb\001\002\000\036\003\uffbf\011\uffbf\027\uffbf\030\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\050\uffbf\111\uffbf\112" +
    "\uffbf\114\uffbf\126\uffbf\130\uffbf\001\002\000\004\060\u02bd" +
    "\001\002\000\004\063\u02be\001\002\000\036\003\uffca\011" +
    "\uffca\027\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\050\uffca\111\uffca\112\uffca\114\uffca\126\uffca\130\uffca\001" +
    "\002\000\004\033\uffbe\001\002\000\036\003\u02ac\011\u0220" +
    "\027\u0221\030\u021e\032\u022b\033\uffbd\034\u021d\035\u021a\050" +
    "\u02ad\111\u0227\112\u022c\114\u02ae\126\u022d\130\u02ab\001\002" +
    "\000\004\033\u02c2\001\002\000\004\063\u02c3\001\002\000" +
    "\010\037\uffa6\062\uffa6\113\uffa6\001\002\000\030\004\u01c5" +
    "\006\u01cb\007\u01ca\010\u01c8\011\u01cd\013\u01c6\043\u01d0\057" +
    "\u01c9\111\u01d1\112\u01c7\114\u01cc\001\002\000\040\012\u01dd" +
    "\013\u01d8\014\u01e2\015\u01df\016\u01de\017\u01da\020\u01db\021" +
    "\u01e0\022\u01e1\023\u01e3\024\u01e4\025\u01dc\040\u01e5\041\u01d9" +
    "\060\u02c6\001\002\000\004\061\u02c7\001\002\000\042\003" +
    "\u0215\011\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\050\uffe7\062\uffe7\111\uffe7\112\uffe7\114" +
    "\uffe7\126\uffe7\130\uffe7\001\002\000\040\011\u0220\027\u0221" +
    "\030\u021e\032\u022b\033\u0224\034\u021d\035\u021a\036\u0217\050" +
    "\u0228\062\u02c9\111\u0227\112\u022c\114\u022a\126\u022d\130\u0226" +
    "\001\002\000\042\003\uffb9\011\uffb9\027\uffb9\030\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\050\uffb9\062\uffb9" +
    "\111\uffb9\112\uffb9\114\uffb9\126\uffb9\130\uffb9\001\002\000" +
    "\040\011\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\050\uffcf\062\uffcf\111\uffcf\112\uffcf\114" +
    "\uffcf\126\uffcf\130\uffcf\001\002\000\040\011\uffe8\027\uffe8" +
    "\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\050" +
    "\uffe8\062\uffe8\111\uffe8\112\uffe8\114\uffe8\126\uffe8\130\uffe8" +
    "\001\002\000\004\011\u02cd\001\002\000\004\011\u02ce\001" +
    "\002\000\004\057\u02d0\001\002\000\020\051\uffbc\052\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\070\uffbc\112\uffbc\001\002\000" +
    "\032\004\u01c5\006\u01cb\007\u01ca\010\u01c8\011\u01cd\013\u01c6" +
    "\043\u01d0\057\u01c9\060\uffa2\111\u01d1\112\u01c7\114\u01cc\001" +
    "\002\000\004\060\u02d2\001\002\000\006\063\u02d3\071\u02d4" +
    "\001\002\000\020\051\uffba\052\uffba\054\uffba\055\uffba\056" +
    "\uffba\070\uffba\112\uffba\001\002\000\004\011\u02ce\001\002" +
    "\000\020\051\uffbb\052\uffbb\054\uffbb\055\uffbb\056\uffbb\070" +
    "\uffbb\112\uffbb\001\002\000\004\002\uffff\001\002\000\020" +
    "\051\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\070\ufff7\112" +
    "\ufff7\001\002\000\004\002\ufffd\001\002\000\030\002\uff82" +
    "\051\uff82\052\uff82\054\uff82\055\uff82\056\uff82\070\uff82\077" +
    "\uff82\103\uff82\112\uff82\121\uff82\001\002\000\022\051\ufff4" +
    "\052\ufff4\054\ufff4\055\ufff4\056\ufff4\070\ufff4\112\ufff4\121" +
    "\ufff4\001\002\000\022\051\ufff3\052\ufff3\054\ufff3\055\ufff3" +
    "\056\ufff3\070\ufff3\112\ufff3\121\ufff3\001\002\000\022\051" +
    "\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2\070\ufff2\112\ufff2" +
    "\121\ufff2\001\002\000\022\051\ufff5\052\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\070\ufff5\112\ufff5\121\ufff5\001\002\000\020" +
    "\051\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8\070\ufff8\112" +
    "\ufff8\001\002\000\004\002\001\001\002\000\004\011\u02e1" +
    "\001\002\000\006\061\u02e2\100\u02e3\001\002\000\030\011" +
    "\041\051\027\052\040\053\034\054\047\055\037\056\035" +
    "\062\uff73\075\036\076\042\077\031\001\002\000\004\011" +
    "\u02e4\001\002\000\004\061\u02e5\001\002\000\026\011\041" +
    "\051\027\052\040\053\034\054\047\055\037\056\035\075" +
    "\036\076\042\077\031\001\002\000\030\011\041\051\027" +
    "\052\040\053\034\054\047\055\037\056\035\062\u02e7\075" +
    "\036\076\042\077\031\001\002\000\030\002\uff75\051\uff75" +
    "\052\uff75\054\uff75\055\uff75\056\uff75\070\uff75\077\uff75\103" +
    "\uff75\112\uff75\121\uff75\001\002\000\004\062\u02ea\001\002" +
    "\000\030\011\041\051\027\052\040\053\034\054\047\055" +
    "\037\056\035\062\uff74\075\036\076\042\077\031\001\002" +
    "\000\030\002\uff77\051\uff77\052\uff77\054\uff77\055\uff77\056" +
    "\uff77\070\uff77\077\uff77\103\uff77\112\uff77\121\uff77\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02e8\000\026\002\004\055\012\057\015\062\020\063" +
    "\006\065\010\111\014\125\016\126\013\127\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\125\u02dd\126\013\127\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\057\u02d8\065" +
    "\u02d7\125\016\126\013\127\007\001\001\000\010\125\u02d6" +
    "\126\013\127\007\001\001\000\020\055\012\057\015\063" +
    "\u02d5\065\010\125\016\126\013\127\007\001\001\000\002" +
    "\001\001\000\004\121\u01b4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\032\012\045" +
    "\033\044\043\043\046\042\051\u01b2\060\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\032\012\045" +
    "\033\044\043\043\046\042\051\027\060\031\001\001\000" +
    "\002\001\001\000\016\006\032\012\045\033\044\043\043" +
    "\046\u01b1\060\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u0172\042\143" +
    "\001\001\000\006\012\056\036\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\061\001" +
    "\001\000\046\004\076\007\117\010\064\011\105\012\111" +
    "\013\114\014\107\015\071\016\112\017\066\020\110\021" +
    "\103\022\115\031\067\034\104\040\062\041\074\047\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\361\042\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\304\042" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\124\001\001\000\046\004\076\007\117\010\064" +
    "\011\105\012\111\013\114\014\107\015\071\016\112\017" +
    "\066\020\110\021\103\022\115\031\067\034\104\040\062" +
    "\041\074\047\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\144\042\143\001\001\000\002\001\001" +
    "\000\006\005\250\042\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\241\042\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\205\042\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\204\042" +
    "\143\001\001\000\006\005\203\042\143\001\001\000\006" +
    "\005\202\042\143\001\001\000\006\005\201\042\143\001" +
    "\001\000\006\005\200\042\143\001\001\000\006\005\177" +
    "\042\143\001\001\000\006\005\176\042\143\001\001\000" +
    "\002\001\001\000\006\005\174\042\143\001\001\000\006" +
    "\005\173\042\143\001\001\000\006\005\172\042\143\001" +
    "\001\000\006\005\171\042\143\001\001\000\006\005\170" +
    "\042\143\001\001\000\006\005\167\042\143\001\001\000" +
    "\006\005\166\042\143\001\001\000\006\005\165\042\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\221\037\220\042\143\054\235\001\001\000" +
    "\006\005\230\042\143\001\001\000\004\045\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\221\037" +
    "\220\042\143\054\222\001\001\000\004\045\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\225\001\001" +
    "\000\002\001\001\000\006\005\227\042\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\233\042\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\221\037\245\042\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\221\037\220\042\143" +
    "\054\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\256\042\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\261\001\001\000" +
    "\046\004\076\007\117\010\064\011\105\012\111\013\114" +
    "\014\107\015\071\016\112\017\066\020\110\021\103\022" +
    "\115\031\067\034\104\040\062\041\074\047\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\271\042" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\306\001\001\000\004\030\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\313\042\143\001\001\000\002\001\001\000" +
    "\004\003\315\001\001\000\046\004\076\007\117\010\064" +
    "\011\105\012\111\013\114\014\107\015\071\016\112\017" +
    "\066\020\110\021\103\022\115\031\067\034\104\040\062" +
    "\041\074\047\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\321\001\001\000\046\004\076\007\117" +
    "\010\064\011\105\012\111\013\114\014\107\015\071\016" +
    "\112\017\066\020\110\021\103\022\115\031\067\034\104" +
    "\040\062\041\074\047\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\336\001\001\000\002\001\001\000" +
    "\010\005\341\026\340\042\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\344\042" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\341\026\350\042\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\341\026\354\042\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u0128\042\143\001\001\000\012\005\221\037\220\042\143" +
    "\054\u011e\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0111\042\143\001\001\000\006\044\372\050\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\375\042\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\221\037\220\042\143\054" +
    "\u010c\001\001\000\006\040\u0102\050\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\221\037\220\042\143\054\u0106\001\001\000\006\044\372" +
    "\050\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\u010a\050\u010b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\u0110\050\u010b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u011a\042\143\001\001\000\006\005\u0115\042\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u0118\042\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\u010a\050\u0121\001\001\000\002\001\001\000\006\005" +
    "\u0123\042\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0136\042\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u0139\042\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\u013c\001\001\000\052" +
    "\004\u013e\007\117\010\064\011\105\012\111\013\114\014" +
    "\107\015\071\016\112\017\066\020\110\021\103\022\115" +
    "\031\067\032\u013f\034\104\040\062\041\074\047\116\061" +
    "\u0140\001\001\000\004\025\u0143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\u0146\021\103" +
    "\022\115\001\001\000\004\003\u0147\001\001\000\002\001" +
    "\001\000\050\004\076\007\117\010\064\011\105\012\111" +
    "\013\114\014\107\015\071\016\112\017\066\020\110\021" +
    "\103\022\115\031\067\034\104\040\062\041\074\047\116" +
    "\132\u0148\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\u014b\012\111\023\u014c\047\u014d\001\001\000\002" +
    "\001\001\000\006\005\u015a\042\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\221\037\220\042\143" +
    "\054\u0157\001\001\000\004\050\373\001\001\000\002\001" +
    "\001\000\012\005\221\037\220\042\143\054\u0154\001\001" +
    "\000\004\050\u0103\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u0121\001\001\000\002\001\001\000" +
    "\004\024\u015d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u0160\001\001\000\046\004" +
    "\076\007\117\010\064\011\105\012\111\013\114\014\107" +
    "\015\071\016\112\017\066\020\110\021\103\022\115\031" +
    "\067\034\104\040\062\041\074\047\116\001\001\000\002" +
    "\001\001\000\006\005\u0165\042\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\221" +
    "\037\220\042\143\054\u0167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0170\001\001\000\002\001\001\000\004\003\u016e\001" +
    "\001\000\046\004\076\007\117\010\064\011\105\012\111" +
    "\013\114\014\107\015\071\016\112\017\066\020\110\021" +
    "\103\022\115\031\067\034\104\040\062\041\074\047\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\056\036\u0179\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u017c\001\001\000\046\004\076\007" +
    "\117\010\064\011\105\012\111\013\114\014\107\015\071" +
    "\016\112\017\066\020\110\021\103\022\115\031\067\034" +
    "\104\040\062\041\074\047\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u0180\001\001\000\046\004" +
    "\076\007\117\010\064\011\105\012\111\013\114\014\107" +
    "\015\071\016\112\017\066\020\110\021\103\022\115\031" +
    "\067\034\104\040\062\041\074\047\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u018f\042\143\001" +
    "\001\000\006\012\056\036\u0186\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0189\001" +
    "\001\000\046\004\076\007\117\010\064\011\105\012\111" +
    "\013\114\014\107\015\071\016\112\017\066\020\110\021" +
    "\103\022\115\031\067\034\104\040\062\041\074\047\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u018d\001\001\000\046\004\076\007\117\010\064\011\105" +
    "\012\111\013\114\014\107\015\071\016\112\017\066\020" +
    "\110\021\103\022\115\031\067\034\104\040\062\041\074" +
    "\047\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\056\036\u0192\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u0195\001\001\000" +
    "\046\004\076\007\117\010\064\011\105\012\111\013\114" +
    "\014\107\015\071\016\112\017\066\020\110\021\103\022" +
    "\115\031\067\034\104\040\062\041\074\047\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0199\001" +
    "\001\000\046\004\076\007\117\010\064\011\105\012\111" +
    "\013\114\014\107\015\071\016\112\017\066\020\110\021" +
    "\103\022\115\031\067\034\104\040\062\041\074\047\116" +
    "\001\001\000\002\001\001\000\006\012\056\036\u019c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u019f" +
    "\001\001\000\046\004\076\007\117\010\064\011\105\012" +
    "\111\013\114\014\107\015\071\016\112\017\066\020\110" +
    "\021\103\022\115\031\067\034\104\040\062\041\074\047" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u01a3\001\001\000\046\004\076\007\117\010\064\011" +
    "\105\012\111\013\114\014\107\015\071\016\112\017\066" +
    "\020\110\021\103\022\115\031\067\034\104\040\062\041" +
    "\074\047\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\056\036\u01a7\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u01aa\001\001\000\046\004\076" +
    "\007\117\010\064\011\105\012\111\013\114\014\107\015" +
    "\071\016\112\017\066\020\110\021\103\022\115\031\067" +
    "\034\104\040\062\041\074\047\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u01ae\001\001\000\046" +
    "\004\076\007\117\010\064\011\105\012\111\013\114\014" +
    "\107\015\071\016\112\017\066\020\110\021\103\022\115" +
    "\031\067\034\104\040\062\041\074\047\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\032\012\045\033\044\043\043\046\u01b1\060\031\001" +
    "\001\000\002\001\001\000\014\066\u01bd\067\u01b8\070\u01be" +
    "\103\u01b5\124\u01bc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\124\u01c1\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\071\u01ce\110\u01cd\001\001\000\002\001\001\000\006" +
    "\071\u020a\110\u01cd\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\071\u0201\110\u01cd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\u01f6\110\u01cd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\071\u01d6\110\u01cd\114\u01d4\117\u01d5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\071\u01f2\110\u01cd\001\001\000\006\071\u01f1\110\u01cd" +
    "\001\001\000\006\071\u01f0\110\u01cd\001\001\000\006\071" +
    "\u01ef\110\u01cd\001\001\000\006\071\u01ee\110\u01cd\001\001" +
    "\000\006\071\u01ed\110\u01cd\001\001\000\006\071\u01ec\110" +
    "\u01cd\001\001\000\006\071\u01eb\110\u01cd\001\001\000\006" +
    "\071\u01ea\110\u01cd\001\001\000\006\071\u01e9\110\u01cd\001" +
    "\001\000\006\071\u01e8\110\u01cd\001\001\000\006\071\u01e7" +
    "\110\u01cd\001\001\000\006\071\u01e6\110\u01cd\001\001\000" +
    "\006\071\u01e5\110\u01cd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\071\u01f5\110\u01cd\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\071\u01f9" +
    "\110\u01cd\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\071\u01fc\110\u01cd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\071\u01d6\110\u01cd\114\u01d4\117\u0208\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\071\u020e\110\u01cd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\u0215\001\001" +
    "\000\002\001\001\000\032\072\u022d\073\u0224\074\u0221\075" +
    "\u0218\076\u022f\077\u0217\100\u021e\101\u0230\102\u0222\104\u021b" +
    "\105\u0228\113\u021a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\071\u01d6" +
    "\110\u01cd\114\u01d4\117\u024f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\074\u0254\106\u0253" +
    "\124\u0255\001\001\000\006\071\u025a\110\u01cd\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\071\u0258\110\u01cd\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\u025d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\u0260\001\001\000\032\072\u022d\073\u0224\074\u0221\075\u0218" +
    "\076\u022f\077\u0217\100\u021e\101\u0230\102\u0222\104\u021b\105" +
    "\u0228\113\u021a\001\001\000\002\001\001\000\006\071\u0265" +
    "\110\u01cd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\130" +
    "\u026c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\071\u01d6\110\u01cd\114\u01d4\117\u0279\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\u0281\001\001\000\032\072\u022d\073\u0224\074" +
    "\u0221\075\u0218\076\u022f\077\u0217\100\u021e\101\u0230\102\u0222" +
    "\104\u021b\105\u0228\113\u021a\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\071\u0285\110\u01cd\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\071" +
    "\u0289\110\u01cd\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\071\u028c\110\u01cd\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\u028f\001\001\000\032\072\u022d" +
    "\073\u0224\074\u0221\075\u0218\076\u022f\077\u0217\100\u021e\101" +
    "\u0230\102\u0222\104\u021b\105\u0228\113\u021a\001\001\000\004" +
    "\116\u0292\001\001\000\010\100\u0294\104\u021b\105\u0228\001" +
    "\001\000\002\001\001\000\004\064\u0295\001\001\000\002" +
    "\001\001\000\034\072\u022d\073\u0224\074\u0221\075\u0218\076" +
    "\u022f\077\u0217\100\u021e\101\u0230\102\u0222\104\u021b\105\u0228" +
    "\113\u021a\131\u0296\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u029c\001\001\000\004\123\u02a0\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\u02a1\110\u01cd" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\072" +
    "\u02af\073\u02a9\074\u02a7\075\u02a4\076\u02b0\077\u02a3\100\u02a6" +
    "\101\u02b1\102\u02a8\104\u021b\105\u0228\112\u02a5\120\u02ae\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\072\u02af" +
    "\073\u02a9\074\u02a7\075\u02a4\076\u02b0\077\u02a3\100\u02a6\101" +
    "\u02b1\102\u02a8\104\u021b\105\u0228\112\u02a5\120\u02be\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\072\u02af" +
    "\073\u02a9\074\u02a7\075\u02a4\076\u02b0\077\u02a3\100\u02a6\101" +
    "\u02b1\102\u02a8\104\u021b\105\u0228\112\u02a5\120\u02c0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\071\u02c4\110\u01cd\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\u02c7\001\001\000\032\072\u022d\073" +
    "\u0224\074\u0221\075\u0218\076\u022f\077\u0217\100\u021e\101\u0230" +
    "\102\u0222\104\u021b\105\u0228\113\u021a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\115\u02ce\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\071\u01d6\110\u01cd\114\u01d4\117\u02d0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\115\u02d4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\032\012\045\033\044" +
    "\043\043\046\042\051\u02e8\052\u02e7\060\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\032\012\045" +
    "\033\044\043\043\046\042\051\u02e5\060\031\001\001\000" +
    "\016\006\032\012\045\033\044\043\043\046\u01b1\060\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\032\012\045\033\044\043\043\046\u01b1\060\031\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String currentAmbit;

    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    // public void syntax_error(Symbol s){
    //     System.out.println("Error Sintactico en la linea " +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }

    // public void unrecovered_syntax_error (Symbol s){
    //     System.out.println("Error Sintactico no recuperable en la linea" +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pascal 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pascal ::= pascalCode java_C 
            {
              LinkedList<Instruction> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c_Jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_Jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c_J = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();
        if(p!=null){
                RESULT.add(p);
        }
        if(c_J!=null){
                RESULT.addAll(c_J);
        }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascal",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pascal ::= java_C 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascal",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // java_C ::= claass cPrincipal 
            {
              LinkedList<Instruction> RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> j = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = new LinkedList<>(); 
        if(j!=null){
        ClasesJava cl = new ClasesJava(j, jleft, jright);
                RESULT.add(cl);
        }
        if(c!=null){
                 RESULT.add(c); 
        } 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("java_C",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // java_C ::= cPrincipal 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); 
        if(c!=null){
                RESULT.add(c); 
        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("java_C",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pascalCode ::= PROCEDURE 
            {
              Instruction RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalCode",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cPrincipal ::= includes declaracionC mainC 
            {
              Instruction RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Includes in = (Includes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction main = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Programa(in, ins, main, inleft, inright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cPrincipal",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cPrincipal ::= 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cPrincipal",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // includes ::= includeP includes 
            {
              Includes RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Includes ins = (Includes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
           RESULT.addSubPPascal(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // includes ::= includeJ includes 
            {
              Includes RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Includes ins = (Includes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
         RESULT.addClaseJava(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // includes ::= 
            {
              Includes RESULT =null;
		 RESULT = new Includes(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includes",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // includeP ::= INCLUDE PASCALUNO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeP",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // includeP ::= INCLUDE PASCALSIMP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeP",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // includeJ ::= INCLUDE JAVAUNO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeJ",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // includeJ ::= INCLUDE JAVATODO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("includeJ",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decConstC ::= CONST typeC ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementC(id, exp, t, idleft, idright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decConstC",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decVarsC ::= typeC ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementC(id, exp, t, idleft, idright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVarsC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decVarsC ::= typeC ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementC(id, t, idleft, idright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVarsC",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainC ::= VOID MAIN PAR_OP PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MainnC("MAIN", ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainC",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionC ::= declaracionC decConstC 
            {
              LinkedList<Instruction> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> decs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction dec = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; RESULT.add(dec);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionC ::= declaracionC decVarsC 
            {
              LinkedList<Instruction> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> decs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction dec = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; RESULT.add(dec);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionC ::= declaracionC decObjetos 
            {
              LinkedList<Instruction> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> decs = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction dec = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decs; RESULT.add(dec);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionC ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionC",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instructionsC ::= instructionsC insC 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; RESULT.add(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instructionsC ::= error SEMIC 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instructionsC ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsC",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typeC ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typeC ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typeC ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typeC ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeC",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // printf ::= PRINT PAR_OP CADENA PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // printf ::= PRINT PAR_OP CADENA varsPrintf PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PrintsC(c, ids, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varsPrintf ::= COLON ID 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.add(id);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsPrintf",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varsPrintf ::= varsPrintf COLON ID 
            {
              LinkedList<String> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ids; RESULT.add(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsPrintf",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // scanf ::= SCAN PAR_OP MASK_D COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // scanf ::= SCAN PAR_OP MASK_C COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // scanf ::= SCAN PAR_OP MASK_F COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // scanf ::= SCAN PAR_OP MASK_S COLON ANDSIMPLE ID PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacionC ::= ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmenttC(id, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionC",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // insC ::= PRINT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // insC ::= CLRSCR PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // insC ::= GETCH PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // insC ::= scanf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // insC ::= asignacionC 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // insC ::= printf 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // insC ::= whileC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // insC ::= forC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // insC ::= DOC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // insC ::= BREAK SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // insC ::= CONTINUE SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // insC ::= ifC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // insC ::= switchC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // insC ::= callC 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insC",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inSwC ::= PRINT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inSwC ::= CLRSCR PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inSwC ::= GETCH PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inSwC ::= scanf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inSwC ::= asignacionC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inSwC ::= printf 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inSwC ::= whileC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inSwC ::= forC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inSwC ::= DOC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // inSwC ::= ifC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // inSwC ::= switchC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inSwC ::= callC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inSwC ::= error SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inSwC",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // insSwC ::= inSwC insSwC 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insSwC",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // insSwC ::= 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insSwC",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // decObjetos ::= JAVA DOT ID instancesC 
            {
              Instruction RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ReferenceC(cl,ins, clleft, clright);    
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decObjetos",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instancesC ::= ID PAR_OP paramssC PAR_CL COLON instancesC 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
        InstanceJava cl = new InstanceJava(id, p, idleft, idright); 
        RESULT.add(cl);

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instancesC",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instancesC ::= ID PAR_OP paramssC PAR_CL SEMIC 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new LinkedList<>();
          InstanceJava cl = new InstanceJava(id, p, idleft, idright); 
          RESULT.add(cl);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instancesC",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // whileC ::= WHILE PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileC",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DOC ::= DO K_OP instructionsC K_CL WHILE PAR_OP EXPRESIONCC PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOC",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ifC ::= IF PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL ELSE ifC 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction elif = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IFC(exp, ins, elif, expleft, expright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifC",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ifC ::= elseesC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifC",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ifC ::= simpleIfC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifC",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$0 ::= 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = ins;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cierreElseC ::= ELSE K_OP instructionsC NT$0 K_CL 
            {
              LinkedList<Instruction> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (LinkedList<Instruction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierreElseC",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simpleIfC ::= IF PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(a, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleIfC",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // elseesC ::= IF PAR_OP EXPRESIONCC PAR_CL K_OP instructionsC K_CL cierreElseC 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insElsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insElsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> insEls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, insEls, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseesC",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // forC ::= FOR PAR_OP declaraAsignaC EXPRESIONCC SEMIC updateVarForC PAR_CL K_OP instructionsC K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaFor(a, b, c, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forC",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // updateVarForC ::= ID PLUSPLUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarForC",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // updateVarForC ::= ID MINUSMINUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarForC",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // updateVarForC ::= ID ASSIGNMENT EXPRESIONCC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarForC",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaraAsignaC ::= asignacionC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsignaC",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaraAsignaC ::= typeC ID ASSIGNMENT EXPRESIONCC SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsignaC",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switchC ::= SWITCH PAR_OP ID PAR_CL K_OP listCasesC K_CL 
            {
              Instruction RESULT =null;
		int cazzozleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cazzozright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> cazzoz = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchC",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listCasesC ::= listCasesC caseC 
            {
              LinkedList<CaseMatch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCasesC",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listCasesC ::= 
            {
              LinkedList<CaseMatch> RESULT =null;
		  RESULT = new LinkedList<>();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCasesC",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // caseC ::= CASE EXPRESIONCC POINTS insSwC BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseC",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // caseC ::= DEFAULT POINTS insSwC BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(null, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseC",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // callsParametersC ::= callsParametersC COLON EXPRESIONCC 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParametersC",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // callsParametersC ::= EXPRESIONCC 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruction>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParametersC",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // paramssC ::= callsParametersC 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramssC",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // paramssC ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramssC",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // callC ::= PASCAL DOT ID PAR_OP paramssC PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // callC ::= JAVA DOT ID DOT ID PAR_OP paramssC PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new call_to_java(id, id1, p, idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // callExpC ::= PASCAL DOT ID PAR_OP paramssC PAR_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExpC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // callExpC ::= JAVA DOT ID DOT ID PAR_OP paramssC PAR_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new call_to_java(id, id1, p, idleft, idright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExpC",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESIONCC ::= MINUS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Negacion(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESIONCC ::= NOT EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESIONCC ::= EXPRESIONCC PLUS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESIONCC ::= EXPRESIONCC MINUS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESIONCC ::= EXPRESIONCC DIVIDED EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESIONCC ::= EXPRESIONCC TIMES EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESIONCC ::= EXPRESIONCC MOD EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESIONCC ::= EXPRESIONCC RAISED EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Raised(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESIONCC ::= EXPRESIONCC EQUALS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESIONCC ::= EXPRESIONCC DIFFERENT EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESIONCC ::= EXPRESIONCC LESS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESIONCC ::= EXPRESIONCC L_EQUALS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESIONCC ::= EXPRESIONCC GREATER EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESIONCC ::= EXPRESIONCC G_EQUALS EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESIONCC ::= EXPRESIONCC AND EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESIONCC ::= EXPRESIONCC OR EXPRESIONCC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESIONCC ::= PAR_OP EXPRESIONCC PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESIONCC ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new NativoC(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESIONCC ::= CHARAC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new NativoC(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESIONCC ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new NativoC(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESIONCC ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new NativoC(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESIONCC ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccessC(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESIONCC ::= ID BRACK_L EXPRESIONCC BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESIONCC ::= ID BRACK_L EXPRESIONCC BRACK_R BRACK_L EXPRESIONCC BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indx1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indx1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction indx1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx1, indx2, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESIONCC ::= GETCH PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESIONCC ::= callExpC 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONCC",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // claass ::= Oneclaass 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // claass ::= claass Oneclaass 
            {
              LinkedList<Instruction> RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> cls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cls; RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // InstructionES ::= InstructionES Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // InstructionES ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // constructor ::= ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, p, ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // constructor ::= ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, new LinkedList<HashMap>(), ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // constructor ::= modPriv ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, p, ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // constructor ::= modPriv ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mainn(id, new LinkedList<HashMap>(), ins, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // modPriv ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // modPriv ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // modPriv ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Oneclaass ::= CLASS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Oneclaass ::= PUBLIC CLASS ID K_OP insClass K_CL 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Classs(id, ins, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Oneclaass ::= CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Oneclaass ::= PUBLIC CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // insClass ::= gInstructionss 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insClass",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // insClass ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insClass",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // gInstructionss ::= gIns 
            {
              LinkedList<Instruction> RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(in);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // gInstructionss ::= gInstructionss gIns 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; RESULT.add(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // gIns ::= methodd 
            {
              Instruction RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction m = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // gIns ::= globalDec 
            {
              Instruction RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction g = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = g; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Instruction ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Instruction ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Instruction ::= print 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Instruction ::= if 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Instruction ::= increaseDecrease 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Instruction ::= for 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Instruction ::= while 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Instruction ::= do 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Instruction ::= match 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Instruction ::= returnn 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Instruction ::= continue 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Instruction ::= declaracionEstructuraD 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Instruction ::= call 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Instruction ::= error SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Instruction ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Negacion(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESION ::= EXPRESION DIVIDED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESION ::= EXPRESION TIMES EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION ::= EXPRESION RAISED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Raised(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION ::= EXPRESION EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESION ::= EXPRESION DIFFERENT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESION ::= EXPRESION L_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPRESION ::= EXPRESION G_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EXPRESION ::= PAR_OP EXPRESION PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPRESION ::= CHARAC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPRESION ::= BOOL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Access(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPRESION ::= THIS DOT ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Access(a, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indx1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indx1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction indx1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx1, indx2, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPRESION ::= callEXP 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPRESION ::= NEW ID PAR_OP callsParameters PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Reference(t, p, tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXPRESION ::= NEW ID PAR_OP PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Reference(t, new LinkedList<>(), tleft, tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // methodd ::= modPriv VOID ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // methodd ::= modPriv VOID ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // methodd ::= modPriv typeVar ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // methodd ::= modPriv typeVar ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // methodd ::= VOID ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // methodd ::= VOID ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // methodd ::= typeVar ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // methodd ::= typeVar ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // methodd ::= constructor 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // parametersFuncts ::= parametersFuncts COLON typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var elseParam= new HashMap<String, Object>();
                                            elseParam.put("id", id);
                                            elseParam.put("tipo", b);
                                            RESULT.add(elseParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // parametersFuncts ::= typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var oneParam = new HashMap<String, Object>();
                                            oneParam.put("id",id);
                                            oneParam.put("tipo", a);
                                            RESULT.add(oneParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // paramss ::= callsParameters 
            {
              LinkedList<Instruction> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // paramss ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // callEXP ::= ID DOT callEXP2 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int call1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int call1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call call1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Call(id, call1, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // callEXP ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // callEXP ::= ID PAR_OP paramss PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // callEXP2 ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // callEXP2 ::= ID PAR_OP paramss PAR_CL 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // callEXP2 ::= ID DOT callEXP2 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // callEXP2 ::= ID 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // call ::= ID DOT call2 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int call1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int call1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call call1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Call(id, call1, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // call ::= ID PAR_OP paramss PAR_CL DOT call2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // call ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // call2 ::= ID PAR_OP paramss PAR_CL DOT call 
            {
              Call RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // call2 ::= ID DOT call 
            {
              Call RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // call2 ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Call RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Call(a, p, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // callsParameters ::= callsParameters COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // callsParameters ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruction>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // instructionIF ::= Instruction 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionIF",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // instructionIF ::= break 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionIF",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // instructionsIF ::= instructionsIF instructionIF 
            {
              LinkedList<Instruction> RESULT =null;
		int inssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> inss = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = inss; RESULT.add(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsIF",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // instructionsIF ::= 
            {
              LinkedList<Instruction> RESULT =null;
		RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsIF",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // if ::= IF PAR_OP EXPRESION PAR_CL K_OP instructionsIF K_CL ELSE if 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction elif = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, elif, expleft, expright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // if ::= elsees 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // if ::= simpleIf 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // for ::= FOR PAR_OP declaraAsigna EXPRESION SEMIC updateVarFor PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaFor(a, b, c, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // updateVarFor ::= ID PLUSPLUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // updateVarFor ::= ID MINUSMINUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // updateVarFor ::= ID ASSIGNMENT EXPRESION 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // while ::= WHILE PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaWhile(a, ins, false,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // do ::= DO K_OP InstructionES K_CL WHILE PAR_OP EXPRESION PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CiclicaWhile(a, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // match ::= SWITCH EXPRESION K_OP listCases K_CL 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cazzozleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cazzozright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> cazzoz = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(exp, cazzoz, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("match",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // listCases ::= listCases case 
            {
              LinkedList<CaseMatch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // listCases ::= 
            {
              LinkedList<CaseMatch> RESULT =null;
		  RESULT = new LinkedList<>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // case ::= CASE EXPRESION POINTS InstructionES BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // case ::= DEFAULT POINTS InstructionES BREAK SEMIC 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseMatch(null, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // declaraAsigna ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // declaraAsigna ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // NT$1 ::= 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = ins;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // cierreElse ::= ELSE K_OP InstructionES NT$1 K_CL 
            {
              LinkedList<Instruction> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (LinkedList<Instruction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierreElse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // simpleIf ::= IF PAR_OP EXPRESION PAR_CL K_OP instructionsIF K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(a, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleIf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // elsees ::= IF PAR_OP EXPRESION PAR_CL K_OP instructionsIF K_CL cierreElse 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insElsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insElsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> insEls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, insEls, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsees",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // print ::= PRINT PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prints(a, false, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // print ::= PRINTLN PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prints(a, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // declaracion ::= typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // declaracion ::= typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // declaracion ::= typeVar ID ASSIGNMENT INP_INT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.ENTERO), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // declaracion ::= typeVar ID ASSIGNMENT INP_C PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.CARACTER), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // declaracion ::= typeVar ID ASSIGNMENT INP_F PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Statement(id, new Input(new Tipo(tipoDato.DECIMAL), idleft, idright), t, idleft, idright, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // globalDec ::= modPriv typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // globalDec ::= modPriv typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // globalDec ::= typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // globalDec ::= typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVectorAlone BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, vals, null, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVector2D BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruction>> vals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, null, vals, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // valoresVector2D ::= BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // valoresVector2D ::= valoresVector2D COLON BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int listaValsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaValsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> listaVals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = listaVals; RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // valoresVectorAlone ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.add(exp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // valoresVectorAlone ::= valoresVectorAlone COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int valuessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valuessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> valuess = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = valuess; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // assig_to_acces ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // assig_to_acces ::= ID DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // assig_to_acces ::= ID 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // asignacion ::= THIS DOT ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(true, id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // asignacion ::= ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // asignacion ::= ID DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // asignacion ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // asignacion ::= ID BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // asignacion ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int index2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, index2, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // asignacion ::= ID ASSIGNMENT INP_INT PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.ENTERO), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // asignacion ::= ID ASSIGNMENT INP_C PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.CARACTER), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // asignacion ::= ID ASSIGNMENT INP_F PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  RESULT = new Assignmentt(id, new Input(new Tipo(tipoDato.DECIMAL), idleft, idright), idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // increaseDecrease ::= ID PLUSPLUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // increaseDecrease ::= ID MINUSMINUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // typeVar ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // typeVar ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // typeVar ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // typeVar ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // typeVar ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // typeVar ::= ID 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.OBJECT); RESULT.setIdObjeto(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // break ::= BREAK SEMIC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferBreak(wleft, wright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // continue ::= CONTINUE SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferContinue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // returnn ::= RETURN SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // returnn ::= RETURN EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(exp, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
