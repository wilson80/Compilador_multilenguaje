
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.wilsoncys.compi1.javacraft.model.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.wilsoncys.compi1.javacraft.model.asbtracto.Instruction;
import com.wilsoncys.compi1.javacraft.model.excepciones.Errores;
import com.wilsoncys.compi1.javacraft.model.simbolo.*;
import com.wilsoncys.compi1.javacraft.model.instrucciones.*;
import com.wilsoncys.compi1.javacraft.model.expresiones.*;
import com.wilsoncys.compi1.javacraft.model.expresiones.Aritmeticas.*;
import com.wilsoncys.compi1.javacraft.model.expresiones.Enums.*;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\055\011\000\002\055\012" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\003\000\002\053\004\000\002\054\007\000\002" +
    "\054\010\000\002\054\011\000\002\054\012\000\002\060" +
    "\003\000\002\060\004\000\002\056\003\000\002\056\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\006\000\002\005\011\000\002\005\006\000\002" +
    "\005\003\000\002\005\007\000\002\005\006\000\002\035" +
    "\013\000\002\035\012\000\002\035\013\000\002\035\012" +
    "\000\002\035\012\000\002\035\011\000\002\035\012\000" +
    "\002\035\011\000\002\035\013\000\002\035\012\000\002" +
    "\035\012\000\002\035\011\000\002\035\003\000\002\040" +
    "\006\000\002\040\004\000\002\063\003\000\002\063\002" +
    "\000\002\047\005\000\002\047\010\000\002\047\006\000" +
    "\002\062\002\000\002\062\010\000\002\062\006\000\002" +
    "\062\005\000\002\062\003\000\002\045\005\000\002\045" +
    "\010\000\002\045\007\000\002\061\010\000\002\061\005" +
    "\000\002\061\007\000\002\034\010\000\002\034\007\000" +
    "\002\043\005\000\002\043\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\021" +
    "\013\000\002\021\003\000\002\021\003\000\002\017\014" +
    "\000\002\025\004\000\002\025\004\000\002\025\005\000" +
    "\002\015\011\000\002\016\013\000\002\020\007\000\002" +
    "\030\004\000\002\030\003\000\002\031\007\000\002\031" +
    "\007\000\002\024\003\000\002\024\003\000\002\065\002" +
    "\000\002\026\007\000\002\022\011\000\002\023\012\000" +
    "\002\014\007\000\002\014\007\000\002\057\005\000\002" +
    "\057\007\000\002\006\006\000\002\006\010\000\002\036" +
    "\015\000\002\036\017\000\002\036\015\000\002\037\005" +
    "\000\002\037\007\000\002\027\003\000\002\027\005\000" +
    "\002\064\010\000\002\064\005\000\002\064\003\000\002" +
    "\007\010\000\002\007\006\000\002\007\010\000\002\007" +
    "\013\000\002\007\011\000\002\007\014\000\002\010\005" +
    "\000\002\010\005\000\002\011\003\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\033" +
    "\004\000\002\032\004\000\002\046\004\000\002\046\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01bc\000\006\112\005\116\004\001\002\000\004\011" +
    "\u01b6\001\002\000\004\116\013\001\002\000\010\002\000" +
    "\112\005\116\004\001\002\000\004\002\011\001\002\000" +
    "\010\002\ufff8\112\ufff8\116\ufff8\001\002\000\004\002\001" +
    "\001\002\000\010\002\ufff7\112\ufff7\116\ufff7\001\002\000" +
    "\004\011\014\001\002\000\006\063\015\113\016\001\002" +
    "\000\026\011\033\053\021\054\032\055\026\056\041\057" +
    "\031\060\027\110\030\111\034\112\023\001\002\000\004" +
    "\011\017\001\002\000\004\063\020\001\002\000\026\011" +
    "\033\053\021\054\032\055\026\056\041\057\031\060\027" +
    "\110\030\111\034\112\023\001\002\000\012\011\uff68\020" +
    "\uff68\061\uff68\067\uff68\001\002\000\030\011\033\053\021" +
    "\054\032\055\026\056\041\057\031\060\027\064\u01b2\110" +
    "\030\111\034\112\023\001\002\000\020\011\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\001\002\000" +
    "\030\011\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\064\uffb2\110\uffb2\111\uffb2\112\uffb2\001\002\000" +
    "\030\011\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\064\uffef\110\uffef\111\uffef\112\uffef\001\002\000" +
    "\012\011\uff65\020\uff65\061\uff65\067\uff65\001\002\000\006" +
    "\011\u019c\115\u019d\001\002\000\020\011\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\001\002\000\012" +
    "\011\uff69\020\uff69\061\uff69\067\uff69\001\002\000\012\011" +
    "\uff67\020\uff67\061\uff67\067\uff67\001\002\000\006\011\uff64" +
    "\061\u0196\001\002\000\020\011\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\001\002\000\030\011\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\064" +
    "\ufff2\110\ufff2\111\ufff2\112\ufff2\001\002\000\020\011\u0168" +
    "\053\021\054\032\055\026\056\041\057\031\060\u016a\001" +
    "\002\000\030\011\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\064\ufff0\110\ufff0\111\ufff0\112\ufff0\001" +
    "\002\000\004\011\042\001\002\000\012\011\uff66\020\uff66" +
    "\061\uff66\067\uff66\001\002\000\004\061\043\001\002\000" +
    "\020\011\046\053\021\054\032\055\026\056\041\057\031" +
    "\062\045\001\002\000\006\062\u0162\073\u0161\001\002\000" +
    "\004\063\051\001\002\000\012\011\uff64\020\uff64\061\uff64" +
    "\067\uff64\001\002\000\004\011\050\001\002\000\006\062" +
    "\uffb0\073\uffb0\001\002\000\056\003\076\011\073\027\120" +
    "\030\070\032\062\033\077\034\063\035\106\036\057\052" +
    "\117\053\021\054\032\055\026\056\041\057\031\071\116" +
    "\072\053\074\111\075\110\105\074\114\072\117\061\001" +
    "\002\000\060\003\uffdf\011\uffdf\027\uffdf\030\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\064\uffdf\071\uffdf\072\uffdf" +
    "\074\uffdf\075\uffdf\105\uffdf\114\uffdf\117\uffdf\001\002\000" +
    "\004\011\uff6a\001\002\000\060\003\uffea\011\uffea\027\uffea" +
    "\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\064\uffea" +
    "\071\uffea\072\uffea\074\uffea\075\uffea\105\uffea\114\uffea\117" +
    "\uffea\001\002\000\060\003\uffe6\011\uffe6\027\uffe6\030\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\064\uffe6\071\uffe6" +
    "\072\uffe6\074\uffe6\075\uffe6\105\uffe6\114\uffe6\117\uffe6\001" +
    "\002\000\060\003\uffe3\011\uffe3\027\uffe3\030\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\064\uffe3\071\uffe3\072\uffe3" +
    "\074\uffe3\075\uffe3\105\uffe3\114\uffe3\117\uffe3\001\002\000" +
    "\004\065\u0160\001\002\000\060\003\uffe7\011\uffe7\027\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\064\uffe7" +
    "\071\uffe7\072\uffe7\074\uffe7\075\uffe7\105\uffe7\114\uffe7\117" +
    "\uffe7\001\002\000\004\061\u015c\001\002\000\004\061\u0140" +
    "\001\002\000\030\004\130\005\132\006\137\007\135\010" +
    "\131\011\140\013\127\044\141\061\134\076\133\107\136" +
    "\001\002\000\060\003\076\011\073\027\120\030\070\032" +
    "\062\033\077\034\063\035\106\036\057\052\117\053\021" +
    "\054\032\055\026\056\041\057\031\064\u012f\071\116\072" +
    "\053\074\111\075\110\105\074\114\072\117\061\001\002" +
    "\000\060\003\uffe1\011\uffe1\027\uffe1\030\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\064\uffe1\071\uffe1\072\uffe1\074" +
    "\uffe1\075\uffe1\105\uffe1\114\uffe1\117\uffe1\001\002\000\060" +
    "\003\uffe0\011\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\064\uffe0\071\uffe0\072\uffe0\074\uffe0\075" +
    "\uffe0\105\uffe0\114\uffe0\117\uffe0\001\002\000\060\003\uffe4" +
    "\011\uffe4\027\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\064\uffe4\071\uffe4\072\uffe4\074\uffe4\075\uffe4\105" +
    "\uffe4\114\uffe4\117\uffe4\001\002\000\004\061\u0122\001\002" +
    "\000\060\003\ufffe\011\ufffe\027\ufffe\030\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\064\ufffe\071\ufffe\072\ufffe\074" +
    "\ufffe\075\ufffe\105\ufffe\114\ufffe\117\ufffe\001\002\000\004" +
    "\077\u011d\001\002\000\020\011\uff64\026\351\050\354\051" +
    "\353\061\352\067\355\077\356\001\002\000\032\004\130" +
    "\005\132\006\137\007\135\010\131\011\140\013\127\044" +
    "\141\061\134\065\346\076\133\107\136\001\002\000\060" +
    "\003\uffe5\011\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\064\uffe5\071\uffe5\072\uffe5\074\uffe5\075" +
    "\uffe5\105\uffe5\114\uffe5\117\uffe5\001\002\000\062\003\uffdd" +
    "\011\uffdd\027\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\064\uffdd\065\345\071\uffdd\072\uffdd\074\uffdd\075" +
    "\uffdd\105\uffdd\114\uffdd\117\uffdd\001\002\000\004\065\344" +
    "\001\002\000\060\003\uff95\011\uff95\027\uff95\030\uff95\032" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\052\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\064\uff95\071\uff95\072" +
    "\uff95\074\uff95\075\uff95\105\uff95\114\uff95\117\uff95\001\002" +
    "\000\060\003\uffe2\011\uffe2\027\uffe2\030\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\064\uffe2\071\uffe2\072\uffe2\074" +
    "\uffe2\075\uffe2\105\uffe2\114\uffe2\117\uffe2\001\002\000\004" +
    "\011\311\001\002\000\060\003\uffeb\011\uffeb\027\uffeb\030" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\064\uffeb\071" +
    "\uffeb\072\uffeb\074\uffeb\075\uffeb\105\uffeb\114\uffeb\117\uffeb" +
    "\001\002\000\060\003\uffe8\011\uffe8\027\uffe8\030\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\064\uffe8\071\uffe8\072" +
    "\uffe8\074\uffe8\075\uffe8\105\uffe8\114\uffe8\117\uffe8\001\002" +
    "\000\004\011\304\001\002\000\004\061\276\001\002\000" +
    "\060\003\uffe9\011\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\064\uffe9\071\uffe9\072\uffe9\074\uffe9" +
    "\075\uffe9\105\uffe9\114\uffe9\117\uffe9\001\002\000\004\021" +
    "\264\001\002\000\004\011\255\001\002\000\060\003\uffec" +
    "\011\uffec\027\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\064\uffec\071\uffec\072\uffec\074\uffec\075\uffec\105" +
    "\uffec\114\uffec\117\uffec\001\002\000\060\003\uff96\011\uff96" +
    "\027\uff96\030\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96" +
    "\064\uff96\071\uff96\072\uff96\074\uff96\075\uff96\105\uff96\114" +
    "\uff96\117\uff96\001\002\000\060\003\uffee\011\uffee\027\uffee" +
    "\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\052" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\064\uffee" +
    "\071\uffee\072\uffee\074\uffee\075\uffee\105\uffee\114\uffee\117" +
    "\uffee\001\002\000\060\003\uffed\011\uffed\027\uffed\030\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\064\uffed\071\uffed" +
    "\072\uffed\074\uffed\075\uffed\105\uffed\114\uffed\117\uffed\001" +
    "\002\000\004\011\uff6b\001\002\000\004\061\251\001\002" +
    "\000\004\063\121\001\002\000\056\003\076\011\073\027" +
    "\120\030\070\032\062\033\077\034\063\035\106\036\057" +
    "\052\117\053\021\054\032\055\026\056\041\057\031\071" +
    "\116\072\053\074\111\075\110\105\074\114\072\117\061" +
    "\001\002\000\060\003\076\011\073\027\120\030\070\032" +
    "\062\033\077\034\063\035\106\036\057\052\117\053\021" +
    "\054\032\055\026\056\041\057\031\064\123\071\116\072" +
    "\053\074\111\075\110\105\074\114\072\117\061\001\002" +
    "\000\004\035\125\001\002\000\060\003\uffff\011\uffff\027" +
    "\uffff\030\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\064" +
    "\uffff\071\uffff\072\uffff\074\uffff\075\uffff\105\uffff\114\uffff" +
    "\117\uffff\001\002\000\004\061\126\001\002\000\030\004" +
    "\130\005\132\006\137\007\135\010\131\011\140\013\127" +
    "\044\141\061\134\076\133\107\136\001\002\000\030\004" +
    "\130\005\132\006\137\007\135\010\131\011\140\013\127" +
    "\044\141\061\134\076\133\107\136\001\002\000\054\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\062\uffc8\063\uffc8\065\uffc8\070\uffc8" +
    "\073\uffc8\001\002\000\054\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\062" +
    "\uffc9\063\uffc9\065\uffc9\070\uffc9\073\uffc9\001\002\000\054" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\062\uffc6\063\uffc6\065\uffc6\070" +
    "\uffc6\073\uffc6\001\002\000\016\011\046\053\021\054\032" +
    "\055\026\056\041\057\031\001\002\000\030\004\130\005" +
    "\132\006\137\007\135\010\131\011\140\013\127\044\141" +
    "\061\134\076\133\107\136\001\002\000\054\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\062\uffca\063\uffca\065\uffca\070\uffca\073\uffca" +
    "\001\002\000\004\061\236\001\002\000\054\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\062\uffc7\063\uffc7\065\uffc7\070\uffc7\073\uffc7" +
    "\001\002\000\062\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\061\205\062" +
    "\uffc5\063\uffc5\065\uffc5\067\206\070\uffc5\073\uffc5\077\207" +
    "\001\002\000\030\004\130\005\132\006\137\007\135\010" +
    "\131\011\140\013\127\044\141\061\134\076\133\107\136" +
    "\001\002\000\054\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\062\uffc1\063" +
    "\uffc1\065\uffc1\070\uffc1\073\uffc1\001\002\000\042\012\152" +
    "\013\144\014\160\015\155\016\153\017\147\020\150\021" +
    "\156\022\157\023\161\024\162\025\151\041\163\042\145" +
    "\043\146\062\154\001\002\000\030\004\130\005\132\006" +
    "\137\007\135\010\131\011\140\013\127\044\141\061\134" +
    "\076\133\107\136\001\002\000\030\004\130\005\132\006" +
    "\137\007\135\010\131\011\140\013\127\044\141\061\134" +
    "\076\133\107\136\001\002\000\030\004\130\005\132\006" +
    "\137\007\135\010\131\011\140\013\127\044\141\061\134" +
    "\076\133\107\136\001\002\000\030\004\130\005\132\006" +
    "\137\007\135\010\131\011\140\013\127\044\141\061\134" +
    "\076\133\107\136\001\002\000\030\004\130\005\132\006" +
    "\137\007\135\010\131\011\140\013\127\044\141\061\134" +
    "\076\133\107\136\001\002\000\030\004\130\005\132\006" +
    "\137\007\135\010\131\011\140\013\127\044\141\061\134" +
    "\076\133\107\136\001\002\000\030\004\130\005\132\006" +
    "\137\007\135\010\131\011\140\013\127\044\141\061\134" +
    "\076\133\107\136\001\002\000\030\004\130\005\132\006" +
    "\137\007\135\010\131\011\140\013\127\044\141\061\134" +
    "\076\133\107\136\001\002\000\004\065\173\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\054\012\152\013\144\014\160\015\155\016\153\017\147" +
    "\020\150\021\156\022\157\023\161\024\162\025\151\040" +
    "\uffcd\041\uffcd\042\145\043\146\062\uffcd\063\uffcd\065\uffcd" +
    "\070\uffcd\073\uffcd\001\002\000\054\012\152\013\144\014" +
    "\160\015\155\016\153\017\147\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\062\uffd4\063\uffd4\065\uffd4\070\uffd4\073\uffd4\001\002" +
    "\000\054\012\152\013\144\014\160\015\155\016\153\017" +
    "\147\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\062\uffd1\063\uffd1\065" +
    "\uffd1\070\uffd1\073\uffd1\001\002\000\054\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\153\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\062\uffd7\063\uffd7\065\uffd7\070\uffd7\073\uffd7\001" +
    "\002\000\054\012\152\013\144\014\160\015\155\016\153" +
    "\017\147\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\062\uffcf\063\uffcf" +
    "\065\uffcf\070\uffcf\073\uffcf\001\002\000\054\012\152\013" +
    "\144\014\160\015\155\016\153\017\147\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\062\uffd2\063\uffd2\065\uffd2\070\uffd2\073\uffd2" +
    "\001\002\000\054\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\153\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\062\uffd8\063" +
    "\uffd8\065\uffd8\070\uffd8\073\uffd8\001\002\000\060\003\uff8f" +
    "\011\uff8f\027\uff8f\030\uff8f\032\uff8f\033\uff8f\034\uff8f\035" +
    "\uff8f\036\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f" +
    "\057\uff8f\064\uff8f\071\uff8f\072\uff8f\074\uff8f\075\uff8f\105" +
    "\uff8f\114\uff8f\117\uff8f\001\002\000\052\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\062\uffd5\063\uffd5\065\uffd5\070\uffd5\073\uffd5\001\002\000" +
    "\054\012\uffda\013\uffda\014\160\015\155\016\153\017\147" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\062\uffda\063\uffda\065\uffda" +
    "\070\uffda\073\uffda\001\002\000\054\012\152\013\144\014" +
    "\160\015\155\016\153\017\147\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\062\uffd3\063\uffd3\065\uffd3\070\uffd3\073\uffd3\001\002" +
    "\000\054\012\152\013\144\014\160\015\155\016\153\017" +
    "\147\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\062\uffd0\063\uffd0\065" +
    "\uffd0\070\uffd0\073\uffd0\001\002\000\054\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\153\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\062\uffd6\063\uffd6\065\uffd6\070\uffd6\073\uffd6\001" +
    "\002\000\054\012\152\013\144\014\160\015\155\016\153" +
    "\017\147\020\150\021\156\022\157\023\161\024\162\025" +
    "\151\040\uffcc\041\uffcc\042\uffcc\043\uffcc\062\uffcc\063\uffcc" +
    "\065\uffcc\070\uffcc\073\uffcc\001\002\000\054\012\152\013" +
    "\144\014\160\015\155\016\153\017\147\020\150\021\156" +
    "\022\157\023\161\024\162\025\151\040\uffce\041\uffce\042" +
    "\uffce\043\146\062\uffce\063\uffce\065\uffce\070\uffce\073\uffce" +
    "\001\002\000\054\012\uffd9\013\uffd9\014\160\015\155\016" +
    "\153\017\147\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\062\uffd9\063" +
    "\uffd9\065\uffd9\070\uffd9\073\uffd9\001\002\000\054\012\152" +
    "\013\144\014\160\015\155\016\153\017\147\020\150\021" +
    "\156\022\157\023\161\024\162\025\151\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\062\uffdb\063\uffdb\065\uffdb\070\uffdb\073" +
    "\uffdb\001\002\000\032\004\130\005\132\006\137\007\135" +
    "\010\131\011\140\013\127\044\141\061\134\062\uffae\076" +
    "\133\107\136\001\002\000\030\004\130\005\132\006\137" +
    "\007\135\010\131\011\140\013\127\044\141\061\134\076" +
    "\133\107\136\001\002\000\056\011\210\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\062\uffaa\063\uffaa\065\uffaa\070\uffaa\073\uffaa\001" +
    "\002\000\060\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\061\212\062\uffa6" +
    "\063\uffa6\065\uffa6\070\uffa6\073\uffa6\077\213\001\002\000" +
    "\054\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\062\uffad\063\uffad\065\uffad" +
    "\070\uffad\073\uffad\001\002\000\032\004\130\005\132\006" +
    "\137\007\135\010\131\011\140\013\127\044\141\061\134" +
    "\062\uffae\076\133\107\136\001\002\000\056\011\210\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\062\uffaa\063\uffaa\065\uffaa\070\uffaa" +
    "\073\uffaa\001\002\000\054\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\062" +
    "\uffa7\063\uffa7\065\uffa7\070\uffa7\073\uffa7\001\002\000\006" +
    "\062\uffaf\073\223\001\002\000\044\012\152\013\144\014" +
    "\160\015\155\016\153\017\147\020\150\021\156\022\157" +
    "\023\161\024\162\025\151\041\163\042\145\043\146\062" +
    "\uff9c\073\uff9c\001\002\000\004\062\220\001\002\000\056" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\062\uffa8\063\uffa8\065\uffa8\070" +
    "\uffa8\073\uffa8\077\221\001\002\000\056\011\210\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\062\uffaa\063\uffaa\065\uffaa\070\uffaa\073" +
    "\uffaa\001\002\000\054\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\062\uffa9" +
    "\063\uffa9\065\uffa9\070\uffa9\073\uffa9\001\002\000\030\004" +
    "\130\005\132\006\137\007\135\010\131\011\140\013\127" +
    "\044\141\061\134\076\133\107\136\001\002\000\044\012" +
    "\152\013\144\014\160\015\155\016\153\017\147\020\150" +
    "\021\156\022\157\023\161\024\162\025\151\041\163\042" +
    "\145\043\146\062\uff9d\073\uff9d\001\002\000\042\012\152" +
    "\013\144\014\160\015\155\016\153\017\147\020\150\021" +
    "\156\022\157\023\161\024\162\025\151\041\163\042\145" +
    "\043\146\070\226\001\002\000\056\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\062\uffc4\063\uffc4\065\uffc4\067\227\070\uffc4\073\uffc4" +
    "\001\002\000\030\004\130\005\132\006\137\007\135\010" +
    "\131\011\140\013\127\044\141\061\134\076\133\107\136" +
    "\001\002\000\042\012\152\013\144\014\160\015\155\016" +
    "\153\017\147\020\150\021\156\022\157\023\161\024\162" +
    "\025\151\041\163\042\145\043\146\070\231\001\002\000" +
    "\054\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\062\uffc3\063\uffc3\065\uffc3" +
    "\070\uffc3\073\uffc3\001\002\000\004\062\233\001\002\000" +
    "\056\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\062\uffab\063\uffab\065\uffab" +
    "\070\uffab\073\uffab\077\234\001\002\000\056\011\210\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\062\uffaa\063\uffaa\065\uffaa\070\uffaa" +
    "\073\uffaa\001\002\000\054\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\040\uffac\041\uffac\042\uffac\043\uffac\062" +
    "\uffac\063\uffac\065\uffac\070\uffac\073\uffac\001\002\000\030" +
    "\004\130\005\132\006\137\007\135\010\131\011\140\013" +
    "\127\044\141\061\134\076\133\107\136\001\002\000\042" +
    "\012\152\013\144\014\160\015\155\016\153\017\147\020" +
    "\150\021\156\022\157\023\161\024\162\025\151\041\163" +
    "\042\145\043\146\062\240\001\002\000\054\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\062\uffc2\063\uffc2\065\uffc2\070\uffc2\073\uffc2" +
    "\001\002\000\042\012\152\013\144\014\160\015\155\016" +
    "\153\017\147\020\150\021\156\022\157\023\161\024\162" +
    "\025\151\041\163\042\145\043\146\062\242\001\002\000" +
    "\054\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\062\uffcb\063\uffcb\065\uffcb" +
    "\070\uffcb\073\uffcb\001\002\000\004\061\244\001\002\000" +
    "\032\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\062\246\076\133\107\136\001" +
    "\002\000\006\062\247\073\223\001\002\000\054\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\062\uffbf\063\uffbf\065\uffbf\070\uffbf\073" +
    "\uffbf\001\002\000\054\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\062\uffc0" +
    "\063\uffc0\065\uffc0\070\uffc0\073\uffc0\001\002\000\054\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\062\uffdc\063\uffdc\065\uffdc\070\uffdc" +
    "\073\uffdc\001\002\000\030\004\130\005\132\006\137\007" +
    "\135\010\131\011\140\013\127\044\141\061\134\076\133" +
    "\107\136\001\002\000\006\062\253\073\223\001\002\000" +
    "\004\065\254\001\002\000\060\003\uff83\011\uff83\027\uff83" +
    "\030\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\052" +
    "\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\064\uff83" +
    "\071\uff83\072\uff83\074\uff83\075\uff83\105\uff83\114\uff83\117" +
    "\uff83\001\002\000\004\061\256\001\002\000\032\004\130" +
    "\005\132\006\137\007\135\010\131\011\140\013\127\044" +
    "\141\061\134\062\260\076\133\107\136\001\002\000\006" +
    "\062\262\073\223\001\002\000\004\065\261\001\002\000" +
    "\060\003\uff9e\011\uff9e\027\uff9e\030\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\064\uff9e\071\uff9e\072\uff9e\074\uff9e" +
    "\075\uff9e\105\uff9e\114\uff9e\117\uff9e\001\002\000\004\065" +
    "\263\001\002\000\060\003\uff9f\011\uff9f\027\uff9f\030\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\064\uff9f\071\uff9f" +
    "\072\uff9f\074\uff9f\075\uff9f\105\uff9f\114\uff9f\117\uff9f\001" +
    "\002\000\016\011\046\053\021\054\032\055\026\056\041" +
    "\057\031\001\002\000\004\020\266\001\002\000\004\011" +
    "\267\001\002\000\004\026\270\001\002\000\004\076\271" +
    "\001\002\000\004\075\272\001\002\000\004\061\273\001" +
    "\002\000\004\062\274\001\002\000\004\065\275\001\002" +
    "\000\060\003\uff7b\011\uff7b\027\uff7b\030\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\035\uff7b\036\uff7b\052\uff7b\053\uff7b\054\uff7b" +
    "\055\uff7b\056\uff7b\057\uff7b\064\uff7b\071\uff7b\072\uff7b\074" +
    "\uff7b\075\uff7b\105\uff7b\114\uff7b\117\uff7b\001\002\000\030" +
    "\004\130\005\132\006\137\007\135\010\131\011\140\013" +
    "\127\044\141\061\134\076\133\107\136\001\002\000\042" +
    "\012\152\013\144\014\160\015\155\016\153\017\147\020" +
    "\150\021\156\022\157\023\161\024\162\025\151\041\163" +
    "\042\145\043\146\062\300\001\002\000\004\063\301\001" +
    "\002\000\056\003\076\011\073\027\120\030\070\032\062" +
    "\033\077\034\063\035\106\036\057\052\117\053\021\054" +
    "\032\055\026\056\041\057\031\071\116\072\053\074\111" +
    "\075\110\105\074\114\072\117\061\001\002\000\060\003" +
    "\076\011\073\027\120\030\070\032\062\033\077\034\063" +
    "\035\106\036\057\052\117\053\021\054\032\055\026\056" +
    "\041\057\031\064\303\071\116\072\053\074\111\075\110" +
    "\105\074\114\072\117\061\001\002\000\060\003\uff90\011" +
    "\uff90\027\uff90\030\uff90\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057" +
    "\uff90\064\uff90\071\uff90\072\uff90\074\uff90\075\uff90\105\uff90" +
    "\114\uff90\117\uff90\001\002\000\006\026\305\065\306\001" +
    "\002\000\030\004\130\005\132\006\137\007\135\010\131" +
    "\011\140\013\127\044\141\061\134\076\133\107\136\001" +
    "\002\000\104\003\uff81\004\uff81\005\uff81\006\uff81\007\uff81" +
    "\010\uff81\011\uff81\013\uff81\027\uff81\030\uff81\032\uff81\033" +
    "\uff81\034\uff81\035\uff81\036\uff81\044\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\057\uff81\061\uff81\064\uff81\071" +
    "\uff81\072\uff81\074\uff81\075\uff81\076\uff81\105\uff81\107\uff81" +
    "\114\uff81\117\uff81\001\002\000\042\012\152\013\144\014" +
    "\160\015\155\016\153\017\147\020\150\021\156\022\157" +
    "\023\161\024\162\025\151\041\163\042\145\043\146\065" +
    "\310\001\002\000\104\003\uff80\004\uff80\005\uff80\006\uff80" +
    "\007\uff80\010\uff80\011\uff80\013\uff80\027\uff80\030\uff80\032" +
    "\uff80\033\uff80\034\uff80\035\uff80\036\uff80\044\uff80\052\uff80" +
    "\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\061\uff80\064" +
    "\uff80\071\uff80\072\uff80\074\uff80\075\uff80\076\uff80\105\uff80" +
    "\107\uff80\114\uff80\117\uff80\001\002\000\004\066\312\001" +
    "\002\000\016\011\046\053\021\054\032\055\026\056\041" +
    "\057\031\001\002\000\004\067\314\001\002\000\004\070" +
    "\315\001\002\000\006\026\316\067\317\001\002\000\004" +
    "\067\340\001\002\000\004\070\320\001\002\000\004\026" +
    "\321\001\002\000\004\067\322\001\002\000\004\067\324" +
    "\001\002\000\006\070\332\073\333\001\002\000\030\004" +
    "\130\005\132\006\137\007\135\010\131\011\140\013\127" +
    "\044\141\061\134\076\133\107\136\001\002\000\006\070" +
    "\327\073\330\001\002\000\044\012\152\013\144\014\160" +
    "\015\155\016\153\017\147\020\150\021\156\022\157\023" +
    "\161\024\162\025\151\041\163\042\145\043\146\070\uff78" +
    "\073\uff78\001\002\000\006\070\uff7a\073\uff7a\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\044\012\152\013\144\014\160\015\155\016\153\017\147" +
    "\020\150\021\156\022\157\023\161\024\162\025\151\041" +
    "\163\042\145\043\146\070\uff77\073\uff77\001\002\000\004" +
    "\065\337\001\002\000\004\067\334\001\002\000\030\004" +
    "\130\005\132\006\137\007\135\010\131\011\140\013\127" +
    "\044\141\061\134\076\133\107\136\001\002\000\006\070" +
    "\336\073\330\001\002\000\006\070\uff79\073\uff79\001\002" +
    "\000\060\003\uff7c\011\uff7c\027\uff7c\030\uff7c\032\uff7c\033" +
    "\uff7c\034\uff7c\035\uff7c\036\uff7c\052\uff7c\053\uff7c\054\uff7c" +
    "\055\uff7c\056\uff7c\057\uff7c\064\uff7c\071\uff7c\072\uff7c\074" +
    "\uff7c\075\uff7c\105\uff7c\114\uff7c\117\uff7c\001\002\000\030" +
    "\004\130\005\132\006\137\007\135\010\131\011\140\013" +
    "\127\044\141\061\134\076\133\107\136\001\002\000\006" +
    "\070\342\073\330\001\002\000\004\065\343\001\002\000" +
    "\060\003\uff7d\011\uff7d\027\uff7d\030\uff7d\032\uff7d\033\uff7d" +
    "\034\uff7d\035\uff7d\036\uff7d\052\uff7d\053\uff7d\054\uff7d\055" +
    "\uff7d\056\uff7d\057\uff7d\064\uff7d\071\uff7d\072\uff7d\074\uff7d" +
    "\075\uff7d\105\uff7d\114\uff7d\117\uff7d\001\002\000\060\003" +
    "\uff63\011\uff63\027\uff63\030\uff63\032\uff63\033\uff63\034\uff63" +
    "\035\uff63\036\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056" +
    "\uff63\057\uff63\064\uff63\071\uff63\072\uff63\074\uff63\075\uff63" +
    "\105\uff63\114\uff63\117\uff63\001\002\000\060\003\uffde\011" +
    "\uffde\027\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\064\uffde\071\uffde\072\uffde\074\uffde\075\uffde\105\uffde" +
    "\114\uffde\117\uffde\001\002\000\060\003\uff61\011\uff61\027" +
    "\uff61\030\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61" +
    "\052\uff61\053\uff61\054\uff61\055\uff61\056\uff61\057\uff61\064" +
    "\uff61\071\uff61\072\uff61\074\uff61\075\uff61\105\uff61\114\uff61" +
    "\117\uff61\001\002\000\042\012\152\013\144\014\160\015" +
    "\155\016\153\017\147\020\150\021\156\022\157\023\161" +
    "\024\162\025\151\041\163\042\145\043\146\065\350\001" +
    "\002\000\060\003\uff60\011\uff60\027\uff60\030\uff60\032\uff60" +
    "\033\uff60\034\uff60\035\uff60\036\uff60\052\uff60\053\uff60\054" +
    "\uff60\055\uff60\056\uff60\057\uff60\064\uff60\071\uff60\072\uff60" +
    "\074\uff60\075\uff60\105\uff60\114\uff60\117\uff60\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\032\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\062\uffae\076\133\107\136\001" +
    "\002\000\004\065\u0113\001\002\000\004\065\u0112\001\002" +
    "\000\030\004\130\005\132\006\137\007\135\010\131\011" +
    "\140\013\127\044\141\061\134\076\133\107\136\001\002" +
    "\000\004\011\357\001\002\000\010\026\uff74\061\365\077" +
    "\366\001\002\000\060\003\uffa5\011\uffa5\027\uffa5\030\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\064\uffa5\071\uffa5" +
    "\072\uffa5\074\uffa5\075\uffa5\105\uffa5\114\uffa5\117\uffa5\001" +
    "\002\000\004\026\362\001\002\000\030\004\130\005\132" +
    "\006\137\007\135\010\131\011\140\013\127\044\141\061" +
    "\134\076\133\107\136\001\002\000\042\012\152\013\144" +
    "\014\160\015\155\016\153\017\147\020\150\021\156\022" +
    "\157\023\161\024\162\025\151\041\163\042\145\043\146" +
    "\065\364\001\002\000\104\003\uff71\004\uff71\005\uff71\006" +
    "\uff71\007\uff71\010\uff71\011\uff71\013\uff71\027\uff71\030\uff71" +
    "\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\044\uff71\052" +
    "\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\061\uff71" +
    "\064\uff71\071\uff71\072\uff71\074\uff71\075\uff71\076\uff71\105" +
    "\uff71\107\uff71\114\uff71\117\uff71\001\002\000\032\004\130" +
    "\005\132\006\137\007\135\010\131\011\140\013\127\044" +
    "\141\061\134\062\uffae\076\133\107\136\001\002\000\004" +
    "\011\367\001\002\000\010\026\uff74\061\372\077\373\001" +
    "\002\000\060\003\uffa1\011\uffa1\027\uffa1\030\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\064\uffa1\071\uffa1\072\uffa1" +
    "\074\uffa1\075\uffa1\105\uffa1\114\uffa1\117\uffa1\001\002\000" +
    "\004\026\uff75\001\002\000\032\004\130\005\132\006\137" +
    "\007\135\010\131\011\140\013\127\044\141\061\134\062" +
    "\uffae\076\133\107\136\001\002\000\004\011\357\001\002" +
    "\000\004\062\375\001\002\000\006\065\376\077\377\001" +
    "\002\000\060\003\uffa3\011\uffa3\027\uffa3\030\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\057\uffa3\064\uffa3\071\uffa3\072\uffa3" +
    "\074\uffa3\075\uffa3\105\uffa3\114\uffa3\117\uffa3\001\002\000" +
    "\004\011\357\001\002\000\060\003\uffa4\011\uffa4\027\uffa4" +
    "\030\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\064\uffa4" +
    "\071\uffa4\072\uffa4\074\uffa4\075\uffa4\105\uffa4\114\uffa4\117" +
    "\uffa4\001\002\000\004\026\uff76\001\002\000\004\062\u0103" +
    "\001\002\000\006\065\u0104\077\u0105\001\002\000\060\003" +
    "\uffa0\011\uffa0\027\uffa0\030\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056" +
    "\uffa0\057\uffa0\064\uffa0\071\uffa0\072\uffa0\074\uffa0\075\uffa0" +
    "\105\uffa0\114\uffa0\117\uffa0\001\002\000\004\011\367\001" +
    "\002\000\060\003\uffa2\011\uffa2\027\uffa2\030\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\057\uffa2\064\uffa2\071\uffa2\072\uffa2" +
    "\074\uffa2\075\uffa2\105\uffa2\114\uffa2\117\uffa2\001\002\000" +
    "\042\012\152\013\144\014\160\015\155\016\153\017\147" +
    "\020\150\021\156\022\157\023\161\024\162\025\151\041" +
    "\163\042\145\043\146\070\u0108\001\002\000\006\026\u0109" +
    "\067\u010a\001\002\000\030\004\130\005\132\006\137\007" +
    "\135\010\131\011\140\013\127\044\141\061\134\076\133" +
    "\107\136\001\002\000\030\004\130\005\132\006\137\007" +
    "\135\010\131\011\140\013\127\044\141\061\134\076\133" +
    "\107\136\001\002\000\042\012\152\013\144\014\160\015" +
    "\155\016\153\017\147\020\150\021\156\022\157\023\161" +
    "\024\162\025\151\041\163\042\145\043\146\070\u010c\001" +
    "\002\000\004\026\u010d\001\002\000\030\004\130\005\132" +
    "\006\137\007\135\010\131\011\140\013\127\044\141\061" +
    "\134\076\133\107\136\001\002\000\042\012\152\013\144" +
    "\014\160\015\155\016\153\017\147\020\150\021\156\022" +
    "\157\023\161\024\162\025\151\041\163\042\145\043\146" +
    "\065\u010f\001\002\000\104\003\uff6e\004\uff6e\005\uff6e\006" +
    "\uff6e\007\uff6e\010\uff6e\011\uff6e\013\uff6e\027\uff6e\030\uff6e" +
    "\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\044\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\061\uff6e" +
    "\064\uff6e\071\uff6e\072\uff6e\074\uff6e\075\uff6e\076\uff6e\105" +
    "\uff6e\107\uff6e\114\uff6e\117\uff6e\001\002\000\042\012\152" +
    "\013\144\014\160\015\155\016\153\017\147\020\150\021" +
    "\156\022\157\023\161\024\162\025\151\041\163\042\145" +
    "\043\146\065\u0111\001\002\000\104\003\uff6f\004\uff6f\005" +
    "\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\013\uff6f\027\uff6f" +
    "\030\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\044" +
    "\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f" +
    "\061\uff6f\064\uff6f\071\uff6f\072\uff6f\074\uff6f\075\uff6f\076" +
    "\uff6f\105\uff6f\107\uff6f\114\uff6f\117\uff6f\001\002\000\060" +
    "\003\uff6d\011\uff6d\027\uff6d\030\uff6d\032\uff6d\033\uff6d\034" +
    "\uff6d\035\uff6d\036\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d" +
    "\056\uff6d\057\uff6d\064\uff6d\071\uff6d\072\uff6d\074\uff6d\075" +
    "\uff6d\105\uff6d\114\uff6d\117\uff6d\001\002\000\060\003\uff6c" +
    "\011\uff6c\027\uff6c\030\uff6c\032\uff6c\033\uff6c\034\uff6c\035" +
    "\uff6c\036\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c" +
    "\057\uff6c\064\uff6c\071\uff6c\072\uff6c\074\uff6c\075\uff6c\105" +
    "\uff6c\114\uff6c\117\uff6c\001\002\000\004\062\u0115\001\002" +
    "\000\006\065\376\077\u0116\001\002\000\004\011\357\001" +
    "\002\000\004\026\u0118\001\002\000\030\004\130\005\132" +
    "\006\137\007\135\010\131\011\140\013\127\044\141\061" +
    "\134\076\133\107\136\001\002\000\042\012\152\013\144" +
    "\014\160\015\155\016\153\017\147\020\150\021\156\022" +
    "\157\023\161\024\162\025\151\041\163\042\145\043\146" +
    "\065\u011a\001\002\000\104\003\uff70\004\uff70\005\uff70\006" +
    "\uff70\007\uff70\010\uff70\011\uff70\013\uff70\027\uff70\030\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\044\uff70\052" +
    "\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70\061\uff70" +
    "\064\uff70\071\uff70\072\uff70\074\uff70\075\uff70\076\uff70\105" +
    "\uff70\107\uff70\114\uff70\117\uff70\001\002\000\042\012\152" +
    "\013\144\014\160\015\155\016\153\017\147\020\150\021" +
    "\156\022\157\023\161\024\162\025\151\041\163\042\145" +
    "\043\146\065\u011c\001\002\000\104\003\uff72\004\uff72\005" +
    "\uff72\006\uff72\007\uff72\010\uff72\011\uff72\013\uff72\027\uff72" +
    "\030\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\044" +
    "\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72" +
    "\061\uff72\064\uff72\071\uff72\072\uff72\074\uff72\075\uff72\076" +
    "\uff72\105\uff72\107\uff72\114\uff72\117\uff72\001\002\000\004" +
    "\011\u011e\001\002\000\004\026\u011f\001\002\000\030\004" +
    "\130\005\132\006\137\007\135\010\131\011\140\013\127" +
    "\044\141\061\134\076\133\107\136\001\002\000\042\012" +
    "\152\013\144\014\160\015\155\016\153\017\147\020\150" +
    "\021\156\022\157\023\161\024\162\025\151\041\163\042" +
    "\145\043\146\065\u0121\001\002\000\104\003\uff73\004\uff73" +
    "\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\013\uff73\027" +
    "\uff73\030\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73" +
    "\044\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057" +
    "\uff73\061\uff73\064\uff73\071\uff73\072\uff73\074\uff73\075\uff73" +
    "\076\uff73\105\uff73\107\uff73\114\uff73\117\uff73\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\042\012\152\013\144\014\160\015\155\016\153\017\147" +
    "\020\150\021\156\022\157\023\161\024\162\025\151\041" +
    "\163\042\145\043\146\062\u0124\001\002\000\004\063\u0125" +
    "\001\002\000\056\003\076\011\073\027\120\030\070\032" +
    "\062\033\077\034\063\035\106\036\057\052\117\053\021" +
    "\054\032\055\026\056\041\057\031\071\116\072\053\074" +
    "\111\075\110\105\074\114\072\117\061\001\002\000\060" +
    "\003\076\011\073\027\120\030\070\032\062\033\077\034" +
    "\063\035\106\036\057\052\117\053\021\054\032\055\026" +
    "\056\041\057\031\064\u0127\071\116\072\053\074\111\075" +
    "\110\105\074\114\072\117\061\001\002\000\062\003\uff85" +
    "\011\uff85\027\uff85\030\uff85\031\u0129\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\036\uff85\052\uff85\053\uff85\054\uff85\055\uff85" +
    "\056\uff85\057\uff85\064\uff85\071\uff85\072\uff85\074\uff85\075" +
    "\uff85\105\uff85\114\uff85\117\uff85\001\002\000\060\003\uff84" +
    "\011\uff84\027\uff84\030\uff84\032\uff84\033\uff84\034\uff84\035" +
    "\uff84\036\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84" +
    "\057\uff84\064\uff84\071\uff84\072\uff84\074\uff84\075\uff84\105" +
    "\uff84\114\uff84\117\uff84\001\002\000\006\030\070\063\u012a" +
    "\001\002\000\056\003\076\011\073\027\120\030\070\032" +
    "\062\033\077\034\063\035\106\036\057\052\117\053\021" +
    "\054\032\055\026\056\041\057\031\071\116\072\053\074" +
    "\111\075\110\105\074\114\072\117\061\001\002\000\060" +
    "\003\uff97\011\uff97\027\uff97\030\uff97\032\uff97\033\uff97\034" +
    "\uff97\035\uff97\036\uff97\052\uff97\053\uff97\054\uff97\055\uff97" +
    "\056\uff97\057\uff97\064\uff97\071\uff97\072\uff97\074\uff97\075" +
    "\uff97\105\uff97\114\uff97\117\uff97\001\002\000\060\003\076" +
    "\011\073\027\120\030\070\032\062\033\077\034\063\035" +
    "\106\036\057\052\117\053\021\054\032\055\026\056\041" +
    "\057\031\064\uff87\071\116\072\053\074\111\075\110\105" +
    "\074\114\072\117\061\001\002\000\004\064\u012e\001\002" +
    "\000\060\003\uff86\011\uff86\027\uff86\030\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\036\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff86\056\uff86\057\uff86\064\uff86\071\uff86\072\uff86\074" +
    "\uff86\075\uff86\105\uff86\114\uff86\117\uff86\001\002\000\030" +
    "\011\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\064\uffb7\110\uffb7\111\uffb7\112\uffb7\001\002\000\042" +
    "\012\152\013\144\014\160\015\155\016\153\017\147\020" +
    "\150\021\156\022\157\023\161\024\162\025\151\041\163" +
    "\042\145\043\146\063\u0131\001\002\000\032\004\130\005" +
    "\132\006\137\007\135\010\131\011\140\013\127\037\u0132" +
    "\044\141\061\134\076\133\107\136\001\002\000\004\040" +
    "\u013c\001\002\000\034\004\130\005\132\006\137\007\135" +
    "\010\131\011\140\013\127\037\u0132\044\141\061\134\064" +
    "\u013a\076\133\107\136\001\002\000\034\004\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\013\uff8c\037\uff8c\044" +
    "\uff8c\061\uff8c\064\uff8c\076\uff8c\107\uff8c\001\002\000\042" +
    "\012\152\013\144\014\160\015\155\016\153\017\147\020" +
    "\150\021\156\022\157\023\161\024\162\025\151\040\u0136" +
    "\041\163\042\145\043\146\001\002\000\004\063\u0137\001" +
    "\002\000\056\003\076\011\073\027\120\030\070\032\062" +
    "\033\077\034\063\035\106\036\057\052\117\053\021\054" +
    "\032\055\026\056\041\057\031\071\116\072\053\074\111" +
    "\075\110\105\074\114\072\117\061\001\002\000\060\003" +
    "\076\011\073\027\120\030\070\032\062\033\077\034\063" +
    "\035\106\036\057\052\117\053\021\054\032\055\026\056" +
    "\041\057\031\064\u0139\071\116\072\053\074\111\075\110" +
    "\105\074\114\072\117\061\001\002\000\034\004\uff8b\005" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\013\uff8b\037\uff8b" +
    "\044\uff8b\061\uff8b\064\uff8b\076\uff8b\107\uff8b\001\002\000" +
    "\060\003\uff8e\011\uff8e\027\uff8e\030\uff8e\032\uff8e\033\uff8e" +
    "\034\uff8e\035\uff8e\036\uff8e\052\uff8e\053\uff8e\054\uff8e\055" +
    "\uff8e\056\uff8e\057\uff8e\064\uff8e\071\uff8e\072\uff8e\074\uff8e" +
    "\075\uff8e\105\uff8e\114\uff8e\117\uff8e\001\002\000\034\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\013\uff8d" +
    "\037\uff8d\044\uff8d\061\uff8d\064\uff8d\076\uff8d\107\uff8d\001" +
    "\002\000\004\063\u013d\001\002\000\056\003\076\011\073" +
    "\027\120\030\070\032\062\033\077\034\063\035\106\036" +
    "\057\052\117\053\021\054\032\055\026\056\041\057\031" +
    "\071\116\072\053\074\111\075\110\105\074\114\072\117" +
    "\061\001\002\000\060\003\076\011\073\027\120\030\070" +
    "\032\062\033\077\034\063\035\106\036\057\052\117\053" +
    "\021\054\032\055\026\056\041\057\031\064\u013f\071\116" +
    "\072\053\074\111\075\110\105\074\114\072\117\061\001" +
    "\002\000\034\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\013\uff8a\037\uff8a\044\uff8a\061\uff8a\064\uff8a\076" +
    "\uff8a\107\uff8a\001\002\000\020\011\u0144\053\021\054\032" +
    "\055\026\056\041\057\031\114\072\001\002\000\030\004" +
    "\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\013\uff88" +
    "\044\uff88\061\uff88\076\uff88\107\uff88\001\002\000\030\004" +
    "\130\005\132\006\137\007\135\010\131\011\140\013\127" +
    "\044\141\061\134\076\133\107\136\001\002\000\030\004" +
    "\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\013\uff89" +
    "\044\uff89\061\uff89\076\uff89\107\uff89\001\002\000\014\011" +
    "\uff64\026\351\061\u0145\067\355\077\u0146\001\002\000\032" +
    "\004\130\005\132\006\137\007\135\010\131\011\140\013" +
    "\127\044\141\061\134\062\uffae\076\133\107\136\001\002" +
    "\000\004\011\u0147\001\002\000\010\026\uff74\061\u0148\077" +
    "\u0149\001\002\000\032\004\130\005\132\006\137\007\135" +
    "\010\131\011\140\013\127\044\141\061\134\062\uffae\076" +
    "\133\107\136\001\002\000\004\011\u0147\001\002\000\004" +
    "\062\u014b\001\002\000\004\077\u014c\001\002\000\004\011" +
    "\u0147\001\002\000\004\062\u014e\001\002\000\004\077\u014f" +
    "\001\002\000\004\011\u0147\001\002\000\042\012\152\013" +
    "\144\014\160\015\155\016\153\017\147\020\150\021\156" +
    "\022\157\023\161\024\162\025\151\041\163\042\145\043" +
    "\146\065\u0151\001\002\000\004\011\u0152\001\002\000\010" +
    "\026\u0158\050\u015a\051\u0159\001\002\000\004\062\u0154\001" +
    "\002\000\004\063\u0155\001\002\000\056\003\076\011\073" +
    "\027\120\030\070\032\062\033\077\034\063\035\106\036" +
    "\057\052\117\053\021\054\032\055\026\056\041\057\031" +
    "\071\116\072\053\074\111\075\110\105\074\114\072\117" +
    "\061\001\002\000\060\003\076\011\073\027\120\030\070" +
    "\032\062\033\077\034\063\035\106\036\057\052\117\053" +
    "\021\054\032\055\026\056\041\057\031\064\u0157\071\116" +
    "\072\053\074\111\075\110\105\074\114\072\117\061\001" +
    "\002\000\060\003\uff94\011\uff94\027\uff94\030\uff94\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\052\uff94\053\uff94\054" +
    "\uff94\055\uff94\056\uff94\057\uff94\064\uff94\071\uff94\072\uff94" +
    "\074\uff94\075\uff94\105\uff94\114\uff94\117\uff94\001\002\000" +
    "\030\004\130\005\132\006\137\007\135\010\131\011\140" +
    "\013\127\044\141\061\134\076\133\107\136\001\002\000" +
    "\004\062\uff92\001\002\000\004\062\uff93\001\002\000\042" +
    "\012\152\013\144\014\160\015\155\016\153\017\147\020" +
    "\150\021\156\022\157\023\161\024\162\025\151\041\163" +
    "\042\145\043\146\062\uff91\001\002\000\030\004\130\005" +
    "\132\006\137\007\135\010\131\011\140\013\127\044\141" +
    "\061\134\076\133\107\136\001\002\000\006\062\u015e\073" +
    "\223\001\002\000\004\065\u015f\001\002\000\060\003\uff82" +
    "\011\uff82\027\uff82\030\uff82\032\uff82\033\uff82\034\uff82\035" +
    "\uff82\036\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82" +
    "\057\uff82\064\uff82\071\uff82\072\uff82\074\uff82\075\uff82\105" +
    "\uff82\114\uff82\117\uff82\001\002\000\060\003\uff62\011\uff62" +
    "\027\uff62\030\uff62\032\uff62\033\uff62\034\uff62\035\uff62\036" +
    "\uff62\052\uff62\053\uff62\054\uff62\055\uff62\056\uff62\057\uff62" +
    "\064\uff62\071\uff62\072\uff62\074\uff62\075\uff62\105\uff62\114" +
    "\uff62\117\uff62\001\002\000\016\011\046\053\021\054\032" +
    "\055\026\056\041\057\031\001\002\000\004\063\u0163\001" +
    "\002\000\056\003\076\011\073\027\120\030\070\032\062" +
    "\033\077\034\063\035\106\036\057\052\117\053\021\054" +
    "\032\055\026\056\041\057\031\071\116\072\053\074\111" +
    "\075\110\105\074\114\072\117\061\001\002\000\060\003" +
    "\076\011\073\027\120\030\070\032\062\033\077\034\063" +
    "\035\106\036\057\052\117\053\021\054\032\055\026\056" +
    "\041\057\031\064\u0165\071\116\072\053\074\111\075\110" +
    "\105\074\114\072\117\061\001\002\000\030\011\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\064\uffb8" +
    "\110\uffb8\111\uffb8\112\uffb8\001\002\000\004\011\u0167\001" +
    "\002\000\006\062\uffb1\073\uffb1\001\002\000\006\011\uff64" +
    "\061\u0190\001\002\000\004\011\u0181\001\002\000\006\011" +
    "\u016b\115\u016c\001\002\000\004\061\u0177\001\002\000\004" +
    "\061\u016d\001\002\000\020\011\046\053\021\054\032\055" +
    "\026\056\041\057\031\062\u016f\001\002\000\006\062\u0173" +
    "\073\u0161\001\002\000\004\063\u0170\001\002\000\056\003" +
    "\076\011\073\027\120\030\070\032\062\033\077\034\063" +
    "\035\106\036\057\052\117\053\021\054\032\055\026\056" +
    "\041\057\031\071\116\072\053\074\111\075\110\105\074" +
    "\114\072\117\061\001\002\000\060\003\076\011\073\027" +
    "\120\030\070\032\062\033\077\034\063\035\106\036\057" +
    "\052\117\053\021\054\032\055\026\056\041\057\031\064" +
    "\u0172\071\116\072\053\074\111\075\110\105\074\114\072" +
    "\117\061\001\002\000\030\011\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\064\uffb5\110\uffb5\111\uffb5" +
    "\112\uffb5\001\002\000\004\063\u0174\001\002\000\056\003" +
    "\076\011\073\027\120\030\070\032\062\033\077\034\063" +
    "\035\106\036\057\052\117\053\021\054\032\055\026\056" +
    "\041\057\031\071\116\072\053\074\111\075\110\105\074" +
    "\114\072\117\061\001\002\000\060\003\076\011\073\027" +
    "\120\030\070\032\062\033\077\034\063\035\106\036\057" +
    "\052\117\053\021\054\032\055\026\056\041\057\031\064" +
    "\u0176\071\116\072\053\074\111\075\110\105\074\114\072" +
    "\117\061\001\002\000\030\011\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\064\uffb6\110\uffb6\111\uffb6" +
    "\112\uffb6\001\002\000\020\011\046\053\021\054\032\055" +
    "\026\056\041\057\031\062\u0179\001\002\000\006\062\u017d" +
    "\073\u0161\001\002\000\004\063\u017a\001\002\000\056\003" +
    "\076\011\073\027\120\030\070\032\062\033\077\034\063" +
    "\035\106\036\057\052\117\053\021\054\032\055\026\056" +
    "\041\057\031\071\116\072\053\074\111\075\110\105\074" +
    "\114\072\117\061\001\002\000\060\003\076\011\073\027" +
    "\120\030\070\032\062\033\077\034\063\035\106\036\057" +
    "\052\117\053\021\054\032\055\026\056\041\057\031\064" +
    "\u017c\071\116\072\053\074\111\075\110\105\074\114\072" +
    "\117\061\001\002\000\030\011\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\064\uffbd\110\uffbd\111\uffbd" +
    "\112\uffbd\001\002\000\004\063\u017e\001\002\000\056\003" +
    "\076\011\073\027\120\030\070\032\062\033\077\034\063" +
    "\035\106\036\057\052\117\053\021\054\032\055\026\056" +
    "\041\057\031\071\116\072\053\074\111\075\110\105\074" +
    "\114\072\117\061\001\002\000\060\003\076\011\073\027" +
    "\120\030\070\032\062\033\077\034\063\035\106\036\057" +
    "\052\117\053\021\054\032\055\026\056\041\057\031\064" +
    "\u0180\071\116\072\053\074\111\075\110\105\074\114\072" +
    "\117\061\001\002\000\030\011\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\064\uffbe\110\uffbe\111\uffbe" +
    "\112\uffbe\001\002\000\010\026\u0182\061\u0183\065\u0184\001" +
    "\002\000\030\004\130\005\132\006\137\007\135\010\131" +
    "\011\140\013\127\044\141\061\134\076\133\107\136\001" +
    "\002\000\020\011\046\053\021\054\032\055\026\056\041" +
    "\057\031\062\u0186\001\002\000\030\011\uff7f\053\uff7f\054" +
    "\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\064\uff7f\110\uff7f" +
    "\111\uff7f\112\uff7f\001\002\000\006\062\u018a\073\u0161\001" +
    "\002\000\004\063\u0187\001\002\000\056\003\076\011\073" +
    "\027\120\030\070\032\062\033\077\034\063\035\106\036" +
    "\057\052\117\053\021\054\032\055\026\056\041\057\031" +
    "\071\116\072\053\074\111\075\110\105\074\114\072\117" +
    "\061\001\002\000\060\003\076\011\073\027\120\030\070" +
    "\032\062\033\077\034\063\035\106\036\057\052\117\053" +
    "\021\054\032\055\026\056\041\057\031\064\u0189\071\116" +
    "\072\053\074\111\075\110\105\074\114\072\117\061\001" +
    "\002\000\030\011\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\064\uffbb\110\uffbb\111\uffbb\112\uffbb\001" +
    "\002\000\004\063\u018b\001\002\000\056\003\076\011\073" +
    "\027\120\030\070\032\062\033\077\034\063\035\106\036" +
    "\057\052\117\053\021\054\032\055\026\056\041\057\031" +
    "\071\116\072\053\074\111\075\110\105\074\114\072\117" +
    "\061\001\002\000\060\003\076\011\073\027\120\030\070" +
    "\032\062\033\077\034\063\035\106\036\057\052\117\053" +
    "\021\054\032\055\026\056\041\057\031\064\u018d\071\116" +
    "\072\053\074\111\075\110\105\074\114\072\117\061\001" +
    "\002\000\030\011\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\064\uffbc\110\uffbc\111\uffbc\112\uffbc\001" +
    "\002\000\042\012\152\013\144\014\160\015\155\016\153" +
    "\017\147\020\150\021\156\022\157\023\161\024\162\025" +
    "\151\041\163\042\145\043\146\065\u018f\001\002\000\030" +
    "\011\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060" +
    "\uff7e\064\uff7e\110\uff7e\111\uff7e\112\uff7e\001\002\000\016" +
    "\011\046\053\021\054\032\055\026\056\041\057\031\001" +
    "\002\000\006\062\u0192\073\u0161\001\002\000\004\063\u0193" +
    "\001\002\000\056\003\076\011\073\027\120\030\070\032" +
    "\062\033\077\034\063\035\106\036\057\052\117\053\021" +
    "\054\032\055\026\056\041\057\031\071\116\072\053\074" +
    "\111\075\110\105\074\114\072\117\061\001\002\000\060" +
    "\003\076\011\073\027\120\030\070\032\062\033\077\034" +
    "\063\035\106\036\057\052\117\053\021\054\032\055\026" +
    "\056\041\057\031\064\u0195\071\116\072\053\074\111\075" +
    "\110\105\074\114\072\117\061\001\002\000\030\011\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\064" +
    "\ufffc\110\ufffc\111\ufffc\112\ufffc\001\002\000\016\011\046" +
    "\053\021\054\032\055\026\056\041\057\031\001\002\000" +
    "\006\062\u0198\073\u0161\001\002\000\004\063\u0199\001\002" +
    "\000\056\003\076\011\073\027\120\030\070\032\062\033" +
    "\077\034\063\035\106\036\057\052\117\053\021\054\032" +
    "\055\026\056\041\057\031\071\116\072\053\074\111\075" +
    "\110\105\074\114\072\117\061\001\002\000\060\003\076" +
    "\011\073\027\120\030\070\032\062\033\077\034\063\035" +
    "\106\036\057\052\117\053\021\054\032\055\026\056\041" +
    "\057\031\064\u019b\071\116\072\053\074\111\075\110\105" +
    "\074\114\072\117\061\001\002\000\030\011\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\064\ufffd\110" +
    "\ufffd\111\ufffd\112\ufffd\001\002\000\004\061\u01a8\001\002" +
    "\000\004\061\u019e\001\002\000\020\011\046\053\021\054" +
    "\032\055\026\056\041\057\031\062\u01a0\001\002\000\006" +
    "\062\u01a4\073\u0161\001\002\000\004\063\u01a1\001\002\000" +
    "\056\003\076\011\073\027\120\030\070\032\062\033\077" +
    "\034\063\035\106\036\057\052\117\053\021\054\032\055" +
    "\026\056\041\057\031\071\116\072\053\074\111\075\110" +
    "\105\074\114\072\117\061\001\002\000\060\003\076\011" +
    "\073\027\120\030\070\032\062\033\077\034\063\035\106" +
    "\036\057\052\117\053\021\054\032\055\026\056\041\057" +
    "\031\064\u01a3\071\116\072\053\074\111\075\110\105\074" +
    "\114\072\117\061\001\002\000\030\011\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\064\uffb3\110\uffb3" +
    "\111\uffb3\112\uffb3\001\002\000\004\063\u01a5\001\002\000" +
    "\056\003\076\011\073\027\120\030\070\032\062\033\077" +
    "\034\063\035\106\036\057\052\117\053\021\054\032\055" +
    "\026\056\041\057\031\071\116\072\053\074\111\075\110" +
    "\105\074\114\072\117\061\001\002\000\060\003\076\011" +
    "\073\027\120\030\070\032\062\033\077\034\063\035\106" +
    "\036\057\052\117\053\021\054\032\055\026\056\041\057" +
    "\031\064\u01a7\071\116\072\053\074\111\075\110\105\074" +
    "\114\072\117\061\001\002\000\030\011\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\064\uffb4\110\uffb4" +
    "\111\uffb4\112\uffb4\001\002\000\020\011\046\053\021\054" +
    "\032\055\026\056\041\057\031\062\u01aa\001\002\000\006" +
    "\062\u01ae\073\u0161\001\002\000\004\063\u01ab\001\002\000" +
    "\056\003\076\011\073\027\120\030\070\032\062\033\077" +
    "\034\063\035\106\036\057\052\117\053\021\054\032\055" +
    "\026\056\041\057\031\071\116\072\053\074\111\075\110" +
    "\105\074\114\072\117\061\001\002\000\060\003\076\011" +
    "\073\027\120\030\070\032\062\033\077\034\063\035\106" +
    "\036\057\052\117\053\021\054\032\055\026\056\041\057" +
    "\031\064\u01ad\071\116\072\053\074\111\075\110\105\074" +
    "\114\072\117\061\001\002\000\030\011\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\064\uffb9\110\uffb9" +
    "\111\uffb9\112\uffb9\001\002\000\004\063\u01af\001\002\000" +
    "\056\003\076\011\073\027\120\030\070\032\062\033\077" +
    "\034\063\035\106\036\057\052\117\053\021\054\032\055" +
    "\026\056\041\057\031\071\116\072\053\074\111\075\110" +
    "\105\074\114\072\117\061\001\002\000\060\003\076\011" +
    "\073\027\120\030\070\032\062\033\077\034\063\035\106" +
    "\036\057\052\117\053\021\054\032\055\026\056\041\057" +
    "\031\064\u01b1\071\116\072\053\074\111\075\110\105\074" +
    "\114\072\117\061\001\002\000\030\011\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\064\uffba\110\uffba" +
    "\111\uffba\112\uffba\001\002\000\010\002\ufff3\112\ufff3\116" +
    "\ufff3\001\002\000\030\011\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\060\ufff1\064\ufff1\110\ufff1\111\ufff1\112" +
    "\ufff1\001\002\000\030\011\033\053\021\054\032\055\026" +
    "\056\041\057\031\060\027\064\u01b5\110\030\111\034\112" +
    "\023\001\002\000\010\002\ufff5\112\ufff5\116\ufff5\001\002" +
    "\000\006\063\u01b7\113\u01b8\001\002\000\026\011\033\053" +
    "\021\054\032\055\026\056\041\057\031\060\027\110\030" +
    "\111\034\112\023\001\002\000\004\011\u01b9\001\002\000" +
    "\004\063\u01ba\001\002\000\026\011\033\053\021\054\032" +
    "\055\026\056\041\057\031\060\027\110\030\111\034\112" +
    "\023\001\002\000\030\011\033\053\021\054\032\055\026" +
    "\056\041\057\031\060\027\064\u01bc\110\030\111\034\112" +
    "\023\001\002\000\010\002\ufff4\112\ufff4\116\ufff4\001\002" +
    "\000\030\011\033\053\021\054\032\055\026\056\041\057" +
    "\031\060\027\064\u01be\110\030\111\034\112\023\001\002" +
    "\000\010\002\ufff6\112\ufff6\116\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01bc\000\010\002\006\053\005\054\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\024\012\037\035\036\052\035\055\023\056\034\060" +
    "\u01b3\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\024\012\037\035\036\052\035\055\023\056\034\060" +
    "\021\001\001\000\002\001\001\000\016\006\024\012\037" +
    "\035\036\052\035\055\023\056\u01b2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0168\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\046\040\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\063\004\070\007\114\010\053\011\101\012" +
    "\104\014\111\015\103\016\057\017\106\020\054\021\102" +
    "\022\077\023\112\032\055\033\074\034\065\036\100\045" +
    "\051\046\066\050\064\057\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u012f\047\141\001" +
    "\001\000\054\004\123\007\114\010\053\011\101\012\104" +
    "\014\111\015\103\016\057\017\106\020\054\021\102\022" +
    "\077\023\112\032\055\033\074\034\065\036\100\045\051" +
    "\046\066\050\064\057\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\346\047\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\121\004\070" +
    "\007\114\010\053\011\101\012\104\014\111\015\103\016" +
    "\057\017\106\020\054\021\102\022\077\023\112\032\055" +
    "\033\074\034\065\036\100\045\051\046\066\050\064\057" +
    "\113\001\001\000\054\004\123\007\114\010\053\011\101" +
    "\012\104\014\111\015\103\016\057\017\106\020\054\021" +
    "\102\022\077\023\112\032\055\033\074\034\065\036\100" +
    "\045\051\046\066\050\064\057\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\142" +
    "\047\141\001\001\000\006\005\247\047\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\242\001\001\000\006\005\240\047\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\203\047\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\202\047\141\001\001" +
    "\000\006\005\201\047\141\001\001\000\006\005\200\047" +
    "\141\001\001\000\006\005\177\047\141\001\001\000\006" +
    "\005\176\047\141\001\001\000\006\005\175\047\141\001" +
    "\001\000\006\005\174\047\141\001\001\000\006\005\173" +
    "\047\141\001\001\000\002\001\001\000\006\005\171\047" +
    "\141\001\001\000\006\005\170\047\141\001\001\000\006" +
    "\005\167\047\141\001\001\000\006\005\166\047\141\001" +
    "\001\000\006\005\165\047\141\001\001\000\006\005\164" +
    "\047\141\001\001\000\006\005\163\047\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\215\043\214\047\141\063\231\001" +
    "\001\000\006\005\224\047\141\001\001\000\004\062\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\215\043\214\047\141\063\216\001\001\000\004\062\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\221" +
    "\001\001\000\002\001\001\000\006\005\223\047\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\227\047\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\234\001\001\000\002\001\001\000\006\005\236\047" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\215\043\244\047\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\215\043\251\047\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\215\043\256\047\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\276\047\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\301\004\070" +
    "\007\114\010\053\011\101\012\104\014\111\015\103\016" +
    "\057\017\106\020\054\021\102\022\077\023\112\032\055" +
    "\033\074\034\065\036\100\045\051\046\066\050\064\057" +
    "\113\001\001\000\054\004\123\007\114\010\053\011\101" +
    "\012\104\014\111\015\103\016\057\017\106\020\054\021" +
    "\102\022\077\023\112\032\055\033\074\034\065\036\100" +
    "\045\051\046\066\050\064\057\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\306\047\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\322\001\001\000\002\001\001\000\010\005\325\027" +
    "\324\047\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\330\047\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\325\027\334\047\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\325\027\340" +
    "\047\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u011a\047\141\001\001\000\012\005\215\043\214\047\141" +
    "\063\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0106\047\141\001\001\000\006\061\357\064\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\362\047\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\215\043\214\047\141\063" +
    "\u0101\001\001\000\006\045\367\064\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\215\043\214\047\141\063\373\001\001\000\006\061\357" +
    "\064\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\061\377\064\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\u0105\064\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u010f\047\141\001\001\000\006\005\u010a\047\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u010d\047\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\061\377\064\u0116\001\001\000\002\001\001\000\006\005" +
    "\u0118\047\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u011f\047\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u0122\047\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u0125" +
    "\004\070\007\114\010\053\011\101\012\104\014\111\015" +
    "\103\016\057\017\106\020\054\021\102\022\077\023\112" +
    "\032\055\033\074\034\065\036\100\045\051\046\066\050" +
    "\064\057\113\001\001\000\054\004\123\007\114\010\053" +
    "\011\101\012\104\014\111\015\103\016\057\017\106\020" +
    "\054\021\102\022\077\023\112\032\055\033\074\034\065" +
    "\036\100\045\051\046\066\050\064\057\113\001\001\000" +
    "\004\026\u0127\001\001\000\002\001\001\000\010\021\u012a" +
    "\022\077\023\112\001\001\000\056\003\u012b\004\070\007" +
    "\114\010\053\011\101\012\104\014\111\015\103\016\057" +
    "\017\106\020\054\021\102\022\077\023\112\032\055\033" +
    "\074\034\065\036\100\045\051\046\066\050\064\057\113" +
    "\001\001\000\002\001\001\000\056\004\123\007\114\010" +
    "\053\011\101\012\104\014\111\015\103\016\057\017\106" +
    "\020\054\021\102\022\077\023\112\032\055\033\074\034" +
    "\065\036\100\045\051\046\066\050\064\057\113\065\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\u0134\030\u0132\031\u0133" +
    "\047\141\001\001\000\002\001\001\000\010\005\u0134\031" +
    "\u013a\047\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\u0137\004\070\007\114\010" +
    "\053\011\101\012\104\014\111\015\103\016\057\017\106" +
    "\020\054\021\102\022\077\023\112\032\055\033\074\034" +
    "\065\036\100\045\051\046\066\050\064\057\113\001\001" +
    "\000\054\004\123\007\114\010\053\011\101\012\104\014" +
    "\111\015\103\016\057\017\106\020\054\021\102\022\077" +
    "\023\112\032\055\033\074\034\065\036\100\045\051\046" +
    "\066\050\064\057\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\u013d\004\070\007\114\010\053\011\101\012\104\014\111" +
    "\015\103\016\057\017\106\020\054\021\102\022\077\023" +
    "\112\032\055\033\074\034\065\036\100\045\051\046\066" +
    "\050\064\057\113\001\001\000\054\004\123\007\114\010" +
    "\053\011\101\012\104\014\111\015\103\016\057\017\106" +
    "\020\054\021\102\022\077\023\112\032\055\033\074\034" +
    "\065\036\100\045\051\046\066\050\064\057\113\001\001" +
    "\000\002\001\001\000\012\007\u0140\012\104\024\u0141\057" +
    "\u0142\001\001\000\002\001\001\000\006\005\u014f\047\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\215\043\214\047\141\063\u014c\001\001\000\004\064\360" +
    "\001\001\000\002\001\001\000\012\005\215\043\214\047" +
    "\141\063\u0149\001\001\000\004\064\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\u0116\001\001" +
    "\000\002\001\001\000\004\025\u0152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u0155" +
    "\004\070\007\114\010\053\011\101\012\104\014\111\015" +
    "\103\016\057\017\106\020\054\021\102\022\077\023\112" +
    "\032\055\033\074\034\065\036\100\045\051\046\066\050" +
    "\064\057\113\001\001\000\054\004\123\007\114\010\053" +
    "\011\101\012\104\014\111\015\103\016\057\017\106\020" +
    "\054\021\102\022\077\023\112\032\055\033\074\034\065" +
    "\036\100\045\051\046\066\050\064\057\113\001\001\000" +
    "\002\001\001\000\006\005\u015a\047\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\215\043\u015c\047\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0165\001\001\000\002\001\001\000\056\003\u0163\004\070" +
    "\007\114\010\053\011\101\012\104\014\111\015\103\016" +
    "\057\017\106\020\054\021\102\022\077\023\112\032\055" +
    "\033\074\034\065\036\100\045\051\046\066\050\064\057" +
    "\113\001\001\000\054\004\123\007\114\010\053\011\101" +
    "\012\104\014\111\015\103\016\057\017\106\020\054\021" +
    "\102\022\077\023\112\032\055\033\074\034\065\036\100" +
    "\045\051\046\066\050\064\057\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\046\040\u016d\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\u0170\004\070\007" +
    "\114\010\053\011\101\012\104\014\111\015\103\016\057" +
    "\017\106\020\054\021\102\022\077\023\112\032\055\033" +
    "\074\034\065\036\100\045\051\046\066\050\064\057\113" +
    "\001\001\000\054\004\123\007\114\010\053\011\101\012" +
    "\104\014\111\015\103\016\057\017\106\020\054\021\102" +
    "\022\077\023\112\032\055\033\074\034\065\036\100\045" +
    "\051\046\066\050\064\057\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\u0174\004\070\007\114\010" +
    "\053\011\101\012\104\014\111\015\103\016\057\017\106" +
    "\020\054\021\102\022\077\023\112\032\055\033\074\034" +
    "\065\036\100\045\051\046\066\050\064\057\113\001\001" +
    "\000\054\004\123\007\114\010\053\011\101\012\104\014" +
    "\111\015\103\016\057\017\106\020\054\021\102\022\077" +
    "\023\112\032\055\033\074\034\065\036\100\045\051\046" +
    "\066\050\064\057\113\001\001\000\002\001\001\000\006" +
    "\012\046\040\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\u017a\004\070\007\114\010\053\011\101" +
    "\012\104\014\111\015\103\016\057\017\106\020\054\021" +
    "\102\022\077\023\112\032\055\033\074\034\065\036\100" +
    "\045\051\046\066\050\064\057\113\001\001\000\054\004" +
    "\123\007\114\010\053\011\101\012\104\014\111\015\103" +
    "\016\057\017\106\020\054\021\102\022\077\023\112\032" +
    "\055\033\074\034\065\036\100\045\051\046\066\050\064" +
    "\057\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\u017e\004\070\007\114\010\053\011\101\012\104" +
    "\014\111\015\103\016\057\017\106\020\054\021\102\022" +
    "\077\023\112\032\055\033\074\034\065\036\100\045\051" +
    "\046\066\050\064\057\113\001\001\000\054\004\123\007" +
    "\114\010\053\011\101\012\104\014\111\015\103\016\057" +
    "\017\106\020\054\021\102\022\077\023\112\032\055\033" +
    "\074\034\065\036\100\045\051\046\066\050\064\057\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u018d\047\141\001\001\000\006\012\046\040\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\u0187\004\070\007\114\010\053\011\101\012\104" +
    "\014\111\015\103\016\057\017\106\020\054\021\102\022" +
    "\077\023\112\032\055\033\074\034\065\036\100\045\051" +
    "\046\066\050\064\057\113\001\001\000\054\004\123\007" +
    "\114\010\053\011\101\012\104\014\111\015\103\016\057" +
    "\017\106\020\054\021\102\022\077\023\112\032\055\033" +
    "\074\034\065\036\100\045\051\046\066\050\064\057\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\u018b\004\070\007\114\010\053\011\101\012\104\014\111" +
    "\015\103\016\057\017\106\020\054\021\102\022\077\023" +
    "\112\032\055\033\074\034\065\036\100\045\051\046\066" +
    "\050\064\057\113\001\001\000\054\004\123\007\114\010" +
    "\053\011\101\012\104\014\111\015\103\016\057\017\106" +
    "\020\054\021\102\022\077\023\112\032\055\033\074\034" +
    "\065\036\100\045\051\046\066\050\064\057\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\046\040\u0190\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\u0193\004\070\007\114\010\053\011" +
    "\101\012\104\014\111\015\103\016\057\017\106\020\054" +
    "\021\102\022\077\023\112\032\055\033\074\034\065\036" +
    "\100\045\051\046\066\050\064\057\113\001\001\000\054" +
    "\004\123\007\114\010\053\011\101\012\104\014\111\015" +
    "\103\016\057\017\106\020\054\021\102\022\077\023\112" +
    "\032\055\033\074\034\065\036\100\045\051\046\066\050" +
    "\064\057\113\001\001\000\002\001\001\000\006\012\046" +
    "\040\u0196\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\u0199\004\070\007\114\010\053\011\101\012\104" +
    "\014\111\015\103\016\057\017\106\020\054\021\102\022" +
    "\077\023\112\032\055\033\074\034\065\036\100\045\051" +
    "\046\066\050\064\057\113\001\001\000\054\004\123\007" +
    "\114\010\053\011\101\012\104\014\111\015\103\016\057" +
    "\017\106\020\054\021\102\022\077\023\112\032\055\033" +
    "\074\034\065\036\100\045\051\046\066\050\064\057\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\046\040\u019e\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\u01a1\004\070\007\114\010" +
    "\053\011\101\012\104\014\111\015\103\016\057\017\106" +
    "\020\054\021\102\022\077\023\112\032\055\033\074\034" +
    "\065\036\100\045\051\046\066\050\064\057\113\001\001" +
    "\000\054\004\123\007\114\010\053\011\101\012\104\014" +
    "\111\015\103\016\057\017\106\020\054\021\102\022\077" +
    "\023\112\032\055\033\074\034\065\036\100\045\051\046" +
    "\066\050\064\057\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\u01a5\004\070\007\114\010\053\011" +
    "\101\012\104\014\111\015\103\016\057\017\106\020\054" +
    "\021\102\022\077\023\112\032\055\033\074\034\065\036" +
    "\100\045\051\046\066\050\064\057\113\001\001\000\054" +
    "\004\123\007\114\010\053\011\101\012\104\014\111\015" +
    "\103\016\057\017\106\020\054\021\102\022\077\023\112" +
    "\032\055\033\074\034\065\036\100\045\051\046\066\050" +
    "\064\057\113\001\001\000\002\001\001\000\006\012\046" +
    "\040\u01a8\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\u01ab\004\070\007\114\010\053\011\101\012\104" +
    "\014\111\015\103\016\057\017\106\020\054\021\102\022" +
    "\077\023\112\032\055\033\074\034\065\036\100\045\051" +
    "\046\066\050\064\057\113\001\001\000\054\004\123\007" +
    "\114\010\053\011\101\012\104\014\111\015\103\016\057" +
    "\017\106\020\054\021\102\022\077\023\112\032\055\033" +
    "\074\034\065\036\100\045\051\046\066\050\064\057\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\u01af\004\070\007\114\010\053\011\101\012\104\014\111" +
    "\015\103\016\057\017\106\020\054\021\102\022\077\023" +
    "\112\032\055\033\074\034\065\036\100\045\051\046\066" +
    "\050\064\057\113\001\001\000\054\004\123\007\114\010" +
    "\053\011\101\012\104\014\111\015\103\016\057\017\106" +
    "\020\054\021\102\022\077\023\112\032\055\033\074\034" +
    "\065\036\100\045\051\046\066\050\064\057\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\024\012\037\035\036\052\035\055\023\056\u01b2" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\024\012\037\035\036\052\035\055\023\056\034\060\u01bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\024\012\037\035\036\052\035\055\023\056\034\060\u01ba" +
    "\001\001\000\016\006\024\012\037\035\036\052\035\055" +
    "\023\056\u01b2\001\001\000\002\001\001\000\016\006\024" +
    "\012\037\035\036\052\035\055\023\056\u01b2\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    // public void syntax_error(Symbol s){
    //     System.out.println("Error Sintactico en la linea " +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }

    // public void unrecovered_syntax_error (Symbol s){
    //     System.out.println("Error Sintactico no recuperable en la linea" +
    //     (s.left) + " y columna " + (s.right) +
    //     ". No se esperaba el componente: " + (s.value) + ".");
    // }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= claass 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>();;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // InstructionES ::= InstructionES Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InstructionES ::= Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constructor ::= ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constructor ::= modPriv ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // modPriv ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // modPriv ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // modPriv ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modPriv",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // claass ::= Oneclaass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // claass ::= claass Oneclaass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("claass",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Oneclaass ::= CLASS ID K_OP gInstructionss K_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Oneclaass ::= PUBLIC CLASS ID K_OP gInstructionss K_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Oneclaass ::= CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Oneclaass ::= PUBLIC CLASS ID EXTENDS ID K_OP gInstructionss K_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oneclaass",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // gInstructionss ::= gIns 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gInstructionss ::= gInstructionss gIns 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gInstructionss",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // gIns ::= methodd 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gIns ::= globalDec 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gIns",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruction ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruction ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruction ::= print 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruction ::= if 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruction ::= increaseDecrease 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Instruction ::= for 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruction ::= while 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instruction ::= do 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruction ::= match 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruction ::= break 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruction ::= returnn 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruction ::= continue 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruction ::= declaracionEstructuraD 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruction ::= struct 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruction ::= start_whit 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruction ::= call 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruction ::= error SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruction ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Negacion(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, Relational_LogicalOperations.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Suma(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Resta(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION DIVIDED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Division(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION TIMES EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Multiplicacion(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Modulee(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION RAISED EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Raised(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.IGUALA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION DIFFERENT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.DIFERENTEQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION L_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION G_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperateRelacionales(a, b, Relational_LogicalOperations.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LogicalOperations(a, b, Relational_LogicalOperations.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= PAR_OP EXPRESION PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= CHARAC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= BOOL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Access(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indx1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indx1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction indx1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction indx2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesVector(a, indx1, indx2, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= TUSTRIN PAR_OP EXPRESION PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionToString(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= callEXP 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= NEW typeVar PAR_OP callsParameters PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= NEW typeVar PAR_OP PAR_CL 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // methodd ::= modPriv VOID ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // methodd ::= modPriv VOID ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // methodd ::= modPriv typeVar ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // methodd ::= modPriv typeVar ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // methodd ::= VOID ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // methodd ::= VOID ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method(b, new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // methodd ::= typeVar ID PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // methodd ::= typeVar ID PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Functionss(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // methodd ::= modPriv VOID MAIN PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method("MAIN", p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // methodd ::= modPriv VOID MAIN PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method("MAIN", new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // methodd ::= VOID MAIN PAR_OP parametersFuncts PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method("MAIN", p, c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // methodd ::= VOID MAIN PAR_OP PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Method("MAIN", new LinkedList<HashMap>(), c, new Tipo(tipoDato.VOID), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // methodd ::= constructor 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodd",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametersFuncts ::= parametersFuncts COLON typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var elseParam= new HashMap<String, Object>();
                                            elseParam.put("id", id);
                                            elseParam.put("tipo", b);
                                            RESULT.add(elseParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametersFuncts ::= typeVar ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var oneParam = new HashMap<String, Object>();
                                            oneParam.put("id",id);
                                            oneParam.put("tipo", a);
                                            RESULT.add(oneParam);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersFuncts",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // paramss ::= callsParameters 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // paramss ::= 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramss",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // callEXP ::= ID DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // callEXP ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // callEXP ::= ID PAR_OP paramss PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // callEXP2 ::= 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // callEXP2 ::= ID PAR_OP paramss PAR_CL DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // callEXP2 ::= ID PAR_OP paramss PAR_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // callEXP2 ::= ID DOT callEXP2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // callEXP2 ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callEXP2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // call ::= ID DOT call2 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // call ::= ID PAR_OP paramss PAR_CL DOT call2 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // call ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // call2 ::= ID PAR_OP paramss PAR_CL DOT call 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // call2 ::= ID DOT call 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // call2 ::= ID PAR_OP paramss PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // start_whit ::= START_W ID PAR_OP callsParameters PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Start_Main(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_whit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // start_whit ::= START_W ID PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new Start_Main(a, new LinkedList<Instruction>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_whit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // callsParameters ::= callsParameters COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // callsParameters ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruction>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callsParameters",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // varCasteo ::= PAR_OP INT PAR_CL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCasteo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // varCasteo ::= PAR_OP DOUBLE PAR_CL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCasteo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // varCasteo ::= PAR_OP CHAR PAR_CL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCasteo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // varCasteo ::= PAR_OP STRING PAR_CL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCasteo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if ::= IF PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL ELSE if 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction elif = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, elif, expleft, expright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if ::= elsees 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if ::= simpleIf 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for ::= FOR PAR_OP declaraAsigna EXPRESION SEMIC updateVarFor PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaFor(a, b, c, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // updateVarFor ::= ID PLUSPLUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // updateVarFor ::= ID MINUSMINUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // updateVarFor ::= ID ASSIGNMENT EXPRESION 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("updateVarFor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // while ::= WHILE PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CiclicaWhile(a, ins, false,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // do ::= DO K_OP InstructionES K_CL WHILE PAR_OP EXPRESION PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CiclicaWhile(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // match ::= MATCH EXPRESION K_OP listCases K_CL 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cazzozleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cazzozright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> cazzoz = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(exp, cazzoz, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("match",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // listCases ::= listCases case 
            {
              LinkedList<CaseMatch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // listCases ::= case 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>();   RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCases",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case ::= EXPRESION ARROW K_OP InstructionES K_CL 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CaseMatch(a, ins, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // case ::= DEFAULT ARROW K_OP InstructionES K_CL 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CaseMatch(null, ins, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declaraAsigna ::= declaracion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declaraAsigna ::= asignacion 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction w = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraAsigna",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$0 ::= 
            {
              LinkedList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = ins;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cierreElse ::= ELSE K_OP InstructionES NT$0 K_CL 
            {
              LinkedList<Instruction> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (LinkedList<Instruction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierreElse",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // simpleIf ::= IF PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(a, ins, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleIf",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // elsees ::= IF PAR_OP EXPRESION PAR_CL K_OP InstructionES K_CL cierreElse 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> ins = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insElsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insElsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> insEls = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF(exp, ins, insEls, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsees",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // print ::= PRINT PAR_OP callsParameters PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // print ::= PRINTLN PAR_OP callsParameters PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // declaracion ::= typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // declaracion ::= typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // globalDec ::= modPriv typeVar ID SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // globalDec ::= modPriv typeVar ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Statement(string, exp, t, tleft, tright, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVectorAlone BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, vals, null, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // declaracionEstructuraD ::= mutabilidad ID POINTS typeVar BRACK_L BRACK_R BRACK_L BRACK_R ASSIGNMENT BRACK_L valoresVector2D BRACK_R SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruction>> vals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorsStatement(id, a, null, vals, t, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declaracionEstructuraD ::= LIST LESS typeVar GREATER ID ASSIGNMENT NEW LIST PAR_OP PAR_CL SEMIC 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new DynamicLists(id, t, idleft, idright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionEstructuraD",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // valoresVector2D ::= BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // valoresVector2D ::= valoresVector2D COLON BRACK_L valoresVectorAlone BRACK_R 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int listaValsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaValsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> listaVals = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> vals = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = listaVals; RESULT.add(vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVector2D",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // valoresVectorAlone ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.add(exp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // valoresVectorAlone ::= valoresVectorAlone COLON EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int valuessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valuessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> valuess = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = valuess; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresVectorAlone",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // assig_to_acces ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // assig_to_acces ::= ID DOT assig_to_acces 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // assig_to_acces ::= ID 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_to_acces",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // asignacion ::= THIS DOT ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // asignacion ::= ID ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Assignmentt(id, exp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // asignacion ::= ID DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asignacion ::= ID PAR_OP paramss PAR_CL DOT assig_to_acces ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // asignacion ::= ID BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // asignacion ::= ID BRACK_L EXPRESION BRACK_R BRACK_L EXPRESION BRACK_R ASSIGNMENT EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int index1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int index1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction index1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int index2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int index2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction index2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentVectores(id, index1, index2, exp, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // increaseDecrease ::= ID PLUSPLUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, true, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // increaseDecrease ::= ID MINUSMINUS SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncreaseDecrease(id, false, idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increaseDecrease",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // typeVar ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // typeVar ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // typeVar ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // typeVar ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // typeVar ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // typeVar ::= ID 
            {
              Tipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // break ::= BREAK SEMIC 
            {
              Instruction RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferBreak(wleft, wright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // continue ::= CONTINUE SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferContinue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // returnn ::= RETURN SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // returnn ::= RETURN EXPRESION SEMIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction exp = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new transferReturn(exp, expleft, expright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnn",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
