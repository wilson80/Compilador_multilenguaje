// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: colorear.jflex

package com.wilsoncys.compi1.java.model.analisis;


// importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.wilsoncys.compi1.java.model.excepciones.Errores;
import com.wilsoncys.compi1.java.vistas.colorInfo;
import com.wilsoncys.compi1.java.vistas.TipoT;
import java.io.StringReader;
import java.io.Reader;



@SuppressWarnings("fallthrough")
public class colorear2 {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int JAVA = 2;
  public static final int PROGRAMA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\1\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\2\12\1\13"+
    "\1\14\1\12\1\15\1\16\1\17\12\20\2\12\1\21"+
    "\1\22\1\21\2\0\1\23\1\24\1\25\3\26\1\27"+
    "\2\26\1\30\1\26\1\31\1\32\1\26\1\33\1\34"+
    "\1\26\1\35\1\36\2\26\1\37\4\26\1\12\1\40"+
    "\1\12\1\41\1\42\1\0\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\26\1\54\1\55"+
    "\1\26\1\56\1\57\1\60\1\26\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\2\26\1\12\1\70\1\12"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\1\1\3\1\1\1\4\2\1"+
    "\1\3\4\4\17\5\2\1\6\5\1\1\10\0\1\2"+
    "\1\0\10\5\1\6\13\5\5\0\1\5\1\0\20\5"+
    "\5\0\1\2\13\5\5\0\5\5\1\6\4\5\1\0"+
    "\1\7\3\0\2\5\4\0\1\5\1\0\1\10\2\0"+
    "\1\5\1\6\1\0\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\253\0\253\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\253\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0792\0\u07cb\0\u0804\0\u01c8\0\u083d\0\u0876\0\u08af\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u03c9\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u08af\0\u0f24\0\u0993\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\253\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\253"+
    "\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\u1c0e\0\253\0\u1c47\0\u1c80\0\u1cb9\0\253"+
    "\0\u1cf2\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\0\3\4\1\6\50\4\1\7\11\4"+
    "\2\5\1\0\1\10\1\11\1\4\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\15\1\21\1\22\2\23"+
    "\1\24\1\25\11\24\1\26\1\24\1\4\1\16\1\4"+
    "\1\24\1\27\1\30\1\31\1\32\1\33\2\24\1\34"+
    "\4\24\1\35\1\24\1\36\1\37\2\24\1\40\1\24"+
    "\1\41\1\4\2\5\1\0\1\23\1\11\1\42\1\43"+
    "\1\44\1\14\2\45\1\46\1\47\1\45\1\50\1\22"+
    "\2\23\15\24\1\4\2\45\25\24\1\51\72\0\2\5"+
    "\75\0\1\52\142\0\1\53\31\0\1\15\46\0\5\54"+
    "\1\45\32\54\1\55\30\54\7\0\1\56\71\0\1\15"+
    "\60\0\11\57\1\0\26\57\1\60\30\57\14\0\1\45"+
    "\71\0\1\45\66\0\1\61\3\0\1\62\67\0\1\63"+
    "\1\0\1\22\72\0\1\45\66\0\1\24\2\0\15\24"+
    "\2\0\26\24\21\0\1\24\2\0\15\24\2\0\17\24"+
    "\1\64\6\24\21\0\1\24\2\0\15\24\2\0\21\24"+
    "\1\65\4\24\21\0\1\24\2\0\15\24\2\0\15\24"+
    "\1\66\10\24\21\0\1\24\2\0\15\24\2\0\1\24"+
    "\1\67\6\24\1\70\2\24\1\71\1\24\1\72\10\24"+
    "\21\0\1\24\2\0\15\24\2\0\5\24\1\73\7\24"+
    "\1\74\10\24\21\0\1\24\2\0\15\24\2\0\13\24"+
    "\1\67\11\24\1\75\21\0\1\24\2\0\15\24\2\0"+
    "\1\24\1\76\11\24\1\77\1\24\1\100\10\24\21\0"+
    "\1\24\2\0\15\24\2\0\6\24\1\74\5\24\1\101"+
    "\11\24\21\0\1\24\2\0\15\24\2\0\17\24\1\102"+
    "\2\24\1\103\3\24\21\0\1\24\2\0\15\24\2\0"+
    "\24\24\1\104\1\24\21\0\1\24\2\0\15\24\2\0"+
    "\10\24\1\105\6\24\1\106\6\24\21\0\1\24\2\0"+
    "\15\24\2\0\10\24\1\107\15\24\71\0\1\15\53\0"+
    "\1\110\62\0\2\45\1\0\1\45\11\0\1\45\16\0"+
    "\1\45\150\0\1\45\30\0\1\111\3\0\1\112\113\0"+
    "\1\113\16\0\1\54\3\0\1\54\26\0\1\54\15\0"+
    "\1\54\4\0\1\54\41\0\1\114\45\0\1\45\70\0"+
    "\1\115\26\0\1\57\15\0\1\57\2\0\1\57\1\0"+
    "\1\57\5\0\13\61\1\116\55\61\2\62\1\0\66\62"+
    "\20\0\1\117\70\0\1\24\2\0\15\24\2\0\5\24"+
    "\1\120\20\24\21\0\1\24\2\0\15\24\2\0\17\24"+
    "\1\121\6\24\21\0\1\24\2\0\15\24\2\0\15\24"+
    "\1\122\10\24\21\0\1\24\2\0\15\24\2\0\20\24"+
    "\1\123\5\24\21\0\1\24\2\0\15\24\2\0\1\24"+
    "\1\100\24\24\21\0\1\24\2\0\15\24\2\0\1\24"+
    "\1\124\24\24\21\0\1\24\2\0\15\24\2\0\14\24"+
    "\1\125\11\24\21\0\1\24\2\0\15\24\2\0\6\24"+
    "\1\126\17\24\21\0\1\24\2\0\15\24\2\0\21\24"+
    "\1\127\4\24\21\0\1\24\2\0\15\24\2\0\13\24"+
    "\1\67\12\24\21\0\1\24\2\0\15\24\2\0\15\24"+
    "\1\130\10\24\21\0\1\24\2\0\15\24\2\0\17\24"+
    "\1\74\6\24\21\0\1\24\2\0\15\24\2\0\21\24"+
    "\1\74\4\24\21\0\1\24\2\0\15\24\2\0\11\24"+
    "\1\131\3\24\1\132\10\24\21\0\1\24\2\0\15\24"+
    "\2\0\2\24\1\133\23\24\21\0\1\24\2\0\15\24"+
    "\2\0\11\24\1\134\14\24\21\0\1\24\2\0\15\24"+
    "\2\0\11\24\1\135\14\24\21\0\1\24\2\0\15\24"+
    "\2\0\22\24\1\123\3\24\21\0\1\24\2\0\15\24"+
    "\2\0\11\24\1\136\14\24\57\0\1\137\35\0\1\140"+
    "\70\0\1\141\112\0\1\142\60\0\1\143\33\0\13\61"+
    "\1\116\3\61\1\144\51\61\20\0\1\24\2\0\15\24"+
    "\2\0\1\24\1\145\24\24\21\0\1\24\2\0\15\24"+
    "\2\0\11\24\1\146\14\24\21\0\1\24\2\0\15\24"+
    "\2\0\13\24\1\147\12\24\21\0\1\24\2\0\15\24"+
    "\2\0\5\24\1\74\20\24\21\0\1\24\2\0\15\24"+
    "\2\0\20\24\1\135\5\24\21\0\1\24\2\0\15\24"+
    "\2\0\21\24\1\150\4\24\21\0\1\24\2\0\15\24"+
    "\2\0\1\24\1\151\24\24\21\0\1\24\2\0\15\24"+
    "\2\0\5\24\1\152\20\24\21\0\1\24\2\0\15\24"+
    "\2\0\1\24\1\101\24\24\21\0\1\24\2\0\15\24"+
    "\2\0\14\24\1\153\6\24\1\154\2\24\21\0\1\24"+
    "\2\0\15\24\2\0\21\24\1\155\4\24\21\0\1\24"+
    "\2\0\15\24\2\0\13\24\1\156\12\24\21\0\1\24"+
    "\2\0\15\24\2\0\21\24\1\157\4\24\21\0\1\24"+
    "\2\0\15\24\2\0\20\24\1\74\5\24\21\0\1\24"+
    "\2\0\15\24\2\0\13\24\1\123\12\24\46\0\1\160"+
    "\62\0\1\161\67\0\1\162\101\0\1\163\54\0\1\164"+
    "\55\0\1\24\2\0\15\24\2\0\12\24\1\74\13\24"+
    "\21\0\1\24\2\0\15\24\2\0\14\24\1\165\11\24"+
    "\21\0\1\24\2\0\15\24\2\0\5\24\1\166\20\24"+
    "\21\0\1\24\2\0\15\24\2\0\11\24\1\167\14\24"+
    "\21\0\1\24\2\0\15\24\2\0\22\24\1\170\3\24"+
    "\21\0\1\24\2\0\15\24\2\0\14\24\1\171\11\24"+
    "\21\0\1\24\2\0\15\24\2\0\21\24\1\172\4\24"+
    "\21\0\1\24\2\0\15\24\2\0\1\24\1\173\24\24"+
    "\21\0\1\24\2\0\15\24\2\0\5\24\1\174\20\24"+
    "\21\0\1\24\2\0\15\24\2\0\11\24\1\175\14\24"+
    "\21\0\1\24\2\0\15\24\2\0\3\24\1\176\22\24"+
    "\56\0\1\177\36\0\1\200\72\0\1\201\111\0\1\202"+
    "\51\0\1\203\61\0\1\24\2\0\15\24\2\0\7\24"+
    "\1\74\16\24\21\0\1\24\2\0\15\24\2\0\1\24"+
    "\1\204\24\24\21\0\1\24\2\0\15\24\2\0\14\24"+
    "\1\106\11\24\21\0\1\24\2\0\15\24\2\0\13\24"+
    "\1\101\12\24\21\0\1\24\2\0\15\24\2\0\4\24"+
    "\1\135\21\24\21\0\1\24\2\0\15\24\2\0\13\24"+
    "\1\204\12\24\21\0\1\24\2\0\15\24\2\0\21\24"+
    "\1\123\4\24\21\0\1\24\2\0\15\24\2\0\3\24"+
    "\1\205\22\24\21\0\1\24\2\0\15\24\2\0\3\24"+
    "\1\74\22\24\21\0\1\24\2\0\15\24\2\0\10\24"+
    "\1\74\15\24\65\0\1\206\27\0\1\207\131\0\1\210"+
    "\41\0\1\211\53\0\1\24\2\0\15\24\2\0\14\24"+
    "\1\74\11\24\21\0\1\24\2\0\15\24\2\0\21\24"+
    "\1\212\4\24\47\0\1\213\53\0\1\214\120\0\1\215"+
    "\32\0\1\216\65\0\1\24\2\0\15\24\2\0\5\24"+
    "\1\217\20\24\50\0\1\45\70\0\1\220\53\0\1\221"+
    "\56\0\1\24\2\0\15\24\2\0\4\24\1\74\21\24"+
    "\24\0\1\222\45\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7467];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\10\1\2\11\26\1\1\11\4\1\10\0"+
    "\1\1\1\0\24\1\5\0\1\1\1\0\20\1\5\0"+
    "\1\11\13\1\5\0\12\1\1\0\1\11\3\0\2\1"+
    "\4\0\1\1\1\0\1\11\2\0\1\1\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
     private Reader yyreader;

    public colorear2(String input) {
        this.yyreader = new StringReader(input); 
            }


    public LinkedList<Errores> listaErrores = new LinkedList<>();    
    
    private Symbol symbol(int type){
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value){
		return new Symbol(type, yyline, yycolumn, value);
	}
        StringBuilder string;
    private colorInfo colorr(TipoT type){
        return new  colorInfo(type, yychar, yylength());
    }
    private colorInfo colorSTR(TipoT type){
        return new  colorInfo(type, yychar-string.toString().length()-1,  string.toString().length()+1); 
    }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public colorear2(java.io.Reader in) {
       
 
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public colorInfo yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	// return symbol(sym.EOF);

 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { { return colorr(TipoT.ERROR); }
            }
          // fall through
          case 10: break;
          case 2:
            { 
            }
          // fall through
          case 11: break;
          case 3:
            { return colorr(TipoT.SYMSS);
            }
          // fall through
          case 12: break;
          case 4:
            { return colorr(TipoT.SECTION);
            }
          // fall through
          case 13: break;
          case 5:
            { return colorr(TipoT.TODOO);
            }
          // fall through
          case 14: break;
          case 6:
            { return colorr(TipoT.RESERV);
            }
          // fall through
          case 15: break;
          case 7:
            { yybegin(JAVA); return colorr(TipoT.SECTION);
            }
          // fall through
          case 16: break;
          case 8:
            { yybegin(YYINITIAL); return colorr(TipoT.SECTION);
            }
          // fall through
          case 17: break;
          case 9:
            { yybegin(PROGRAMA); return colorr(TipoT.SECTION);
            }
          // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
